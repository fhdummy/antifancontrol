
AntiFanControll.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b86  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  00000b86  00000c1a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001e  0080006c  0080006c  00000c26  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000c26  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000c84  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000138  00000000  00000000  00000cc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d15  00000000  00000000  00000df8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000056e  00000000  00000000  00001b0d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000623  00000000  00000000  0000207b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000278  00000000  00000000  000026a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003e8  00000000  00000000  00002918  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003da  00000000  00000000  00002d00  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  000030da  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 6b 02 	jmp	0x4d6	; 0x4d6 <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 81 02 	jmp	0x502	; 0x502 <__vector_14>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e8       	ldi	r30, 0x86	; 134
  68:	fb e0       	ldi	r31, 0x0B	; 11
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 36       	cpi	r26, 0x6C	; 108
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ac e6       	ldi	r26, 0x6C	; 108
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 38       	cpi	r26, 0x8A	; 138
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <main>
  8a:	0c 94 c1 05 	jmp	0xb82	; 0xb82 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <setBarMeter>:
  92:	2b b3       	in	r18, 0x1b	; 27
  94:	2f 70       	andi	r18, 0x0F	; 15
  96:	2b bb       	out	0x1b, r18	; 27
  98:	84 33       	cpi	r24, 0x34	; 52
  9a:	91 05       	cpc	r25, r1
  9c:	08 f0       	brcs	.+2      	; 0xa0 <setBarMeter+0xe>
  9e:	dc 9a       	sbi	0x1b, 4	; 27
  a0:	87 36       	cpi	r24, 0x67	; 103
  a2:	91 05       	cpc	r25, r1
  a4:	18 f0       	brcs	.+6      	; 0xac <setBarMeter+0x1a>
  a6:	2b b3       	in	r18, 0x1b	; 27
  a8:	20 63       	ori	r18, 0x30	; 48
  aa:	2b bb       	out	0x1b, r18	; 27
  ac:	8a 39       	cpi	r24, 0x9A	; 154
  ae:	91 05       	cpc	r25, r1
  b0:	18 f0       	brcs	.+6      	; 0xb8 <setBarMeter+0x26>
  b2:	2b b3       	in	r18, 0x1b	; 27
  b4:	20 67       	ori	r18, 0x70	; 112
  b6:	2b bb       	out	0x1b, r18	; 27
  b8:	8d 3c       	cpi	r24, 0xCD	; 205
  ba:	91 05       	cpc	r25, r1
  bc:	18 f0       	brcs	.+6      	; 0xc4 <setBarMeter+0x32>
  be:	8b b3       	in	r24, 0x1b	; 27
  c0:	80 6f       	ori	r24, 0xF0	; 240
  c2:	8b bb       	out	0x1b, r24	; 27
  c4:	08 95       	ret

000000c6 <initBarMeter>:
  c6:	8a b3       	in	r24, 0x1a	; 26
  c8:	80 6f       	ori	r24, 0xF0	; 240
  ca:	8a bb       	out	0x1a, r24	; 26
  cc:	dc 98       	cbi	0x1b, 4	; 27
  ce:	08 95       	ret

000000d0 <sendUartString>:
unsigned char circularBuffer[CIRCULARBUFFERSIZE];
int bufferFreeLength;

int sendUartString(unsigned char *pData)
{
	int length = strlen(pData);
  d0:	fc 01       	movw	r30, r24
  d2:	01 90       	ld	r0, Z+
  d4:	00 20       	and	r0, r0
  d6:	e9 f7       	brne	.-6      	; 0xd2 <sendUartString+0x2>
  d8:	31 97       	sbiw	r30, 0x01	; 1
  da:	af 01       	movw	r20, r30
  dc:	48 1b       	sub	r20, r24
  de:	59 0b       	sbc	r21, r25
  e0:	fa 01       	movw	r30, r20
	
	if(pWrite >= pRead)
  e2:	60 91 88 00 	lds	r22, 0x0088
  e6:	70 91 89 00 	lds	r23, 0x0089
  ea:	20 91 86 00 	lds	r18, 0x0086
  ee:	30 91 87 00 	lds	r19, 0x0087
  f2:	62 17       	cp	r22, r18
  f4:	73 07       	cpc	r23, r19
  f6:	48 f0       	brcs	.+18     	; 0x10a <sendUartString+0x3a>
	{
		bufferFreeLength = CIRCULARBUFFERSIZE - (int)pWrite + (int)pRead - 1;
  f8:	26 1b       	sub	r18, r22
  fa:	37 0b       	sbc	r19, r23
  fc:	2d 5e       	subi	r18, 0xED	; 237
  fe:	3f 4f       	sbci	r19, 0xFF	; 255
 100:	30 93 85 00 	sts	0x0085, r19
 104:	20 93 84 00 	sts	0x0084, r18
 108:	08 c0       	rjmp	.+16     	; 0x11a <sendUartString+0x4a>
	}
	else
	{
		bufferFreeLength = (int)pRead - (int)pWrite - 1;
 10a:	26 1b       	sub	r18, r22
 10c:	37 0b       	sbc	r19, r23
 10e:	21 50       	subi	r18, 0x01	; 1
 110:	31 09       	sbc	r19, r1
 112:	30 93 85 00 	sts	0x0085, r19
 116:	20 93 84 00 	sts	0x0084, r18
	}
	
	if(length > bufferFreeLength) return 1;
 11a:	20 91 84 00 	lds	r18, 0x0084
 11e:	30 91 85 00 	lds	r19, 0x0085
 122:	2e 17       	cp	r18, r30
 124:	3f 07       	cpc	r19, r31
 126:	44 f1       	brlt	.+80     	; 0x178 <sendUartString+0xa8>
	
	for(int i = 0; i < length; i++)
 128:	1e 16       	cp	r1, r30
 12a:	1f 06       	cpc	r1, r31
 12c:	0c f5       	brge	.+66     	; 0x170 <sendUartString+0xa0>
 12e:	fc 01       	movw	r30, r24
 130:	48 0f       	add	r20, r24
 132:	59 1f       	adc	r21, r25
	{
		*pWrite = pData[i];
		pWrite++;
		if(pWrite >= &circularBuffer[CIRCULARBUFFERSIZE]) pWrite = circularBuffer;
 134:	60 e7       	ldi	r22, 0x70	; 112
 136:	70 e0       	ldi	r23, 0x00	; 0
	
	if(length > bufferFreeLength) return 1;
	
	for(int i = 0; i < length; i++)
	{
		*pWrite = pData[i];
 138:	a0 91 88 00 	lds	r26, 0x0088
 13c:	b0 91 89 00 	lds	r27, 0x0089
 140:	91 91       	ld	r25, Z+
 142:	9c 93       	st	X, r25
		pWrite++;
 144:	20 91 88 00 	lds	r18, 0x0088
 148:	30 91 89 00 	lds	r19, 0x0089
 14c:	2f 5f       	subi	r18, 0xFF	; 255
 14e:	3f 4f       	sbci	r19, 0xFF	; 255
		if(pWrite >= &circularBuffer[CIRCULARBUFFERSIZE]) pWrite = circularBuffer;
 150:	80 e0       	ldi	r24, 0x00	; 0
 152:	24 38       	cpi	r18, 0x84	; 132
 154:	38 07       	cpc	r19, r24
 156:	28 f4       	brcc	.+10     	; 0x162 <sendUartString+0x92>
	if(length > bufferFreeLength) return 1;
	
	for(int i = 0; i < length; i++)
	{
		*pWrite = pData[i];
		pWrite++;
 158:	30 93 89 00 	sts	0x0089, r19
 15c:	20 93 88 00 	sts	0x0088, r18
 160:	04 c0       	rjmp	.+8      	; 0x16a <sendUartString+0x9a>
		if(pWrite >= &circularBuffer[CIRCULARBUFFERSIZE]) pWrite = circularBuffer;
 162:	70 93 89 00 	sts	0x0089, r23
 166:	60 93 88 00 	sts	0x0088, r22
		bufferFreeLength = (int)pRead - (int)pWrite - 1;
	}
	
	if(length > bufferFreeLength) return 1;
	
	for(int i = 0; i < length; i++)
 16a:	e4 17       	cp	r30, r20
 16c:	f5 07       	cpc	r31, r21
 16e:	21 f7       	brne	.-56     	; 0x138 <sendUartString+0x68>
		*pWrite = pData[i];
		pWrite++;
		if(pWrite >= &circularBuffer[CIRCULARBUFFERSIZE]) pWrite = circularBuffer;
	}
	
	UCSRB |= (1 << UDRIE);
 170:	55 9a       	sbi	0x0a, 5	; 10
	
	return 0;
 172:	80 e0       	ldi	r24, 0x00	; 0
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	08 95       	ret
	else
	{
		bufferFreeLength = (int)pRead - (int)pWrite - 1;
	}
	
	if(length > bufferFreeLength) return 1;
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	90 e0       	ldi	r25, 0x00	; 0
	}
	
	UCSRB |= (1 << UDRIE);
	
	return 0;
} 
 17c:	08 95       	ret

0000017e <initCircularBuffer>:

void initCircularBuffer()
{
	pRead = circularBuffer;
 17e:	80 e7       	ldi	r24, 0x70	; 112
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	90 93 87 00 	sts	0x0087, r25
 186:	80 93 86 00 	sts	0x0086, r24
	pWrite = circularBuffer;
 18a:	90 93 89 00 	sts	0x0089, r25
 18e:	80 93 88 00 	sts	0x0088, r24
 192:	08 95       	ret

00000194 <toggleEnable>:
 194:	c3 9a       	sbi	0x18, 3	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 196:	85 e8       	ldi	r24, 0x85	; 133
 198:	8a 95       	dec	r24
 19a:	f1 f7       	brne	.-4      	; 0x198 <toggleEnable+0x4>
 19c:	00 00       	nop
 19e:	c3 98       	cbi	0x18, 3	; 24
 1a0:	08 95       	ret

000001a2 <setRS>:
 1a2:	c2 9a       	sbi	0x18, 2	; 24
 1a4:	08 95       	ret

000001a6 <resetRS>:
 1a6:	c2 98       	cbi	0x18, 2	; 24
 1a8:	08 95       	ret

000001aa <write4Bit>:
 1aa:	98 b3       	in	r25, 0x18	; 24
 1ac:	9f 70       	andi	r25, 0x0F	; 15
 1ae:	98 bb       	out	0x18, r25	; 24
 1b0:	28 b3       	in	r18, 0x18	; 24
 1b2:	30 e1       	ldi	r19, 0x10	; 16
 1b4:	83 9f       	mul	r24, r19
 1b6:	c0 01       	movw	r24, r0
 1b8:	11 24       	eor	r1, r1
 1ba:	82 2b       	or	r24, r18
 1bc:	88 bb       	out	0x18, r24	; 24
 1be:	0e 94 ca 00 	call	0x194	; 0x194 <toggleEnable>
 1c2:	08 95       	ret

000001c4 <writeCommand>:
 1c4:	cf 93       	push	r28
 1c6:	c8 2f       	mov	r28, r24
 1c8:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <resetRS>
 1cc:	8c 2f       	mov	r24, r28
 1ce:	82 95       	swap	r24
 1d0:	8f 70       	andi	r24, 0x0F	; 15
 1d2:	0e 94 d5 00 	call	0x1aa	; 0x1aa <write4Bit>
 1d6:	8c 2f       	mov	r24, r28
 1d8:	8f 70       	andi	r24, 0x0F	; 15
 1da:	0e 94 d5 00 	call	0x1aa	; 0x1aa <write4Bit>
 1de:	cf 91       	pop	r28
 1e0:	08 95       	ret

000001e2 <setCursorToHome>:
 1e2:	82 e0       	ldi	r24, 0x02	; 2
 1e4:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <writeCommand>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1e8:	8f e9       	ldi	r24, 0x9F	; 159
 1ea:	9f e0       	ldi	r25, 0x0F	; 15
 1ec:	01 97       	sbiw	r24, 0x01	; 1
 1ee:	f1 f7       	brne	.-4      	; 0x1ec <setCursorToHome+0xa>
 1f0:	00 c0       	rjmp	.+0      	; 0x1f2 <setCursorToHome+0x10>
 1f2:	00 00       	nop
 1f4:	08 95       	ret

000001f6 <setCursor2Line>:
 1f6:	80 ec       	ldi	r24, 0xC0	; 192
 1f8:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <writeCommand>
 1fc:	8f ec       	ldi	r24, 0xCF	; 207
 1fe:	97 e0       	ldi	r25, 0x07	; 7
 200:	01 97       	sbiw	r24, 0x01	; 1
 202:	f1 f7       	brne	.-4      	; 0x200 <setCursor2Line+0xa>
 204:	00 c0       	rjmp	.+0      	; 0x206 <setCursor2Line+0x10>
 206:	00 00       	nop
 208:	08 95       	ret

0000020a <writeData>:
 20a:	cf 93       	push	r28
 20c:	c8 2f       	mov	r28, r24
 20e:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <setRS>
 212:	8c 2f       	mov	r24, r28
 214:	82 95       	swap	r24
 216:	8f 70       	andi	r24, 0x0F	; 15
 218:	0e 94 d5 00 	call	0x1aa	; 0x1aa <write4Bit>
 21c:	8c 2f       	mov	r24, r28
 21e:	8f 70       	andi	r24, 0x0F	; 15
 220:	0e 94 d5 00 	call	0x1aa	; 0x1aa <write4Bit>
 224:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <resetRS>
 228:	cf 91       	pop	r28
 22a:	08 95       	ret

0000022c <clearDisplay>:
 22c:	80 e0       	ldi	r24, 0x00	; 0
 22e:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <writeCommand>
 232:	8f e6       	ldi	r24, 0x6F	; 111
 234:	97 e1       	ldi	r25, 0x17	; 23
 236:	01 97       	sbiw	r24, 0x01	; 1
 238:	f1 f7       	brne	.-4      	; 0x236 <clearDisplay+0xa>
 23a:	00 c0       	rjmp	.+0      	; 0x23c <clearDisplay+0x10>
 23c:	00 00       	nop
 23e:	81 e0       	ldi	r24, 0x01	; 1
 240:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <writeCommand>
 244:	8f e6       	ldi	r24, 0x6F	; 111
 246:	97 e1       	ldi	r25, 0x17	; 23
 248:	01 97       	sbiw	r24, 0x01	; 1
 24a:	f1 f7       	brne	.-4      	; 0x248 <clearDisplay+0x1c>
 24c:	00 c0       	rjmp	.+0      	; 0x24e <clearDisplay+0x22>
 24e:	00 00       	nop
 250:	08 95       	ret

00000252 <initDisplay>:
 252:	87 b3       	in	r24, 0x17	; 23
 254:	8c 6f       	ori	r24, 0xFC	; 252
 256:	87 bb       	out	0x17, r24	; 23
 258:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <resetRS>
 25c:	88 b3       	in	r24, 0x18	; 24
 25e:	80 63       	ori	r24, 0x30	; 48
 260:	88 bb       	out	0x18, r24	; 24
 262:	88 b3       	in	r24, 0x18	; 24
 264:	8f 73       	andi	r24, 0x3F	; 63
 266:	88 bb       	out	0x18, r24	; 24
 268:	8f e2       	ldi	r24, 0x2F	; 47
 26a:	95 e7       	ldi	r25, 0x75	; 117
 26c:	01 97       	sbiw	r24, 0x01	; 1
 26e:	f1 f7       	brne	.-4      	; 0x26c <initDisplay+0x1a>
 270:	00 c0       	rjmp	.+0      	; 0x272 <initDisplay+0x20>
 272:	00 00       	nop
 274:	0e 94 ca 00 	call	0x194	; 0x194 <toggleEnable>
 278:	8f e0       	ldi	r24, 0x0F	; 15
 27a:	97 e2       	ldi	r25, 0x27	; 39
 27c:	01 97       	sbiw	r24, 0x01	; 1
 27e:	f1 f7       	brne	.-4      	; 0x27c <initDisplay+0x2a>
 280:	00 c0       	rjmp	.+0      	; 0x282 <initDisplay+0x30>
 282:	00 00       	nop
 284:	0e 94 ca 00 	call	0x194	; 0x194 <toggleEnable>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 288:	8f e8       	ldi	r24, 0x8F	; 143
 28a:	91 e0       	ldi	r25, 0x01	; 1
 28c:	01 97       	sbiw	r24, 0x01	; 1
 28e:	f1 f7       	brne	.-4      	; 0x28c <initDisplay+0x3a>
 290:	00 c0       	rjmp	.+0      	; 0x292 <initDisplay+0x40>
 292:	00 00       	nop
 294:	0e 94 ca 00 	call	0x194	; 0x194 <toggleEnable>
 298:	c5 9a       	sbi	0x18, 5	; 24
 29a:	88 b3       	in	r24, 0x18	; 24
 29c:	8f 72       	andi	r24, 0x2F	; 47
 29e:	88 bb       	out	0x18, r24	; 24
 2a0:	0e 94 ca 00 	call	0x194	; 0x194 <toggleEnable>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2a4:	8f e6       	ldi	r24, 0x6F	; 111
 2a6:	97 e1       	ldi	r25, 0x17	; 23
 2a8:	01 97       	sbiw	r24, 0x01	; 1
 2aa:	f1 f7       	brne	.-4      	; 0x2a8 <initDisplay+0x56>
 2ac:	00 c0       	rjmp	.+0      	; 0x2ae <initDisplay+0x5c>
 2ae:	00 00       	nop
 2b0:	8c e2       	ldi	r24, 0x2C	; 44
 2b2:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <writeCommand>
 2b6:	8e e0       	ldi	r24, 0x0E	; 14
 2b8:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <writeCommand>
 2bc:	0e 94 16 01 	call	0x22c	; 0x22c <clearDisplay>
 2c0:	08 95       	ret

000002c2 <writeCharArray>:
 2c2:	0f 93       	push	r16
 2c4:	1f 93       	push	r17
 2c6:	cf 93       	push	r28
 2c8:	df 93       	push	r29
 2ca:	16 16       	cp	r1, r22
 2cc:	17 06       	cpc	r1, r23
 2ce:	54 f4       	brge	.+20     	; 0x2e4 <writeCharArray+0x22>
 2d0:	8c 01       	movw	r16, r24
 2d2:	ec 01       	movw	r28, r24
 2d4:	06 0f       	add	r16, r22
 2d6:	17 1f       	adc	r17, r23
 2d8:	89 91       	ld	r24, Y+
 2da:	0e 94 05 01 	call	0x20a	; 0x20a <writeData>
 2de:	c0 17       	cp	r28, r16
 2e0:	d1 07       	cpc	r29, r17
 2e2:	d1 f7       	brne	.-12     	; 0x2d8 <writeCharArray+0x16>
 2e4:	df 91       	pop	r29
 2e6:	cf 91       	pop	r28
 2e8:	1f 91       	pop	r17
 2ea:	0f 91       	pop	r16
 2ec:	08 95       	ret

000002ee <initRPM>:



void initRPM()
{
	GICR = 1<<INT0;					// Enable INT0
 2ee:	80 e4       	ldi	r24, 0x40	; 64
 2f0:	8b bf       	out	0x3b, r24	; 59
	MCUCR |= 1<<ISC01;				// Trigger INT0 on falling edge
 2f2:	85 b7       	in	r24, 0x35	; 53
 2f4:	82 60       	ori	r24, 0x02	; 2
 2f6:	85 bf       	out	0x35, r24	; 53
	MCUCR &= ~(1<<ISC00);
 2f8:	85 b7       	in	r24, 0x35	; 53
 2fa:	8e 7f       	andi	r24, 0xFE	; 254
 2fc:	85 bf       	out	0x35, r24	; 53
 2fe:	08 95       	ret

00000300 <initTimer1>:
}

void initTimer1(void)
{
	//Normal-Mode
	TCCR1A &= ~((1 << WGM10) | (1 << WGM11));
 300:	8f b5       	in	r24, 0x2f	; 47
 302:	8c 7f       	andi	r24, 0xFC	; 252
 304:	8f bd       	out	0x2f, r24	; 47
	TCCR1B &= ~((1 << WGM12) | (1 << WGM13));
 306:	8e b5       	in	r24, 0x2e	; 46
 308:	87 7e       	andi	r24, 0xE7	; 231
 30a:	8e bd       	out	0x2e, r24	; 46
	
	//Prescaler 64
	TCCR1B |= ((1 << CS10) | (1 << CS11));
 30c:	8e b5       	in	r24, 0x2e	; 46
 30e:	83 60       	ori	r24, 0x03	; 3
 310:	8e bd       	out	0x2e, r24	; 46
	TCCR1B &= ~((1 << CS12));
 312:	8e b5       	in	r24, 0x2e	; 46
 314:	8b 7f       	andi	r24, 0xFB	; 251
 316:	8e bd       	out	0x2e, r24	; 46
	
	TCNT1 = 0;
 318:	1d bc       	out	0x2d, r1	; 45
 31a:	1c bc       	out	0x2c, r1	; 44
 31c:	08 95       	ret

0000031e <initADC>:
	
}

void initADC()
{
	DDRA &= ~(1<<PA0);
 31e:	d0 98       	cbi	0x1a, 0	; 26
	ADMUX &= ~((1<<MUX0) | (1<<MUX1) | (1<<MUX2) | (1<<MUX3) | (1<<MUX4));	// ADC input channel set to PA0
 320:	87 b1       	in	r24, 0x07	; 7
 322:	80 7e       	andi	r24, 0xE0	; 224
 324:	87 b9       	out	0x07, r24	; 7
	
	ADMUX &=~(1<<REFS1);
 326:	3f 98       	cbi	0x07, 7	; 7
	ADMUX |= (1<<REFS0);
 328:	3e 9a       	sbi	0x07, 6	; 7
	ADCSRA |= (1<<ADEN);
 32a:	37 9a       	sbi	0x06, 7	; 6

	ADCSRA &= ~(1<<ADPS0);	//Prescaler 64
 32c:	30 98       	cbi	0x06, 0	; 6
	ADCSRA |= ((1<<ADPS1)|(1<<ADPS2));
 32e:	86 b1       	in	r24, 0x06	; 6
 330:	86 60       	ori	r24, 0x06	; 6
 332:	86 b9       	out	0x06, r24	; 6

	ADMUX |=(1<<ADLAR);
 334:	3d 9a       	sbi	0x07, 5	; 7
 336:	08 95       	ret

00000338 <readADC>:
}

void readADC()
{
	if(!(ADCSRA & (1<<ADSC)))	//still converting
 338:	36 99       	sbic	0x06, 6	; 6
 33a:	07 c0       	rjmp	.+14     	; 0x34a <readADC+0x12>
	{
		potiValueMeasured = ADCH;
 33c:	85 b1       	in	r24, 0x05	; 5
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	90 93 6d 00 	sts	0x006D, r25
 344:	80 93 6c 00 	sts	0x006C, r24
		ADCSRA |= (1<<ADSC);	//restart
 348:	36 9a       	sbi	0x06, 6	; 6
 34a:	08 95       	ret

0000034c <initPWM2>:
	}
}

void initPWM2()
{
	DDRD |= 1<<PD7;	//set pin to output
 34c:	8f 9a       	sbi	0x11, 7	; 17

	TCCR2 |= (1<<WGM21)|(1<<WGM20);	//set fastPWM
 34e:	85 b5       	in	r24, 0x25	; 37
 350:	88 64       	ori	r24, 0x48	; 72
 352:	85 bd       	out	0x25, r24	; 37
	OCR2 = 255;	//set compare register
 354:	8f ef       	ldi	r24, 0xFF	; 255
 356:	83 bd       	out	0x23, r24	; 35
	
	TCCR2 &= ~ ((1<<CS21)|(1<<CS22));	//prescaler = 1;
 358:	85 b5       	in	r24, 0x25	; 37
 35a:	89 7f       	andi	r24, 0xF9	; 249
 35c:	85 bd       	out	0x25, r24	; 37
	TCCR2 |= (1<<CS20);
 35e:	85 b5       	in	r24, 0x25	; 37
 360:	81 60       	ori	r24, 0x01	; 1
 362:	85 bd       	out	0x25, r24	; 37
	TCCR2 |= (1<<COM21);	//Clear OC2 on compare match, set OC2 at BOTTOM,
 364:	85 b5       	in	r24, 0x25	; 37
 366:	80 62       	ori	r24, 0x20	; 32
 368:	85 bd       	out	0x25, r24	; 37
	TCCR2 &= ~ (1<<COM20);
 36a:	85 b5       	in	r24, 0x25	; 37
 36c:	8f 7e       	andi	r24, 0xEF	; 239
 36e:	85 bd       	out	0x25, r24	; 37
 370:	08 95       	ret

00000372 <initUART>:
}

void initUART()		//S.161
{	
	UBRRH = 0;
 372:	10 bc       	out	0x20, r1	; 32
	UBRRL = 51;
 374:	83 e3       	ldi	r24, 0x33	; 51
 376:	89 b9       	out	0x09, r24	; 9
	
	UCSRB = ((1<<TXEN));									//UCSZ1,0 set to 1 UCSZ2 set to 0 for 8bit data
 378:	88 e0       	ldi	r24, 0x08	; 8
 37a:	8a b9       	out	0x0a, r24	; 10
	
	UCSRC = ((1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1));	//Asynchron 8N1
 37c:	86 e8       	ldi	r24, 0x86	; 134
 37e:	80 bd       	out	0x20, r24	; 32
	UCSRB |= (1 << UDRIE);				//no parity, UMSEL for async operation
 380:	55 9a       	sbi	0x0a, 5	; 10

	initCircularBuffer();
 382:	0e 94 bf 00 	call	0x17e	; 0x17e <initCircularBuffer>
 386:	08 95       	ret

00000388 <writeIntToDisplay>:
{
	writeCharArray(s, sizeof(s)/sizeof(s[0]));
}

void writeIntToDisplay(int value)
{
 388:	0f 93       	push	r16
 38a:	1f 93       	push	r17
 38c:	cf 93       	push	r28
 38e:	df 93       	push	r29
 390:	cd b7       	in	r28, 0x3d	; 61
 392:	de b7       	in	r29, 0x3e	; 62
 394:	2f 97       	sbiw	r28, 0x0f	; 15
 396:	0f b6       	in	r0, 0x3f	; 63
 398:	f8 94       	cli
 39a:	de bf       	out	0x3e, r29	; 62
 39c:	0f be       	out	0x3f, r0	; 63
 39e:	cd bf       	out	0x3d, r28	; 61
	char tempString[15];
	sprintf(tempString,"%15u", value);	
 3a0:	9f 93       	push	r25
 3a2:	8f 93       	push	r24
 3a4:	80 e6       	ldi	r24, 0x60	; 96
 3a6:	90 e0       	ldi	r25, 0x00	; 0
 3a8:	9f 93       	push	r25
 3aa:	8f 93       	push	r24
 3ac:	8e 01       	movw	r16, r28
 3ae:	0f 5f       	subi	r16, 0xFF	; 255
 3b0:	1f 4f       	sbci	r17, 0xFF	; 255
 3b2:	1f 93       	push	r17
 3b4:	0f 93       	push	r16
 3b6:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <sprintf>

	writeCharArray(tempString, sizeof(tempString)/sizeof(tempString[0]));
 3ba:	6f e0       	ldi	r22, 0x0F	; 15
 3bc:	70 e0       	ldi	r23, 0x00	; 0
 3be:	c8 01       	movw	r24, r16
 3c0:	0e 94 61 01 	call	0x2c2	; 0x2c2 <writeCharArray>
 3c4:	0f 90       	pop	r0
 3c6:	0f 90       	pop	r0
 3c8:	0f 90       	pop	r0
 3ca:	0f 90       	pop	r0
 3cc:	0f 90       	pop	r0
 3ce:	0f 90       	pop	r0
}
 3d0:	2f 96       	adiw	r28, 0x0f	; 15
 3d2:	0f b6       	in	r0, 0x3f	; 63
 3d4:	f8 94       	cli
 3d6:	de bf       	out	0x3e, r29	; 62
 3d8:	0f be       	out	0x3f, r0	; 63
 3da:	cd bf       	out	0x3d, r28	; 61
 3dc:	df 91       	pop	r29
 3de:	cf 91       	pop	r28
 3e0:	1f 91       	pop	r17
 3e2:	0f 91       	pop	r16
 3e4:	08 95       	ret

000003e6 <main>:

int main(void)
{
	initBarMeter();
 3e6:	0e 94 63 00 	call	0xc6	; 0xc6 <initBarMeter>
	initDisplay();
 3ea:	0e 94 29 01 	call	0x252	; 0x252 <initDisplay>
	initRPM();
 3ee:	0e 94 77 01 	call	0x2ee	; 0x2ee <initRPM>
	initTimer1();
 3f2:	0e 94 80 01 	call	0x300	; 0x300 <initTimer1>
	initADC();
 3f6:	0e 94 8f 01 	call	0x31e	; 0x31e <initADC>
	initPWM2();
 3fa:	0e 94 a6 01 	call	0x34c	; 0x34c <initPWM2>
	initCircularBuffer();
 3fe:	0e 94 bf 00 	call	0x17e	; 0x17e <initCircularBuffer>
	initUART();	
 402:	0e 94 b9 01 	call	0x372	; 0x372 <initUART>
	
	sei();
 406:	78 94       	sei
	
	//RingBuffer buffer = RingBuffer_create(20);		//ka obs funktioniert
	//writeToDisplay(":D");
	
	sendUartString("Hallo");
 408:	85 e6       	ldi	r24, 0x65	; 101
 40a:	90 e0       	ldi	r25, 0x00	; 0
 40c:	0e 94 68 00 	call	0xd0	; 0xd0 <sendUartString>
		
		setBarMeter(potiValueMeasured);
		
		readADC();
		setCursorToHome();
		writeIntToDisplay((60000000UL/((unsigned long)16*(unsigned long)actualFanSpeedMeasured)));	//Print RPM 
 410:	0f 2e       	mov	r0, r31
 412:	c1 2c       	mov	r12, r1
 414:	f7 e8       	ldi	r31, 0x87	; 135
 416:	df 2e       	mov	r13, r31
 418:	f3 e9       	ldi	r31, 0x93	; 147
 41a:	ef 2e       	mov	r14, r31
 41c:	f3 e0       	ldi	r31, 0x03	; 3
 41e:	ff 2e       	mov	r15, r31
 420:	f0 2d       	mov	r31, r0
		setCursor2Line();
		writeIntToDisplay((potiValueMeasured*100)/255);	//Print Duty
 422:	14 e6       	ldi	r17, 0x64	; 100
		setCursor2Line();
		writeIntToDisplay(8 * (unsigned long)actualFanSpeedMeasured);	//Print pulse time
		OCR2 = potiValueMeasured;
 424:	cc e6       	ldi	r28, 0x6C	; 108
 426:	d0 e0       	ldi	r29, 0x00	; 0
		/*if(uartStringEmpty == 1){
			initUartString("lol");
			sendUartChar();
		}*/
		
		setBarMeter(potiValueMeasured);
 428:	80 91 6c 00 	lds	r24, 0x006C
 42c:	90 91 6d 00 	lds	r25, 0x006D
 430:	0e 94 49 00 	call	0x92	; 0x92 <setBarMeter>
		
		readADC();
 434:	0e 94 9c 01 	call	0x338	; 0x338 <readADC>
		setCursorToHome();
 438:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <setCursorToHome>
		writeIntToDisplay((60000000UL/((unsigned long)16*(unsigned long)actualFanSpeedMeasured)));	//Print RPM 
 43c:	20 91 6e 00 	lds	r18, 0x006E
 440:	30 91 6f 00 	lds	r19, 0x006F
 444:	c9 01       	movw	r24, r18
 446:	a0 e0       	ldi	r26, 0x00	; 0
 448:	b0 e0       	ldi	r27, 0x00	; 0
 44a:	88 0f       	add	r24, r24
 44c:	99 1f       	adc	r25, r25
 44e:	aa 1f       	adc	r26, r26
 450:	bb 1f       	adc	r27, r27
 452:	88 0f       	add	r24, r24
 454:	99 1f       	adc	r25, r25
 456:	aa 1f       	adc	r26, r26
 458:	bb 1f       	adc	r27, r27
 45a:	9c 01       	movw	r18, r24
 45c:	ad 01       	movw	r20, r26
 45e:	22 0f       	add	r18, r18
 460:	33 1f       	adc	r19, r19
 462:	44 1f       	adc	r20, r20
 464:	55 1f       	adc	r21, r21
 466:	22 0f       	add	r18, r18
 468:	33 1f       	adc	r19, r19
 46a:	44 1f       	adc	r20, r20
 46c:	55 1f       	adc	r21, r21
 46e:	c7 01       	movw	r24, r14
 470:	b6 01       	movw	r22, r12
 472:	0e 94 b8 02 	call	0x570	; 0x570 <__udivmodsi4>
 476:	c9 01       	movw	r24, r18
 478:	0e 94 c4 01 	call	0x388	; 0x388 <writeIntToDisplay>
		setCursor2Line();
 47c:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <setCursor2Line>
		writeIntToDisplay((potiValueMeasured*100)/255);	//Print Duty
 480:	80 91 6c 00 	lds	r24, 0x006C
 484:	90 91 6d 00 	lds	r25, 0x006D
 488:	18 9f       	mul	r17, r24
 48a:	90 01       	movw	r18, r0
 48c:	19 9f       	mul	r17, r25
 48e:	30 0d       	add	r19, r0
 490:	11 24       	eor	r1, r1
 492:	a1 e8       	ldi	r26, 0x81	; 129
 494:	b0 e8       	ldi	r27, 0x80	; 128
 496:	0e 94 da 02 	call	0x5b4	; 0x5b4 <__umulhisi3>
 49a:	88 0f       	add	r24, r24
 49c:	89 2f       	mov	r24, r25
 49e:	88 1f       	adc	r24, r24
 4a0:	99 0b       	sbc	r25, r25
 4a2:	91 95       	neg	r25
 4a4:	0e 94 c4 01 	call	0x388	; 0x388 <writeIntToDisplay>
		setCursor2Line();
 4a8:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <setCursor2Line>
		writeIntToDisplay(8 * (unsigned long)actualFanSpeedMeasured);	//Print pulse time
 4ac:	80 91 6e 00 	lds	r24, 0x006E
 4b0:	90 91 6f 00 	lds	r25, 0x006F
 4b4:	88 0f       	add	r24, r24
 4b6:	99 1f       	adc	r25, r25
 4b8:	88 0f       	add	r24, r24
 4ba:	99 1f       	adc	r25, r25
 4bc:	88 0f       	add	r24, r24
 4be:	99 1f       	adc	r25, r25
 4c0:	0e 94 c4 01 	call	0x388	; 0x388 <writeIntToDisplay>
		OCR2 = potiValueMeasured;
 4c4:	88 81       	ld	r24, Y
 4c6:	83 bd       	out	0x23, r24	; 35
 4c8:	8f e1       	ldi	r24, 0x1F	; 31
 4ca:	9e e4       	ldi	r25, 0x4E	; 78
 4cc:	01 97       	sbiw	r24, 0x01	; 1
 4ce:	f1 f7       	brne	.-4      	; 0x4cc <main+0xe6>
 4d0:	00 c0       	rjmp	.+0      	; 0x4d2 <main+0xec>
 4d2:	00 00       	nop
 4d4:	a9 cf       	rjmp	.-174    	; 0x428 <main+0x42>

000004d6 <__vector_1>:
	
	return 0;
}

ISR(INT0_vect)
{
 4d6:	1f 92       	push	r1
 4d8:	0f 92       	push	r0
 4da:	0f b6       	in	r0, 0x3f	; 63
 4dc:	0f 92       	push	r0
 4de:	11 24       	eor	r1, r1
 4e0:	8f 93       	push	r24
 4e2:	9f 93       	push	r25
	actualFanSpeedMeasured = TCNT1;
 4e4:	8c b5       	in	r24, 0x2c	; 44
 4e6:	9d b5       	in	r25, 0x2d	; 45
 4e8:	90 93 6f 00 	sts	0x006F, r25
 4ec:	80 93 6e 00 	sts	0x006E, r24
	TCNT1 = 0x00;
 4f0:	1d bc       	out	0x2d, r1	; 45
 4f2:	1c bc       	out	0x2c, r1	; 44
}
 4f4:	9f 91       	pop	r25
 4f6:	8f 91       	pop	r24
 4f8:	0f 90       	pop	r0
 4fa:	0f be       	out	0x3f, r0	; 63
 4fc:	0f 90       	pop	r0
 4fe:	1f 90       	pop	r1
 500:	18 95       	reti

00000502 <__vector_14>:


ISR(USART_UDRE_vect)
{
 502:	1f 92       	push	r1
 504:	0f 92       	push	r0
 506:	0f b6       	in	r0, 0x3f	; 63
 508:	0f 92       	push	r0
 50a:	11 24       	eor	r1, r1
 50c:	2f 93       	push	r18
 50e:	8f 93       	push	r24
 510:	9f 93       	push	r25
 512:	ef 93       	push	r30
 514:	ff 93       	push	r31
	if(pRead == pWrite)
 516:	e0 91 86 00 	lds	r30, 0x0086
 51a:	f0 91 87 00 	lds	r31, 0x0087
 51e:	80 91 88 00 	lds	r24, 0x0088
 522:	90 91 89 00 	lds	r25, 0x0089
 526:	e8 17       	cp	r30, r24
 528:	f9 07       	cpc	r31, r25
 52a:	11 f4       	brne	.+4      	; 0x530 <__vector_14+0x2e>
	{
		UCSRB &=~ (1 << UDRIE);
 52c:	55 98       	cbi	0x0a, 5	; 10
		return 1;
 52e:	16 c0       	rjmp	.+44     	; 0x55c <__vector_14+0x5a>
	}
	
	UDR = *pRead;
 530:	80 81       	ld	r24, Z
 532:	8c b9       	out	0x0c, r24	; 12
	pRead++;
 534:	80 91 86 00 	lds	r24, 0x0086
 538:	90 91 87 00 	lds	r25, 0x0087
 53c:	01 96       	adiw	r24, 0x01	; 1
	if(pRead >= &circularBuffer[CIRCULARBUFFERSIZE])
 53e:	20 e0       	ldi	r18, 0x00	; 0
 540:	84 38       	cpi	r24, 0x84	; 132
 542:	92 07       	cpc	r25, r18
 544:	28 f4       	brcc	.+10     	; 0x550 <__vector_14+0x4e>
		UCSRB &=~ (1 << UDRIE);
		return 1;
	}
	
	UDR = *pRead;
	pRead++;
 546:	90 93 87 00 	sts	0x0087, r25
 54a:	80 93 86 00 	sts	0x0086, r24
 54e:	06 c0       	rjmp	.+12     	; 0x55c <__vector_14+0x5a>
	if(pRead >= &circularBuffer[CIRCULARBUFFERSIZE])
	{
		pRead = circularBuffer;
 550:	80 e7       	ldi	r24, 0x70	; 112
 552:	90 e0       	ldi	r25, 0x00	; 0
 554:	90 93 87 00 	sts	0x0087, r25
 558:	80 93 86 00 	sts	0x0086, r24
	}
}
 55c:	ff 91       	pop	r31
 55e:	ef 91       	pop	r30
 560:	9f 91       	pop	r25
 562:	8f 91       	pop	r24
 564:	2f 91       	pop	r18
 566:	0f 90       	pop	r0
 568:	0f be       	out	0x3f, r0	; 63
 56a:	0f 90       	pop	r0
 56c:	1f 90       	pop	r1
 56e:	18 95       	reti

00000570 <__udivmodsi4>:
 570:	a1 e2       	ldi	r26, 0x21	; 33
 572:	1a 2e       	mov	r1, r26
 574:	aa 1b       	sub	r26, r26
 576:	bb 1b       	sub	r27, r27
 578:	fd 01       	movw	r30, r26
 57a:	0d c0       	rjmp	.+26     	; 0x596 <__udivmodsi4_ep>

0000057c <__udivmodsi4_loop>:
 57c:	aa 1f       	adc	r26, r26
 57e:	bb 1f       	adc	r27, r27
 580:	ee 1f       	adc	r30, r30
 582:	ff 1f       	adc	r31, r31
 584:	a2 17       	cp	r26, r18
 586:	b3 07       	cpc	r27, r19
 588:	e4 07       	cpc	r30, r20
 58a:	f5 07       	cpc	r31, r21
 58c:	20 f0       	brcs	.+8      	; 0x596 <__udivmodsi4_ep>
 58e:	a2 1b       	sub	r26, r18
 590:	b3 0b       	sbc	r27, r19
 592:	e4 0b       	sbc	r30, r20
 594:	f5 0b       	sbc	r31, r21

00000596 <__udivmodsi4_ep>:
 596:	66 1f       	adc	r22, r22
 598:	77 1f       	adc	r23, r23
 59a:	88 1f       	adc	r24, r24
 59c:	99 1f       	adc	r25, r25
 59e:	1a 94       	dec	r1
 5a0:	69 f7       	brne	.-38     	; 0x57c <__udivmodsi4_loop>
 5a2:	60 95       	com	r22
 5a4:	70 95       	com	r23
 5a6:	80 95       	com	r24
 5a8:	90 95       	com	r25
 5aa:	9b 01       	movw	r18, r22
 5ac:	ac 01       	movw	r20, r24
 5ae:	bd 01       	movw	r22, r26
 5b0:	cf 01       	movw	r24, r30
 5b2:	08 95       	ret

000005b4 <__umulhisi3>:
 5b4:	a2 9f       	mul	r26, r18
 5b6:	b0 01       	movw	r22, r0
 5b8:	b3 9f       	mul	r27, r19
 5ba:	c0 01       	movw	r24, r0
 5bc:	a3 9f       	mul	r26, r19
 5be:	70 0d       	add	r23, r0
 5c0:	81 1d       	adc	r24, r1
 5c2:	11 24       	eor	r1, r1
 5c4:	91 1d       	adc	r25, r1
 5c6:	b2 9f       	mul	r27, r18
 5c8:	70 0d       	add	r23, r0
 5ca:	81 1d       	adc	r24, r1
 5cc:	11 24       	eor	r1, r1
 5ce:	91 1d       	adc	r25, r1
 5d0:	08 95       	ret

000005d2 <sprintf>:
 5d2:	ae e0       	ldi	r26, 0x0E	; 14
 5d4:	b0 e0       	ldi	r27, 0x00	; 0
 5d6:	ef ee       	ldi	r30, 0xEF	; 239
 5d8:	f2 e0       	ldi	r31, 0x02	; 2
 5da:	0c 94 98 05 	jmp	0xb30	; 0xb30 <__prologue_saves__+0x1c>
 5de:	0d 89       	ldd	r16, Y+21	; 0x15
 5e0:	1e 89       	ldd	r17, Y+22	; 0x16
 5e2:	86 e0       	ldi	r24, 0x06	; 6
 5e4:	8c 83       	std	Y+4, r24	; 0x04
 5e6:	1a 83       	std	Y+2, r17	; 0x02
 5e8:	09 83       	std	Y+1, r16	; 0x01
 5ea:	8f ef       	ldi	r24, 0xFF	; 255
 5ec:	9f e7       	ldi	r25, 0x7F	; 127
 5ee:	9e 83       	std	Y+6, r25	; 0x06
 5f0:	8d 83       	std	Y+5, r24	; 0x05
 5f2:	ae 01       	movw	r20, r28
 5f4:	47 5e       	subi	r20, 0xE7	; 231
 5f6:	5f 4f       	sbci	r21, 0xFF	; 255
 5f8:	6f 89       	ldd	r22, Y+23	; 0x17
 5fa:	78 8d       	ldd	r23, Y+24	; 0x18
 5fc:	ce 01       	movw	r24, r28
 5fe:	01 96       	adiw	r24, 0x01	; 1
 600:	0e 94 0c 03 	call	0x618	; 0x618 <vfprintf>
 604:	2f 81       	ldd	r18, Y+7	; 0x07
 606:	38 85       	ldd	r19, Y+8	; 0x08
 608:	f8 01       	movw	r30, r16
 60a:	e2 0f       	add	r30, r18
 60c:	f3 1f       	adc	r31, r19
 60e:	10 82       	st	Z, r1
 610:	2e 96       	adiw	r28, 0x0e	; 14
 612:	e4 e0       	ldi	r30, 0x04	; 4
 614:	0c 94 b4 05 	jmp	0xb68	; 0xb68 <__epilogue_restores__+0x1c>

00000618 <vfprintf>:
 618:	ac e0       	ldi	r26, 0x0C	; 12
 61a:	b0 e0       	ldi	r27, 0x00	; 0
 61c:	e2 e1       	ldi	r30, 0x12	; 18
 61e:	f3 e0       	ldi	r31, 0x03	; 3
 620:	0c 94 8a 05 	jmp	0xb14	; 0xb14 <__prologue_saves__>
 624:	7c 01       	movw	r14, r24
 626:	6b 01       	movw	r12, r22
 628:	8a 01       	movw	r16, r20
 62a:	fc 01       	movw	r30, r24
 62c:	17 82       	std	Z+7, r1	; 0x07
 62e:	16 82       	std	Z+6, r1	; 0x06
 630:	83 81       	ldd	r24, Z+3	; 0x03
 632:	81 ff       	sbrs	r24, 1
 634:	bd c1       	rjmp	.+890    	; 0x9b0 <__stack+0x151>
 636:	ce 01       	movw	r24, r28
 638:	01 96       	adiw	r24, 0x01	; 1
 63a:	4c 01       	movw	r8, r24
 63c:	f7 01       	movw	r30, r14
 63e:	93 81       	ldd	r25, Z+3	; 0x03
 640:	f6 01       	movw	r30, r12
 642:	93 fd       	sbrc	r25, 3
 644:	85 91       	lpm	r24, Z+
 646:	93 ff       	sbrs	r25, 3
 648:	81 91       	ld	r24, Z+
 64a:	6f 01       	movw	r12, r30
 64c:	88 23       	and	r24, r24
 64e:	09 f4       	brne	.+2      	; 0x652 <vfprintf+0x3a>
 650:	ab c1       	rjmp	.+854    	; 0x9a8 <__stack+0x149>
 652:	85 32       	cpi	r24, 0x25	; 37
 654:	39 f4       	brne	.+14     	; 0x664 <vfprintf+0x4c>
 656:	93 fd       	sbrc	r25, 3
 658:	85 91       	lpm	r24, Z+
 65a:	93 ff       	sbrs	r25, 3
 65c:	81 91       	ld	r24, Z+
 65e:	6f 01       	movw	r12, r30
 660:	85 32       	cpi	r24, 0x25	; 37
 662:	29 f4       	brne	.+10     	; 0x66e <vfprintf+0x56>
 664:	b7 01       	movw	r22, r14
 666:	90 e0       	ldi	r25, 0x00	; 0
 668:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <fputc>
 66c:	e7 cf       	rjmp	.-50     	; 0x63c <vfprintf+0x24>
 66e:	51 2c       	mov	r5, r1
 670:	31 2c       	mov	r3, r1
 672:	20 e0       	ldi	r18, 0x00	; 0
 674:	20 32       	cpi	r18, 0x20	; 32
 676:	a0 f4       	brcc	.+40     	; 0x6a0 <vfprintf+0x88>
 678:	8b 32       	cpi	r24, 0x2B	; 43
 67a:	69 f0       	breq	.+26     	; 0x696 <vfprintf+0x7e>
 67c:	30 f4       	brcc	.+12     	; 0x68a <vfprintf+0x72>
 67e:	80 32       	cpi	r24, 0x20	; 32
 680:	59 f0       	breq	.+22     	; 0x698 <vfprintf+0x80>
 682:	83 32       	cpi	r24, 0x23	; 35
 684:	69 f4       	brne	.+26     	; 0x6a0 <vfprintf+0x88>
 686:	20 61       	ori	r18, 0x10	; 16
 688:	2c c0       	rjmp	.+88     	; 0x6e2 <vfprintf+0xca>
 68a:	8d 32       	cpi	r24, 0x2D	; 45
 68c:	39 f0       	breq	.+14     	; 0x69c <vfprintf+0x84>
 68e:	80 33       	cpi	r24, 0x30	; 48
 690:	39 f4       	brne	.+14     	; 0x6a0 <vfprintf+0x88>
 692:	21 60       	ori	r18, 0x01	; 1
 694:	26 c0       	rjmp	.+76     	; 0x6e2 <vfprintf+0xca>
 696:	22 60       	ori	r18, 0x02	; 2
 698:	24 60       	ori	r18, 0x04	; 4
 69a:	23 c0       	rjmp	.+70     	; 0x6e2 <vfprintf+0xca>
 69c:	28 60       	ori	r18, 0x08	; 8
 69e:	21 c0       	rjmp	.+66     	; 0x6e2 <vfprintf+0xca>
 6a0:	27 fd       	sbrc	r18, 7
 6a2:	27 c0       	rjmp	.+78     	; 0x6f2 <vfprintf+0xda>
 6a4:	30 ed       	ldi	r19, 0xD0	; 208
 6a6:	38 0f       	add	r19, r24
 6a8:	3a 30       	cpi	r19, 0x0A	; 10
 6aa:	78 f4       	brcc	.+30     	; 0x6ca <vfprintf+0xb2>
 6ac:	26 ff       	sbrs	r18, 6
 6ae:	06 c0       	rjmp	.+12     	; 0x6bc <vfprintf+0xa4>
 6b0:	fa e0       	ldi	r31, 0x0A	; 10
 6b2:	5f 9e       	mul	r5, r31
 6b4:	30 0d       	add	r19, r0
 6b6:	11 24       	eor	r1, r1
 6b8:	53 2e       	mov	r5, r19
 6ba:	13 c0       	rjmp	.+38     	; 0x6e2 <vfprintf+0xca>
 6bc:	8a e0       	ldi	r24, 0x0A	; 10
 6be:	38 9e       	mul	r3, r24
 6c0:	30 0d       	add	r19, r0
 6c2:	11 24       	eor	r1, r1
 6c4:	33 2e       	mov	r3, r19
 6c6:	20 62       	ori	r18, 0x20	; 32
 6c8:	0c c0       	rjmp	.+24     	; 0x6e2 <vfprintf+0xca>
 6ca:	8e 32       	cpi	r24, 0x2E	; 46
 6cc:	21 f4       	brne	.+8      	; 0x6d6 <vfprintf+0xbe>
 6ce:	26 fd       	sbrc	r18, 6
 6d0:	6b c1       	rjmp	.+726    	; 0x9a8 <__stack+0x149>
 6d2:	20 64       	ori	r18, 0x40	; 64
 6d4:	06 c0       	rjmp	.+12     	; 0x6e2 <vfprintf+0xca>
 6d6:	8c 36       	cpi	r24, 0x6C	; 108
 6d8:	11 f4       	brne	.+4      	; 0x6de <vfprintf+0xc6>
 6da:	20 68       	ori	r18, 0x80	; 128
 6dc:	02 c0       	rjmp	.+4      	; 0x6e2 <vfprintf+0xca>
 6de:	88 36       	cpi	r24, 0x68	; 104
 6e0:	41 f4       	brne	.+16     	; 0x6f2 <vfprintf+0xda>
 6e2:	f6 01       	movw	r30, r12
 6e4:	93 fd       	sbrc	r25, 3
 6e6:	85 91       	lpm	r24, Z+
 6e8:	93 ff       	sbrs	r25, 3
 6ea:	81 91       	ld	r24, Z+
 6ec:	6f 01       	movw	r12, r30
 6ee:	81 11       	cpse	r24, r1
 6f0:	c1 cf       	rjmp	.-126    	; 0x674 <vfprintf+0x5c>
 6f2:	98 2f       	mov	r25, r24
 6f4:	9f 7d       	andi	r25, 0xDF	; 223
 6f6:	95 54       	subi	r25, 0x45	; 69
 6f8:	93 30       	cpi	r25, 0x03	; 3
 6fa:	28 f4       	brcc	.+10     	; 0x706 <vfprintf+0xee>
 6fc:	0c 5f       	subi	r16, 0xFC	; 252
 6fe:	1f 4f       	sbci	r17, 0xFF	; 255
 700:	ff e3       	ldi	r31, 0x3F	; 63
 702:	f9 83       	std	Y+1, r31	; 0x01
 704:	0d c0       	rjmp	.+26     	; 0x720 <vfprintf+0x108>
 706:	83 36       	cpi	r24, 0x63	; 99
 708:	31 f0       	breq	.+12     	; 0x716 <vfprintf+0xfe>
 70a:	83 37       	cpi	r24, 0x73	; 115
 70c:	71 f0       	breq	.+28     	; 0x72a <vfprintf+0x112>
 70e:	83 35       	cpi	r24, 0x53	; 83
 710:	09 f0       	breq	.+2      	; 0x714 <vfprintf+0xfc>
 712:	5b c0       	rjmp	.+182    	; 0x7ca <vfprintf+0x1b2>
 714:	22 c0       	rjmp	.+68     	; 0x75a <vfprintf+0x142>
 716:	f8 01       	movw	r30, r16
 718:	80 81       	ld	r24, Z
 71a:	89 83       	std	Y+1, r24	; 0x01
 71c:	0e 5f       	subi	r16, 0xFE	; 254
 71e:	1f 4f       	sbci	r17, 0xFF	; 255
 720:	44 24       	eor	r4, r4
 722:	43 94       	inc	r4
 724:	51 2c       	mov	r5, r1
 726:	54 01       	movw	r10, r8
 728:	15 c0       	rjmp	.+42     	; 0x754 <vfprintf+0x13c>
 72a:	38 01       	movw	r6, r16
 72c:	f2 e0       	ldi	r31, 0x02	; 2
 72e:	6f 0e       	add	r6, r31
 730:	71 1c       	adc	r7, r1
 732:	f8 01       	movw	r30, r16
 734:	a0 80       	ld	r10, Z
 736:	b1 80       	ldd	r11, Z+1	; 0x01
 738:	26 ff       	sbrs	r18, 6
 73a:	03 c0       	rjmp	.+6      	; 0x742 <vfprintf+0x12a>
 73c:	65 2d       	mov	r22, r5
 73e:	70 e0       	ldi	r23, 0x00	; 0
 740:	02 c0       	rjmp	.+4      	; 0x746 <vfprintf+0x12e>
 742:	6f ef       	ldi	r22, 0xFF	; 255
 744:	7f ef       	ldi	r23, 0xFF	; 255
 746:	c5 01       	movw	r24, r10
 748:	2c 87       	std	Y+12, r18	; 0x0c
 74a:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <strnlen>
 74e:	2c 01       	movw	r4, r24
 750:	83 01       	movw	r16, r6
 752:	2c 85       	ldd	r18, Y+12	; 0x0c
 754:	2f 77       	andi	r18, 0x7F	; 127
 756:	22 2e       	mov	r2, r18
 758:	17 c0       	rjmp	.+46     	; 0x788 <vfprintf+0x170>
 75a:	38 01       	movw	r6, r16
 75c:	f2 e0       	ldi	r31, 0x02	; 2
 75e:	6f 0e       	add	r6, r31
 760:	71 1c       	adc	r7, r1
 762:	f8 01       	movw	r30, r16
 764:	a0 80       	ld	r10, Z
 766:	b1 80       	ldd	r11, Z+1	; 0x01
 768:	26 ff       	sbrs	r18, 6
 76a:	03 c0       	rjmp	.+6      	; 0x772 <vfprintf+0x15a>
 76c:	65 2d       	mov	r22, r5
 76e:	70 e0       	ldi	r23, 0x00	; 0
 770:	02 c0       	rjmp	.+4      	; 0x776 <vfprintf+0x15e>
 772:	6f ef       	ldi	r22, 0xFF	; 255
 774:	7f ef       	ldi	r23, 0xFF	; 255
 776:	c5 01       	movw	r24, r10
 778:	2c 87       	std	Y+12, r18	; 0x0c
 77a:	0e 94 de 04 	call	0x9bc	; 0x9bc <strnlen_P>
 77e:	2c 01       	movw	r4, r24
 780:	2c 85       	ldd	r18, Y+12	; 0x0c
 782:	20 68       	ori	r18, 0x80	; 128
 784:	22 2e       	mov	r2, r18
 786:	83 01       	movw	r16, r6
 788:	23 fc       	sbrc	r2, 3
 78a:	1b c0       	rjmp	.+54     	; 0x7c2 <vfprintf+0x1aa>
 78c:	83 2d       	mov	r24, r3
 78e:	90 e0       	ldi	r25, 0x00	; 0
 790:	48 16       	cp	r4, r24
 792:	59 06       	cpc	r5, r25
 794:	b0 f4       	brcc	.+44     	; 0x7c2 <vfprintf+0x1aa>
 796:	b7 01       	movw	r22, r14
 798:	80 e2       	ldi	r24, 0x20	; 32
 79a:	90 e0       	ldi	r25, 0x00	; 0
 79c:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <fputc>
 7a0:	3a 94       	dec	r3
 7a2:	f4 cf       	rjmp	.-24     	; 0x78c <vfprintf+0x174>
 7a4:	f5 01       	movw	r30, r10
 7a6:	27 fc       	sbrc	r2, 7
 7a8:	85 91       	lpm	r24, Z+
 7aa:	27 fe       	sbrs	r2, 7
 7ac:	81 91       	ld	r24, Z+
 7ae:	5f 01       	movw	r10, r30
 7b0:	b7 01       	movw	r22, r14
 7b2:	90 e0       	ldi	r25, 0x00	; 0
 7b4:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <fputc>
 7b8:	31 10       	cpse	r3, r1
 7ba:	3a 94       	dec	r3
 7bc:	f1 e0       	ldi	r31, 0x01	; 1
 7be:	4f 1a       	sub	r4, r31
 7c0:	51 08       	sbc	r5, r1
 7c2:	41 14       	cp	r4, r1
 7c4:	51 04       	cpc	r5, r1
 7c6:	71 f7       	brne	.-36     	; 0x7a4 <vfprintf+0x18c>
 7c8:	e5 c0       	rjmp	.+458    	; 0x994 <__stack+0x135>
 7ca:	84 36       	cpi	r24, 0x64	; 100
 7cc:	11 f0       	breq	.+4      	; 0x7d2 <vfprintf+0x1ba>
 7ce:	89 36       	cpi	r24, 0x69	; 105
 7d0:	39 f5       	brne	.+78     	; 0x820 <vfprintf+0x208>
 7d2:	f8 01       	movw	r30, r16
 7d4:	27 ff       	sbrs	r18, 7
 7d6:	07 c0       	rjmp	.+14     	; 0x7e6 <vfprintf+0x1ce>
 7d8:	60 81       	ld	r22, Z
 7da:	71 81       	ldd	r23, Z+1	; 0x01
 7dc:	82 81       	ldd	r24, Z+2	; 0x02
 7de:	93 81       	ldd	r25, Z+3	; 0x03
 7e0:	0c 5f       	subi	r16, 0xFC	; 252
 7e2:	1f 4f       	sbci	r17, 0xFF	; 255
 7e4:	08 c0       	rjmp	.+16     	; 0x7f6 <vfprintf+0x1de>
 7e6:	60 81       	ld	r22, Z
 7e8:	71 81       	ldd	r23, Z+1	; 0x01
 7ea:	07 2e       	mov	r0, r23
 7ec:	00 0c       	add	r0, r0
 7ee:	88 0b       	sbc	r24, r24
 7f0:	99 0b       	sbc	r25, r25
 7f2:	0e 5f       	subi	r16, 0xFE	; 254
 7f4:	1f 4f       	sbci	r17, 0xFF	; 255
 7f6:	2f 76       	andi	r18, 0x6F	; 111
 7f8:	72 2e       	mov	r7, r18
 7fa:	97 ff       	sbrs	r25, 7
 7fc:	09 c0       	rjmp	.+18     	; 0x810 <vfprintf+0x1f8>
 7fe:	90 95       	com	r25
 800:	80 95       	com	r24
 802:	70 95       	com	r23
 804:	61 95       	neg	r22
 806:	7f 4f       	sbci	r23, 0xFF	; 255
 808:	8f 4f       	sbci	r24, 0xFF	; 255
 80a:	9f 4f       	sbci	r25, 0xFF	; 255
 80c:	20 68       	ori	r18, 0x80	; 128
 80e:	72 2e       	mov	r7, r18
 810:	2a e0       	ldi	r18, 0x0A	; 10
 812:	30 e0       	ldi	r19, 0x00	; 0
 814:	a4 01       	movw	r20, r8
 816:	0e 94 2c 05 	call	0xa58	; 0xa58 <__ultoa_invert>
 81a:	a8 2e       	mov	r10, r24
 81c:	a8 18       	sub	r10, r8
 81e:	44 c0       	rjmp	.+136    	; 0x8a8 <__stack+0x49>
 820:	85 37       	cpi	r24, 0x75	; 117
 822:	29 f4       	brne	.+10     	; 0x82e <vfprintf+0x216>
 824:	2f 7e       	andi	r18, 0xEF	; 239
 826:	b2 2e       	mov	r11, r18
 828:	2a e0       	ldi	r18, 0x0A	; 10
 82a:	30 e0       	ldi	r19, 0x00	; 0
 82c:	25 c0       	rjmp	.+74     	; 0x878 <__stack+0x19>
 82e:	f2 2f       	mov	r31, r18
 830:	f9 7f       	andi	r31, 0xF9	; 249
 832:	bf 2e       	mov	r11, r31
 834:	8f 36       	cpi	r24, 0x6F	; 111
 836:	c1 f0       	breq	.+48     	; 0x868 <__stack+0x9>
 838:	18 f4       	brcc	.+6      	; 0x840 <vfprintf+0x228>
 83a:	88 35       	cpi	r24, 0x58	; 88
 83c:	79 f0       	breq	.+30     	; 0x85c <vfprintf+0x244>
 83e:	b4 c0       	rjmp	.+360    	; 0x9a8 <__stack+0x149>
 840:	80 37       	cpi	r24, 0x70	; 112
 842:	19 f0       	breq	.+6      	; 0x84a <vfprintf+0x232>
 844:	88 37       	cpi	r24, 0x78	; 120
 846:	21 f0       	breq	.+8      	; 0x850 <vfprintf+0x238>
 848:	af c0       	rjmp	.+350    	; 0x9a8 <__stack+0x149>
 84a:	2f 2f       	mov	r18, r31
 84c:	20 61       	ori	r18, 0x10	; 16
 84e:	b2 2e       	mov	r11, r18
 850:	b4 fe       	sbrs	r11, 4
 852:	0d c0       	rjmp	.+26     	; 0x86e <__stack+0xf>
 854:	8b 2d       	mov	r24, r11
 856:	84 60       	ori	r24, 0x04	; 4
 858:	b8 2e       	mov	r11, r24
 85a:	09 c0       	rjmp	.+18     	; 0x86e <__stack+0xf>
 85c:	24 ff       	sbrs	r18, 4
 85e:	0a c0       	rjmp	.+20     	; 0x874 <__stack+0x15>
 860:	9f 2f       	mov	r25, r31
 862:	96 60       	ori	r25, 0x06	; 6
 864:	b9 2e       	mov	r11, r25
 866:	06 c0       	rjmp	.+12     	; 0x874 <__stack+0x15>
 868:	28 e0       	ldi	r18, 0x08	; 8
 86a:	30 e0       	ldi	r19, 0x00	; 0
 86c:	05 c0       	rjmp	.+10     	; 0x878 <__stack+0x19>
 86e:	20 e1       	ldi	r18, 0x10	; 16
 870:	30 e0       	ldi	r19, 0x00	; 0
 872:	02 c0       	rjmp	.+4      	; 0x878 <__stack+0x19>
 874:	20 e1       	ldi	r18, 0x10	; 16
 876:	32 e0       	ldi	r19, 0x02	; 2
 878:	f8 01       	movw	r30, r16
 87a:	b7 fe       	sbrs	r11, 7
 87c:	07 c0       	rjmp	.+14     	; 0x88c <__stack+0x2d>
 87e:	60 81       	ld	r22, Z
 880:	71 81       	ldd	r23, Z+1	; 0x01
 882:	82 81       	ldd	r24, Z+2	; 0x02
 884:	93 81       	ldd	r25, Z+3	; 0x03
 886:	0c 5f       	subi	r16, 0xFC	; 252
 888:	1f 4f       	sbci	r17, 0xFF	; 255
 88a:	06 c0       	rjmp	.+12     	; 0x898 <__stack+0x39>
 88c:	60 81       	ld	r22, Z
 88e:	71 81       	ldd	r23, Z+1	; 0x01
 890:	80 e0       	ldi	r24, 0x00	; 0
 892:	90 e0       	ldi	r25, 0x00	; 0
 894:	0e 5f       	subi	r16, 0xFE	; 254
 896:	1f 4f       	sbci	r17, 0xFF	; 255
 898:	a4 01       	movw	r20, r8
 89a:	0e 94 2c 05 	call	0xa58	; 0xa58 <__ultoa_invert>
 89e:	a8 2e       	mov	r10, r24
 8a0:	a8 18       	sub	r10, r8
 8a2:	fb 2d       	mov	r31, r11
 8a4:	ff 77       	andi	r31, 0x7F	; 127
 8a6:	7f 2e       	mov	r7, r31
 8a8:	76 fe       	sbrs	r7, 6
 8aa:	0b c0       	rjmp	.+22     	; 0x8c2 <__stack+0x63>
 8ac:	37 2d       	mov	r19, r7
 8ae:	3e 7f       	andi	r19, 0xFE	; 254
 8b0:	a5 14       	cp	r10, r5
 8b2:	50 f4       	brcc	.+20     	; 0x8c8 <__stack+0x69>
 8b4:	74 fe       	sbrs	r7, 4
 8b6:	0a c0       	rjmp	.+20     	; 0x8cc <__stack+0x6d>
 8b8:	72 fc       	sbrc	r7, 2
 8ba:	08 c0       	rjmp	.+16     	; 0x8cc <__stack+0x6d>
 8bc:	37 2d       	mov	r19, r7
 8be:	3e 7e       	andi	r19, 0xEE	; 238
 8c0:	05 c0       	rjmp	.+10     	; 0x8cc <__stack+0x6d>
 8c2:	ba 2c       	mov	r11, r10
 8c4:	37 2d       	mov	r19, r7
 8c6:	03 c0       	rjmp	.+6      	; 0x8ce <__stack+0x6f>
 8c8:	ba 2c       	mov	r11, r10
 8ca:	01 c0       	rjmp	.+2      	; 0x8ce <__stack+0x6f>
 8cc:	b5 2c       	mov	r11, r5
 8ce:	34 ff       	sbrs	r19, 4
 8d0:	0d c0       	rjmp	.+26     	; 0x8ec <__stack+0x8d>
 8d2:	fe 01       	movw	r30, r28
 8d4:	ea 0d       	add	r30, r10
 8d6:	f1 1d       	adc	r31, r1
 8d8:	80 81       	ld	r24, Z
 8da:	80 33       	cpi	r24, 0x30	; 48
 8dc:	11 f4       	brne	.+4      	; 0x8e2 <__stack+0x83>
 8de:	39 7e       	andi	r19, 0xE9	; 233
 8e0:	09 c0       	rjmp	.+18     	; 0x8f4 <__stack+0x95>
 8e2:	32 ff       	sbrs	r19, 2
 8e4:	06 c0       	rjmp	.+12     	; 0x8f2 <__stack+0x93>
 8e6:	b3 94       	inc	r11
 8e8:	b3 94       	inc	r11
 8ea:	04 c0       	rjmp	.+8      	; 0x8f4 <__stack+0x95>
 8ec:	83 2f       	mov	r24, r19
 8ee:	86 78       	andi	r24, 0x86	; 134
 8f0:	09 f0       	breq	.+2      	; 0x8f4 <__stack+0x95>
 8f2:	b3 94       	inc	r11
 8f4:	33 fd       	sbrc	r19, 3
 8f6:	13 c0       	rjmp	.+38     	; 0x91e <__stack+0xbf>
 8f8:	30 ff       	sbrs	r19, 0
 8fa:	06 c0       	rjmp	.+12     	; 0x908 <__stack+0xa9>
 8fc:	5a 2c       	mov	r5, r10
 8fe:	b3 14       	cp	r11, r3
 900:	18 f4       	brcc	.+6      	; 0x908 <__stack+0xa9>
 902:	53 0c       	add	r5, r3
 904:	5b 18       	sub	r5, r11
 906:	b3 2c       	mov	r11, r3
 908:	b3 14       	cp	r11, r3
 90a:	68 f4       	brcc	.+26     	; 0x926 <__stack+0xc7>
 90c:	b7 01       	movw	r22, r14
 90e:	80 e2       	ldi	r24, 0x20	; 32
 910:	90 e0       	ldi	r25, 0x00	; 0
 912:	3c 87       	std	Y+12, r19	; 0x0c
 914:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <fputc>
 918:	b3 94       	inc	r11
 91a:	3c 85       	ldd	r19, Y+12	; 0x0c
 91c:	f5 cf       	rjmp	.-22     	; 0x908 <__stack+0xa9>
 91e:	b3 14       	cp	r11, r3
 920:	10 f4       	brcc	.+4      	; 0x926 <__stack+0xc7>
 922:	3b 18       	sub	r3, r11
 924:	01 c0       	rjmp	.+2      	; 0x928 <__stack+0xc9>
 926:	31 2c       	mov	r3, r1
 928:	34 ff       	sbrs	r19, 4
 92a:	12 c0       	rjmp	.+36     	; 0x950 <__stack+0xf1>
 92c:	b7 01       	movw	r22, r14
 92e:	80 e3       	ldi	r24, 0x30	; 48
 930:	90 e0       	ldi	r25, 0x00	; 0
 932:	3c 87       	std	Y+12, r19	; 0x0c
 934:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <fputc>
 938:	3c 85       	ldd	r19, Y+12	; 0x0c
 93a:	32 ff       	sbrs	r19, 2
 93c:	17 c0       	rjmp	.+46     	; 0x96c <__stack+0x10d>
 93e:	31 fd       	sbrc	r19, 1
 940:	03 c0       	rjmp	.+6      	; 0x948 <__stack+0xe9>
 942:	88 e7       	ldi	r24, 0x78	; 120
 944:	90 e0       	ldi	r25, 0x00	; 0
 946:	02 c0       	rjmp	.+4      	; 0x94c <__stack+0xed>
 948:	88 e5       	ldi	r24, 0x58	; 88
 94a:	90 e0       	ldi	r25, 0x00	; 0
 94c:	b7 01       	movw	r22, r14
 94e:	0c c0       	rjmp	.+24     	; 0x968 <__stack+0x109>
 950:	83 2f       	mov	r24, r19
 952:	86 78       	andi	r24, 0x86	; 134
 954:	59 f0       	breq	.+22     	; 0x96c <__stack+0x10d>
 956:	31 ff       	sbrs	r19, 1
 958:	02 c0       	rjmp	.+4      	; 0x95e <__stack+0xff>
 95a:	8b e2       	ldi	r24, 0x2B	; 43
 95c:	01 c0       	rjmp	.+2      	; 0x960 <__stack+0x101>
 95e:	80 e2       	ldi	r24, 0x20	; 32
 960:	37 fd       	sbrc	r19, 7
 962:	8d e2       	ldi	r24, 0x2D	; 45
 964:	b7 01       	movw	r22, r14
 966:	90 e0       	ldi	r25, 0x00	; 0
 968:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <fputc>
 96c:	a5 14       	cp	r10, r5
 96e:	38 f4       	brcc	.+14     	; 0x97e <__stack+0x11f>
 970:	b7 01       	movw	r22, r14
 972:	80 e3       	ldi	r24, 0x30	; 48
 974:	90 e0       	ldi	r25, 0x00	; 0
 976:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <fputc>
 97a:	5a 94       	dec	r5
 97c:	f7 cf       	rjmp	.-18     	; 0x96c <__stack+0x10d>
 97e:	aa 94       	dec	r10
 980:	f4 01       	movw	r30, r8
 982:	ea 0d       	add	r30, r10
 984:	f1 1d       	adc	r31, r1
 986:	80 81       	ld	r24, Z
 988:	b7 01       	movw	r22, r14
 98a:	90 e0       	ldi	r25, 0x00	; 0
 98c:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <fputc>
 990:	a1 10       	cpse	r10, r1
 992:	f5 cf       	rjmp	.-22     	; 0x97e <__stack+0x11f>
 994:	33 20       	and	r3, r3
 996:	09 f4       	brne	.+2      	; 0x99a <__stack+0x13b>
 998:	51 ce       	rjmp	.-862    	; 0x63c <vfprintf+0x24>
 99a:	b7 01       	movw	r22, r14
 99c:	80 e2       	ldi	r24, 0x20	; 32
 99e:	90 e0       	ldi	r25, 0x00	; 0
 9a0:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <fputc>
 9a4:	3a 94       	dec	r3
 9a6:	f6 cf       	rjmp	.-20     	; 0x994 <__stack+0x135>
 9a8:	f7 01       	movw	r30, r14
 9aa:	86 81       	ldd	r24, Z+6	; 0x06
 9ac:	97 81       	ldd	r25, Z+7	; 0x07
 9ae:	02 c0       	rjmp	.+4      	; 0x9b4 <__stack+0x155>
 9b0:	8f ef       	ldi	r24, 0xFF	; 255
 9b2:	9f ef       	ldi	r25, 0xFF	; 255
 9b4:	2c 96       	adiw	r28, 0x0c	; 12
 9b6:	e2 e1       	ldi	r30, 0x12	; 18
 9b8:	0c 94 a6 05 	jmp	0xb4c	; 0xb4c <__epilogue_restores__>

000009bc <strnlen_P>:
 9bc:	fc 01       	movw	r30, r24
 9be:	05 90       	lpm	r0, Z+
 9c0:	61 50       	subi	r22, 0x01	; 1
 9c2:	70 40       	sbci	r23, 0x00	; 0
 9c4:	01 10       	cpse	r0, r1
 9c6:	d8 f7       	brcc	.-10     	; 0x9be <strnlen_P+0x2>
 9c8:	80 95       	com	r24
 9ca:	90 95       	com	r25
 9cc:	8e 0f       	add	r24, r30
 9ce:	9f 1f       	adc	r25, r31
 9d0:	08 95       	ret

000009d2 <strnlen>:
 9d2:	fc 01       	movw	r30, r24
 9d4:	61 50       	subi	r22, 0x01	; 1
 9d6:	70 40       	sbci	r23, 0x00	; 0
 9d8:	01 90       	ld	r0, Z+
 9da:	01 10       	cpse	r0, r1
 9dc:	d8 f7       	brcc	.-10     	; 0x9d4 <strnlen+0x2>
 9de:	80 95       	com	r24
 9e0:	90 95       	com	r25
 9e2:	8e 0f       	add	r24, r30
 9e4:	9f 1f       	adc	r25, r31
 9e6:	08 95       	ret

000009e8 <fputc>:
 9e8:	0f 93       	push	r16
 9ea:	1f 93       	push	r17
 9ec:	cf 93       	push	r28
 9ee:	df 93       	push	r29
 9f0:	fb 01       	movw	r30, r22
 9f2:	23 81       	ldd	r18, Z+3	; 0x03
 9f4:	21 fd       	sbrc	r18, 1
 9f6:	03 c0       	rjmp	.+6      	; 0x9fe <fputc+0x16>
 9f8:	8f ef       	ldi	r24, 0xFF	; 255
 9fa:	9f ef       	ldi	r25, 0xFF	; 255
 9fc:	28 c0       	rjmp	.+80     	; 0xa4e <fputc+0x66>
 9fe:	22 ff       	sbrs	r18, 2
 a00:	16 c0       	rjmp	.+44     	; 0xa2e <fputc+0x46>
 a02:	46 81       	ldd	r20, Z+6	; 0x06
 a04:	57 81       	ldd	r21, Z+7	; 0x07
 a06:	24 81       	ldd	r18, Z+4	; 0x04
 a08:	35 81       	ldd	r19, Z+5	; 0x05
 a0a:	42 17       	cp	r20, r18
 a0c:	53 07       	cpc	r21, r19
 a0e:	44 f4       	brge	.+16     	; 0xa20 <fputc+0x38>
 a10:	a0 81       	ld	r26, Z
 a12:	b1 81       	ldd	r27, Z+1	; 0x01
 a14:	9d 01       	movw	r18, r26
 a16:	2f 5f       	subi	r18, 0xFF	; 255
 a18:	3f 4f       	sbci	r19, 0xFF	; 255
 a1a:	31 83       	std	Z+1, r19	; 0x01
 a1c:	20 83       	st	Z, r18
 a1e:	8c 93       	st	X, r24
 a20:	26 81       	ldd	r18, Z+6	; 0x06
 a22:	37 81       	ldd	r19, Z+7	; 0x07
 a24:	2f 5f       	subi	r18, 0xFF	; 255
 a26:	3f 4f       	sbci	r19, 0xFF	; 255
 a28:	37 83       	std	Z+7, r19	; 0x07
 a2a:	26 83       	std	Z+6, r18	; 0x06
 a2c:	10 c0       	rjmp	.+32     	; 0xa4e <fputc+0x66>
 a2e:	eb 01       	movw	r28, r22
 a30:	09 2f       	mov	r16, r25
 a32:	18 2f       	mov	r17, r24
 a34:	00 84       	ldd	r0, Z+8	; 0x08
 a36:	f1 85       	ldd	r31, Z+9	; 0x09
 a38:	e0 2d       	mov	r30, r0
 a3a:	09 95       	icall
 a3c:	89 2b       	or	r24, r25
 a3e:	e1 f6       	brne	.-72     	; 0x9f8 <fputc+0x10>
 a40:	8e 81       	ldd	r24, Y+6	; 0x06
 a42:	9f 81       	ldd	r25, Y+7	; 0x07
 a44:	01 96       	adiw	r24, 0x01	; 1
 a46:	9f 83       	std	Y+7, r25	; 0x07
 a48:	8e 83       	std	Y+6, r24	; 0x06
 a4a:	81 2f       	mov	r24, r17
 a4c:	90 2f       	mov	r25, r16
 a4e:	df 91       	pop	r29
 a50:	cf 91       	pop	r28
 a52:	1f 91       	pop	r17
 a54:	0f 91       	pop	r16
 a56:	08 95       	ret

00000a58 <__ultoa_invert>:
 a58:	fa 01       	movw	r30, r20
 a5a:	aa 27       	eor	r26, r26
 a5c:	28 30       	cpi	r18, 0x08	; 8
 a5e:	51 f1       	breq	.+84     	; 0xab4 <__ultoa_invert+0x5c>
 a60:	20 31       	cpi	r18, 0x10	; 16
 a62:	81 f1       	breq	.+96     	; 0xac4 <__ultoa_invert+0x6c>
 a64:	e8 94       	clt
 a66:	6f 93       	push	r22
 a68:	6e 7f       	andi	r22, 0xFE	; 254
 a6a:	6e 5f       	subi	r22, 0xFE	; 254
 a6c:	7f 4f       	sbci	r23, 0xFF	; 255
 a6e:	8f 4f       	sbci	r24, 0xFF	; 255
 a70:	9f 4f       	sbci	r25, 0xFF	; 255
 a72:	af 4f       	sbci	r26, 0xFF	; 255
 a74:	b1 e0       	ldi	r27, 0x01	; 1
 a76:	3e d0       	rcall	.+124    	; 0xaf4 <__ultoa_invert+0x9c>
 a78:	b4 e0       	ldi	r27, 0x04	; 4
 a7a:	3c d0       	rcall	.+120    	; 0xaf4 <__ultoa_invert+0x9c>
 a7c:	67 0f       	add	r22, r23
 a7e:	78 1f       	adc	r23, r24
 a80:	89 1f       	adc	r24, r25
 a82:	9a 1f       	adc	r25, r26
 a84:	a1 1d       	adc	r26, r1
 a86:	68 0f       	add	r22, r24
 a88:	79 1f       	adc	r23, r25
 a8a:	8a 1f       	adc	r24, r26
 a8c:	91 1d       	adc	r25, r1
 a8e:	a1 1d       	adc	r26, r1
 a90:	6a 0f       	add	r22, r26
 a92:	71 1d       	adc	r23, r1
 a94:	81 1d       	adc	r24, r1
 a96:	91 1d       	adc	r25, r1
 a98:	a1 1d       	adc	r26, r1
 a9a:	20 d0       	rcall	.+64     	; 0xadc <__ultoa_invert+0x84>
 a9c:	09 f4       	brne	.+2      	; 0xaa0 <__ultoa_invert+0x48>
 a9e:	68 94       	set
 aa0:	3f 91       	pop	r19
 aa2:	2a e0       	ldi	r18, 0x0A	; 10
 aa4:	26 9f       	mul	r18, r22
 aa6:	11 24       	eor	r1, r1
 aa8:	30 19       	sub	r19, r0
 aaa:	30 5d       	subi	r19, 0xD0	; 208
 aac:	31 93       	st	Z+, r19
 aae:	de f6       	brtc	.-74     	; 0xa66 <__ultoa_invert+0xe>
 ab0:	cf 01       	movw	r24, r30
 ab2:	08 95       	ret
 ab4:	46 2f       	mov	r20, r22
 ab6:	47 70       	andi	r20, 0x07	; 7
 ab8:	40 5d       	subi	r20, 0xD0	; 208
 aba:	41 93       	st	Z+, r20
 abc:	b3 e0       	ldi	r27, 0x03	; 3
 abe:	0f d0       	rcall	.+30     	; 0xade <__ultoa_invert+0x86>
 ac0:	c9 f7       	brne	.-14     	; 0xab4 <__ultoa_invert+0x5c>
 ac2:	f6 cf       	rjmp	.-20     	; 0xab0 <__ultoa_invert+0x58>
 ac4:	46 2f       	mov	r20, r22
 ac6:	4f 70       	andi	r20, 0x0F	; 15
 ac8:	40 5d       	subi	r20, 0xD0	; 208
 aca:	4a 33       	cpi	r20, 0x3A	; 58
 acc:	18 f0       	brcs	.+6      	; 0xad4 <__ultoa_invert+0x7c>
 ace:	49 5d       	subi	r20, 0xD9	; 217
 ad0:	31 fd       	sbrc	r19, 1
 ad2:	40 52       	subi	r20, 0x20	; 32
 ad4:	41 93       	st	Z+, r20
 ad6:	02 d0       	rcall	.+4      	; 0xadc <__ultoa_invert+0x84>
 ad8:	a9 f7       	brne	.-22     	; 0xac4 <__ultoa_invert+0x6c>
 ada:	ea cf       	rjmp	.-44     	; 0xab0 <__ultoa_invert+0x58>
 adc:	b4 e0       	ldi	r27, 0x04	; 4
 ade:	a6 95       	lsr	r26
 ae0:	97 95       	ror	r25
 ae2:	87 95       	ror	r24
 ae4:	77 95       	ror	r23
 ae6:	67 95       	ror	r22
 ae8:	ba 95       	dec	r27
 aea:	c9 f7       	brne	.-14     	; 0xade <__ultoa_invert+0x86>
 aec:	00 97       	sbiw	r24, 0x00	; 0
 aee:	61 05       	cpc	r22, r1
 af0:	71 05       	cpc	r23, r1
 af2:	08 95       	ret
 af4:	9b 01       	movw	r18, r22
 af6:	ac 01       	movw	r20, r24
 af8:	0a 2e       	mov	r0, r26
 afa:	06 94       	lsr	r0
 afc:	57 95       	ror	r21
 afe:	47 95       	ror	r20
 b00:	37 95       	ror	r19
 b02:	27 95       	ror	r18
 b04:	ba 95       	dec	r27
 b06:	c9 f7       	brne	.-14     	; 0xafa <__ultoa_invert+0xa2>
 b08:	62 0f       	add	r22, r18
 b0a:	73 1f       	adc	r23, r19
 b0c:	84 1f       	adc	r24, r20
 b0e:	95 1f       	adc	r25, r21
 b10:	a0 1d       	adc	r26, r0
 b12:	08 95       	ret

00000b14 <__prologue_saves__>:
 b14:	2f 92       	push	r2
 b16:	3f 92       	push	r3
 b18:	4f 92       	push	r4
 b1a:	5f 92       	push	r5
 b1c:	6f 92       	push	r6
 b1e:	7f 92       	push	r7
 b20:	8f 92       	push	r8
 b22:	9f 92       	push	r9
 b24:	af 92       	push	r10
 b26:	bf 92       	push	r11
 b28:	cf 92       	push	r12
 b2a:	df 92       	push	r13
 b2c:	ef 92       	push	r14
 b2e:	ff 92       	push	r15
 b30:	0f 93       	push	r16
 b32:	1f 93       	push	r17
 b34:	cf 93       	push	r28
 b36:	df 93       	push	r29
 b38:	cd b7       	in	r28, 0x3d	; 61
 b3a:	de b7       	in	r29, 0x3e	; 62
 b3c:	ca 1b       	sub	r28, r26
 b3e:	db 0b       	sbc	r29, r27
 b40:	0f b6       	in	r0, 0x3f	; 63
 b42:	f8 94       	cli
 b44:	de bf       	out	0x3e, r29	; 62
 b46:	0f be       	out	0x3f, r0	; 63
 b48:	cd bf       	out	0x3d, r28	; 61
 b4a:	09 94       	ijmp

00000b4c <__epilogue_restores__>:
 b4c:	2a 88       	ldd	r2, Y+18	; 0x12
 b4e:	39 88       	ldd	r3, Y+17	; 0x11
 b50:	48 88       	ldd	r4, Y+16	; 0x10
 b52:	5f 84       	ldd	r5, Y+15	; 0x0f
 b54:	6e 84       	ldd	r6, Y+14	; 0x0e
 b56:	7d 84       	ldd	r7, Y+13	; 0x0d
 b58:	8c 84       	ldd	r8, Y+12	; 0x0c
 b5a:	9b 84       	ldd	r9, Y+11	; 0x0b
 b5c:	aa 84       	ldd	r10, Y+10	; 0x0a
 b5e:	b9 84       	ldd	r11, Y+9	; 0x09
 b60:	c8 84       	ldd	r12, Y+8	; 0x08
 b62:	df 80       	ldd	r13, Y+7	; 0x07
 b64:	ee 80       	ldd	r14, Y+6	; 0x06
 b66:	fd 80       	ldd	r15, Y+5	; 0x05
 b68:	0c 81       	ldd	r16, Y+4	; 0x04
 b6a:	1b 81       	ldd	r17, Y+3	; 0x03
 b6c:	aa 81       	ldd	r26, Y+2	; 0x02
 b6e:	b9 81       	ldd	r27, Y+1	; 0x01
 b70:	ce 0f       	add	r28, r30
 b72:	d1 1d       	adc	r29, r1
 b74:	0f b6       	in	r0, 0x3f	; 63
 b76:	f8 94       	cli
 b78:	de bf       	out	0x3e, r29	; 62
 b7a:	0f be       	out	0x3f, r0	; 63
 b7c:	cd bf       	out	0x3d, r28	; 61
 b7e:	ed 01       	movw	r28, r26
 b80:	08 95       	ret

00000b82 <_exit>:
 b82:	f8 94       	cli

00000b84 <__stop_program>:
 b84:	ff cf       	rjmp	.-2      	; 0xb84 <__stop_program>
