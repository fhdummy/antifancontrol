
AntiFanControll.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000af8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  00000af8  00000b8c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001e  00800078  00800078  00000ba4  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000ba4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000c00  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000138  00000000  00000000  00000c3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e1a  00000000  00000000  00000d74  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000579  00000000  00000000  00001b8e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000648  00000000  00000000  00002107  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000288  00000000  00000000  00002750  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003d2  00000000  00000000  000029d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000047d  00000000  00000000  00002daa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  00003227  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 24 02 	jmp	0x448	; 0x448 <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 3a 02 	jmp	0x474	; 0x474 <__vector_14>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 ef       	ldi	r30, 0xF8	; 248
  68:	fa e0       	ldi	r31, 0x0A	; 10
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 37       	cpi	r26, 0x78	; 120
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a8 e7       	ldi	r26, 0x78	; 120
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 39       	cpi	r26, 0x96	; 150
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 6d 01 	call	0x2da	; 0x2da <main>
  8a:	0c 94 7a 05 	jmp	0xaf4	; 0xaf4 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <setBarMeter>:
#include <avr/io.h>
#include "LCD.h"

void setBarMeter(unsigned int value)
{
	PORTA &= ~((1<<PA4)|(1<<PA5)|(1<<PA6)|(1<<PA7));
  92:	2b b3       	in	r18, 0x1b	; 27
  94:	2f 70       	andi	r18, 0x0F	; 15
  96:	2b bb       	out	0x1b, r18	; 27

	if ((value > 51) )	PORTA |= (1<<PA4);
  98:	84 33       	cpi	r24, 0x34	; 52
  9a:	91 05       	cpc	r25, r1
  9c:	08 f0       	brcs	.+2      	; 0xa0 <setBarMeter+0xe>
  9e:	dc 9a       	sbi	0x1b, 4	; 27
	if ((value > 102) )	PORTA |= (1<<PA4)|(1<<PA5);
  a0:	87 36       	cpi	r24, 0x67	; 103
  a2:	91 05       	cpc	r25, r1
  a4:	18 f0       	brcs	.+6      	; 0xac <setBarMeter+0x1a>
  a6:	2b b3       	in	r18, 0x1b	; 27
  a8:	20 63       	ori	r18, 0x30	; 48
  aa:	2b bb       	out	0x1b, r18	; 27
	if ((value > 153) )	PORTA |= (1<<PA4)|(1<<PA5)|(1<<PA6);
  ac:	8a 39       	cpi	r24, 0x9A	; 154
  ae:	91 05       	cpc	r25, r1
  b0:	18 f0       	brcs	.+6      	; 0xb8 <setBarMeter+0x26>
  b2:	2b b3       	in	r18, 0x1b	; 27
  b4:	20 67       	ori	r18, 0x70	; 112
  b6:	2b bb       	out	0x1b, r18	; 27
	if ((value > 204) )	PORTA |= (1<<PA4)|(1<<PA5)|(1<<PA6)|(1<<PA7);
  b8:	8d 3c       	cpi	r24, 0xCD	; 205
  ba:	91 05       	cpc	r25, r1
  bc:	18 f0       	brcs	.+6      	; 0xc4 <setBarMeter+0x32>
  be:	8b b3       	in	r24, 0x1b	; 27
  c0:	80 6f       	ori	r24, 0xF0	; 240
  c2:	8b bb       	out	0x1b, r24	; 27
  c4:	08 95       	ret

000000c6 <initBarMeter>:
	
}

void initBarMeter(void)
{
	DDRA |= (1<<PA4)|(1<<PA5)|(1<<PA6)|(1<<PA7);		//ausgang
  c6:	8a b3       	in	r24, 0x1a	; 26
  c8:	80 6f       	ori	r24, 0xF0	; 240
  ca:	8a bb       	out	0x1a, r24	; 26
	PORTA &= ~(1<<PA4)|(1<<PA5)|(1<<PA6)|(1<<PA7);
  cc:	dc 98       	cbi	0x1b, 4	; 27
  ce:	08 95       	ret

000000d0 <initCircularBuffer>:
	return 0;
} 

void initCircularBuffer()
{
	pRead = circularBuffer;
  d0:	8c e7       	ldi	r24, 0x7C	; 124
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	90 93 93 00 	sts	0x0093, r25
  d8:	80 93 92 00 	sts	0x0092, r24
	pWrite = circularBuffer;
  dc:	90 93 95 00 	sts	0x0095, r25
  e0:	80 93 94 00 	sts	0x0094, r24
  e4:	08 95       	ret

000000e6 <toggleEnable>:
#include <util/delay.h>

/* Copyright by Marco Gruber */

void toggleEnable() {
	PORTB |= 1<<PB3;
  e6:	c3 9a       	sbi	0x18, 3	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e8:	85 e8       	ldi	r24, 0x85	; 133
  ea:	8a 95       	dec	r24
  ec:	f1 f7       	brne	.-4      	; 0xea <toggleEnable+0x4>
  ee:	00 00       	nop
	_delay_us(50);
	PORTB &= ~(1<<PB3);
  f0:	c3 98       	cbi	0x18, 3	; 24
  f2:	08 95       	ret

000000f4 <setRS>:
}

void setRS() {
	PORTB |= 0x04;
  f4:	c2 9a       	sbi	0x18, 2	; 24
  f6:	08 95       	ret

000000f8 <resetRS>:
}

void resetRS() {
	PORTB &= ~0x04;
  f8:	c2 98       	cbi	0x18, 2	; 24
  fa:	08 95       	ret

000000fc <write4Bit>:
}

void write4Bit(char command) {
	PORTB &= 0x0f;
  fc:	98 b3       	in	r25, 0x18	; 24
  fe:	9f 70       	andi	r25, 0x0F	; 15
 100:	98 bb       	out	0x18, r25	; 24
	PORTB |= (command<<4);
 102:	28 b3       	in	r18, 0x18	; 24
 104:	30 e1       	ldi	r19, 0x10	; 16
 106:	83 9f       	mul	r24, r19
 108:	c0 01       	movw	r24, r0
 10a:	11 24       	eor	r1, r1
 10c:	82 2b       	or	r24, r18
 10e:	88 bb       	out	0x18, r24	; 24
	toggleEnable();
 110:	0e 94 73 00 	call	0xe6	; 0xe6 <toggleEnable>
 114:	08 95       	ret

00000116 <writeCommand>:
}

void writeCommand(char command) {
 116:	cf 93       	push	r28
 118:	c8 2f       	mov	r28, r24
	resetRS();
 11a:	0e 94 7c 00 	call	0xf8	; 0xf8 <resetRS>
	write4Bit((command&0xf0)>>4);
 11e:	8c 2f       	mov	r24, r28
 120:	82 95       	swap	r24
 122:	8f 70       	andi	r24, 0x0F	; 15
 124:	0e 94 7e 00 	call	0xfc	; 0xfc <write4Bit>
	write4Bit(command&0x0f);
 128:	8c 2f       	mov	r24, r28
 12a:	8f 70       	andi	r24, 0x0F	; 15
 12c:	0e 94 7e 00 	call	0xfc	; 0xfc <write4Bit>
}
 130:	cf 91       	pop	r28
 132:	08 95       	ret

00000134 <setCursorToHome>:
	
	clearDisplay();
}

void setCursorToHome() {
	writeCommand(0x02);
 134:	82 e0       	ldi	r24, 0x02	; 2
 136:	0e 94 8b 00 	call	0x116	; 0x116 <writeCommand>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 13a:	8f e9       	ldi	r24, 0x9F	; 159
 13c:	9f e0       	ldi	r25, 0x0F	; 15
 13e:	01 97       	sbiw	r24, 0x01	; 1
 140:	f1 f7       	brne	.-4      	; 0x13e <setCursorToHome+0xa>
 142:	00 c0       	rjmp	.+0      	; 0x144 <setCursorToHome+0x10>
 144:	00 00       	nop
 146:	08 95       	ret

00000148 <setCursor2Line>:
	_delay_ms(2);
}

void setCursor2Line() {
	writeCommand(0xc0);
 148:	80 ec       	ldi	r24, 0xC0	; 192
 14a:	0e 94 8b 00 	call	0x116	; 0x116 <writeCommand>
 14e:	8f ec       	ldi	r24, 0xCF	; 207
 150:	97 e0       	ldi	r25, 0x07	; 7
 152:	01 97       	sbiw	r24, 0x01	; 1
 154:	f1 f7       	brne	.-4      	; 0x152 <setCursor2Line+0xa>
 156:	00 c0       	rjmp	.+0      	; 0x158 <setCursor2Line+0x10>
 158:	00 00       	nop
 15a:	08 95       	ret

0000015c <writeData>:
void shiftCursorRight() {
	writeCommand(0x14);
	
}

void writeData(char command) {
 15c:	cf 93       	push	r28
 15e:	c8 2f       	mov	r28, r24
	setRS();
 160:	0e 94 7a 00 	call	0xf4	; 0xf4 <setRS>
	write4Bit((command&0xf0)>>4);
 164:	8c 2f       	mov	r24, r28
 166:	82 95       	swap	r24
 168:	8f 70       	andi	r24, 0x0F	; 15
 16a:	0e 94 7e 00 	call	0xfc	; 0xfc <write4Bit>
	write4Bit(command&0x0f);
 16e:	8c 2f       	mov	r24, r28
 170:	8f 70       	andi	r24, 0x0F	; 15
 172:	0e 94 7e 00 	call	0xfc	; 0xfc <write4Bit>
	resetRS();
 176:	0e 94 7c 00 	call	0xf8	; 0xf8 <resetRS>
}
 17a:	cf 91       	pop	r28
 17c:	08 95       	ret

0000017e <clearDisplay>:

void clearDisplay() {
	writeCommand(0x0);
 17e:	80 e0       	ldi	r24, 0x00	; 0
 180:	0e 94 8b 00 	call	0x116	; 0x116 <writeCommand>
 184:	8f e6       	ldi	r24, 0x6F	; 111
 186:	97 e1       	ldi	r25, 0x17	; 23
 188:	01 97       	sbiw	r24, 0x01	; 1
 18a:	f1 f7       	brne	.-4      	; 0x188 <clearDisplay+0xa>
 18c:	00 c0       	rjmp	.+0      	; 0x18e <clearDisplay+0x10>
 18e:	00 00       	nop
	_delay_ms(3);
	writeCommand(0x1);
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	0e 94 8b 00 	call	0x116	; 0x116 <writeCommand>
 196:	8f e6       	ldi	r24, 0x6F	; 111
 198:	97 e1       	ldi	r25, 0x17	; 23
 19a:	01 97       	sbiw	r24, 0x01	; 1
 19c:	f1 f7       	brne	.-4      	; 0x19a <clearDisplay+0x1c>
 19e:	00 c0       	rjmp	.+0      	; 0x1a0 <clearDisplay+0x22>
 1a0:	00 00       	nop
 1a2:	08 95       	ret

000001a4 <initDisplay>:
	write4Bit((command&0xf0)>>4);
	write4Bit(command&0x0f);
}

void initDisplay() {
	DDRB |= 0xfc;
 1a4:	87 b3       	in	r24, 0x17	; 23
 1a6:	8c 6f       	ori	r24, 0xFC	; 252
 1a8:	87 bb       	out	0x17, r24	; 23
	resetRS();
 1aa:	0e 94 7c 00 	call	0xf8	; 0xf8 <resetRS>
	
	PORTB |= 0x30;
 1ae:	88 b3       	in	r24, 0x18	; 24
 1b0:	80 63       	ori	r24, 0x30	; 48
 1b2:	88 bb       	out	0x18, r24	; 24
	PORTB &= 0x3f;
 1b4:	88 b3       	in	r24, 0x18	; 24
 1b6:	8f 73       	andi	r24, 0x3F	; 63
 1b8:	88 bb       	out	0x18, r24	; 24
 1ba:	8f e2       	ldi	r24, 0x2F	; 47
 1bc:	95 e7       	ldi	r25, 0x75	; 117
 1be:	01 97       	sbiw	r24, 0x01	; 1
 1c0:	f1 f7       	brne	.-4      	; 0x1be <initDisplay+0x1a>
 1c2:	00 c0       	rjmp	.+0      	; 0x1c4 <initDisplay+0x20>
 1c4:	00 00       	nop
	_delay_ms(15);
	toggleEnable();
 1c6:	0e 94 73 00 	call	0xe6	; 0xe6 <toggleEnable>
 1ca:	8f e0       	ldi	r24, 0x0F	; 15
 1cc:	97 e2       	ldi	r25, 0x27	; 39
 1ce:	01 97       	sbiw	r24, 0x01	; 1
 1d0:	f1 f7       	brne	.-4      	; 0x1ce <initDisplay+0x2a>
 1d2:	00 c0       	rjmp	.+0      	; 0x1d4 <initDisplay+0x30>
 1d4:	00 00       	nop
	_delay_ms(5);
	toggleEnable();
 1d6:	0e 94 73 00 	call	0xe6	; 0xe6 <toggleEnable>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1da:	8f e8       	ldi	r24, 0x8F	; 143
 1dc:	91 e0       	ldi	r25, 0x01	; 1
 1de:	01 97       	sbiw	r24, 0x01	; 1
 1e0:	f1 f7       	brne	.-4      	; 0x1de <initDisplay+0x3a>
 1e2:	00 c0       	rjmp	.+0      	; 0x1e4 <initDisplay+0x40>
 1e4:	00 00       	nop
	_delay_us(200);
	toggleEnable();
 1e6:	0e 94 73 00 	call	0xe6	; 0xe6 <toggleEnable>

	PORTB |= 0x20;
 1ea:	c5 9a       	sbi	0x18, 5	; 24
	PORTB &= 0x2f;
 1ec:	88 b3       	in	r24, 0x18	; 24
 1ee:	8f 72       	andi	r24, 0x2F	; 47
 1f0:	88 bb       	out	0x18, r24	; 24
	toggleEnable();
 1f2:	0e 94 73 00 	call	0xe6	; 0xe6 <toggleEnable>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1f6:	8f e6       	ldi	r24, 0x6F	; 111
 1f8:	97 e1       	ldi	r25, 0x17	; 23
 1fa:	01 97       	sbiw	r24, 0x01	; 1
 1fc:	f1 f7       	brne	.-4      	; 0x1fa <initDisplay+0x56>
 1fe:	00 c0       	rjmp	.+0      	; 0x200 <initDisplay+0x5c>
 200:	00 00       	nop
	
	_delay_ms(3);
	
	writeCommand(0x2C);
 202:	8c e2       	ldi	r24, 0x2C	; 44
 204:	0e 94 8b 00 	call	0x116	; 0x116 <writeCommand>
	/*_delay_ms(3);
	writeCommand(0xC);
	_delay_ms(3);*/
	
	writeCommand(0x0E);
 208:	8e e0       	ldi	r24, 0x0E	; 14
 20a:	0e 94 8b 00 	call	0x116	; 0x116 <writeCommand>
	/*_delay_ms(3);
	writeCommand(0xe);
	_delay_ms(3);*/
	
	clearDisplay();
 20e:	0e 94 bf 00 	call	0x17e	; 0x17e <clearDisplay>
 212:	08 95       	ret

00000214 <writeCharArray>:
	writeCommand(0x0);
	_delay_ms(3);
	writeCommand(0x1);
	_delay_ms(3);
}
void writeCharArray(char *commands,int length) {
 214:	0f 93       	push	r16
 216:	1f 93       	push	r17
 218:	cf 93       	push	r28
 21a:	df 93       	push	r29
	int i;
	for(i=0;i < length;i++) {
 21c:	16 16       	cp	r1, r22
 21e:	17 06       	cpc	r1, r23
 220:	54 f4       	brge	.+20     	; 0x236 <writeCharArray+0x22>
 222:	8c 01       	movw	r16, r24
 224:	ec 01       	movw	r28, r24
 226:	06 0f       	add	r16, r22
 228:	17 1f       	adc	r17, r23
		writeData(commands[i]);	
 22a:	89 91       	ld	r24, Y+
 22c:	0e 94 ae 00 	call	0x15c	; 0x15c <writeData>
	writeCommand(0x1);
	_delay_ms(3);
}
void writeCharArray(char *commands,int length) {
	int i;
	for(i=0;i < length;i++) {
 230:	c0 17       	cp	r28, r16
 232:	d1 07       	cpc	r29, r17
 234:	d1 f7       	brne	.-12     	; 0x22a <writeCharArray+0x16>
		writeData(commands[i]);	
	}
}
 236:	df 91       	pop	r29
 238:	cf 91       	pop	r28
 23a:	1f 91       	pop	r17
 23c:	0f 91       	pop	r16
 23e:	08 95       	ret

00000240 <initRPM>:
unsigned short actualFanSpeedMeasured = 0;
unsigned short potiValueMeasured = 0;

void initRPM()
{
	GICR = 1<<INT0;					// Enable INT0
 240:	80 e4       	ldi	r24, 0x40	; 64
 242:	8b bf       	out	0x3b, r24	; 59
	MCUCR |= 1<<ISC01;				// Trigger INT0 on falling edge
 244:	85 b7       	in	r24, 0x35	; 53
 246:	82 60       	ori	r24, 0x02	; 2
 248:	85 bf       	out	0x35, r24	; 53
	MCUCR &= ~(1<<ISC00);
 24a:	85 b7       	in	r24, 0x35	; 53
 24c:	8e 7f       	andi	r24, 0xFE	; 254
 24e:	85 bf       	out	0x35, r24	; 53
 250:	08 95       	ret

00000252 <initTimer1>:
}

void initTimer1(void)
{
	//Normal-Mode
	TCCR1A &= ~((1 << WGM10) | (1 << WGM11));
 252:	8f b5       	in	r24, 0x2f	; 47
 254:	8c 7f       	andi	r24, 0xFC	; 252
 256:	8f bd       	out	0x2f, r24	; 47
	TCCR1B &= ~((1 << WGM12) | (1 << WGM13));
 258:	8e b5       	in	r24, 0x2e	; 46
 25a:	87 7e       	andi	r24, 0xE7	; 231
 25c:	8e bd       	out	0x2e, r24	; 46
	
	//Prescaler 64
	TCCR1B |= ((1 << CS10) | (1 << CS11));
 25e:	8e b5       	in	r24, 0x2e	; 46
 260:	83 60       	ori	r24, 0x03	; 3
 262:	8e bd       	out	0x2e, r24	; 46
	TCCR1B &= ~((1 << CS12));
 264:	8e b5       	in	r24, 0x2e	; 46
 266:	8b 7f       	andi	r24, 0xFB	; 251
 268:	8e bd       	out	0x2e, r24	; 46
	
	TCNT1 = 0;
 26a:	1d bc       	out	0x2d, r1	; 45
 26c:	1c bc       	out	0x2c, r1	; 44
 26e:	08 95       	ret

00000270 <initADC>:
	
}

void initADC()
{
	DDRA &= ~(1<<PA0);
 270:	d0 98       	cbi	0x1a, 0	; 26
	ADMUX &= ~((1<<MUX0) | (1<<MUX1) | (1<<MUX2) | (1<<MUX3) | (1<<MUX4));	// ADC input channel set to PA0
 272:	87 b1       	in	r24, 0x07	; 7
 274:	80 7e       	andi	r24, 0xE0	; 224
 276:	87 b9       	out	0x07, r24	; 7
	
	ADMUX &=~(1<<REFS1);
 278:	3f 98       	cbi	0x07, 7	; 7
	ADMUX |= (1<<REFS0);
 27a:	3e 9a       	sbi	0x07, 6	; 7
	ADCSRA |= (1<<ADEN);
 27c:	37 9a       	sbi	0x06, 7	; 6

	ADCSRA &= ~(1<<ADPS0);	//Prescaler 64
 27e:	30 98       	cbi	0x06, 0	; 6
	ADCSRA |= ((1<<ADPS1)|(1<<ADPS2));
 280:	86 b1       	in	r24, 0x06	; 6
 282:	86 60       	ori	r24, 0x06	; 6
 284:	86 b9       	out	0x06, r24	; 6

	ADMUX |=(1<<ADLAR);
 286:	3d 9a       	sbi	0x07, 5	; 7
 288:	08 95       	ret

0000028a <readADC>:
}

void readADC()
{
	if(!(ADCSRA & (1<<ADSC)))	//still converting
 28a:	36 99       	sbic	0x06, 6	; 6
 28c:	07 c0       	rjmp	.+14     	; 0x29c <readADC+0x12>
	{
		potiValueMeasured = ADCH;
 28e:	85 b1       	in	r24, 0x05	; 5
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	90 93 79 00 	sts	0x0079, r25
 296:	80 93 78 00 	sts	0x0078, r24
		ADCSRA |= (1<<ADSC);	//restart
 29a:	36 9a       	sbi	0x06, 6	; 6
 29c:	08 95       	ret

0000029e <initPWM2>:
	}
}

void initPWM2()
{
	DDRD |= 1<<PD7;	//set pin to output
 29e:	8f 9a       	sbi	0x11, 7	; 17

	TCCR2 |= (1<<WGM21)|(1<<WGM20);	//set fastPWM
 2a0:	85 b5       	in	r24, 0x25	; 37
 2a2:	88 64       	ori	r24, 0x48	; 72
 2a4:	85 bd       	out	0x25, r24	; 37
	OCR2 = 255;	//set compare register
 2a6:	8f ef       	ldi	r24, 0xFF	; 255
 2a8:	83 bd       	out	0x23, r24	; 35
	
	TCCR2 &= ~ ((1<<CS21)|(1<<CS22));	//prescaler = 1;
 2aa:	85 b5       	in	r24, 0x25	; 37
 2ac:	89 7f       	andi	r24, 0xF9	; 249
 2ae:	85 bd       	out	0x25, r24	; 37
	TCCR2 |= (1<<CS20);
 2b0:	85 b5       	in	r24, 0x25	; 37
 2b2:	81 60       	ori	r24, 0x01	; 1
 2b4:	85 bd       	out	0x25, r24	; 37
	TCCR2 |= (1<<COM21);	//Clear OC2 on compare match, set OC2 at BOTTOM,
 2b6:	85 b5       	in	r24, 0x25	; 37
 2b8:	80 62       	ori	r24, 0x20	; 32
 2ba:	85 bd       	out	0x25, r24	; 37
	TCCR2 &= ~ (1<<COM20);
 2bc:	85 b5       	in	r24, 0x25	; 37
 2be:	8f 7e       	andi	r24, 0xEF	; 239
 2c0:	85 bd       	out	0x25, r24	; 37
 2c2:	08 95       	ret

000002c4 <initUART>:
}

void initUART()		//S.161
{	
	UBRRH = 0;
 2c4:	10 bc       	out	0x20, r1	; 32
	UBRRL = 51;
 2c6:	83 e3       	ldi	r24, 0x33	; 51
 2c8:	89 b9       	out	0x09, r24	; 9
	
	UCSRB = ((1<<TXEN));									//UCSZ1,0 set to 1 UCSZ2 set to 0 for 8bit data
 2ca:	88 e0       	ldi	r24, 0x08	; 8
 2cc:	8a b9       	out	0x0a, r24	; 10
	
	UCSRC = ((1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1));	//Asynchron 8N1
 2ce:	86 e8       	ldi	r24, 0x86	; 134
 2d0:	80 bd       	out	0x20, r24	; 32
	UCSRB |= (1 << UDRIE);				//no parity, UMSEL for async operation
 2d2:	55 9a       	sbi	0x0a, 5	; 10

	initCircularBuffer();
 2d4:	0e 94 68 00 	call	0xd0	; 0xd0 <initCircularBuffer>
 2d8:	08 95       	ret

000002da <main>:
}

int main(void)
{
 2da:	cf 93       	push	r28
 2dc:	df 93       	push	r29
 2de:	cd b7       	in	r28, 0x3d	; 61
 2e0:	de b7       	in	r29, 0x3e	; 62
 2e2:	2c 97       	sbiw	r28, 0x0c	; 12
 2e4:	0f b6       	in	r0, 0x3f	; 63
 2e6:	f8 94       	cli
 2e8:	de bf       	out	0x3e, r29	; 62
 2ea:	0f be       	out	0x3f, r0	; 63
 2ec:	cd bf       	out	0x3d, r28	; 61
	initBarMeter();
 2ee:	0e 94 63 00 	call	0xc6	; 0xc6 <initBarMeter>
	initDisplay();
 2f2:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <initDisplay>
	initRPM();
 2f6:	0e 94 20 01 	call	0x240	; 0x240 <initRPM>
	initTimer1();
 2fa:	0e 94 29 01 	call	0x252	; 0x252 <initTimer1>
	initADC();
 2fe:	0e 94 38 01 	call	0x270	; 0x270 <initADC>
	initPWM2();
 302:	0e 94 4f 01 	call	0x29e	; 0x29e <initPWM2>
	initCircularBuffer();
 306:	0e 94 68 00 	call	0xd0	; 0xd0 <initCircularBuffer>
	initUART();		
 30a:	0e 94 62 01 	call	0x2c4	; 0x2c4 <initUART>
	sei();
 30e:	78 94       	sei
		
		int rpm = 60000000UL / ((unsigned long)16 * (unsigned long)actualFanSpeedMeasured);
		int time = 8 * (unsigned long)actualFanSpeedMeasured;
		
		/* Convert integers to strings */
		sprintf(rpmString,"%4u", rpm);
 310:	0f 2e       	mov	r0, r31
 312:	f0 e6       	ldi	r31, 0x60	; 96
 314:	8f 2e       	mov	r8, r31
 316:	f0 e0       	ldi	r31, 0x00	; 0
 318:	9f 2e       	mov	r9, r31
 31a:	f0 2d       	mov	r31, r0
 31c:	ce 01       	movw	r24, r28
 31e:	01 96       	adiw	r24, 0x01	; 1
 320:	5c 01       	movw	r10, r24
		sprintf(timeString,"%5u", time);
 322:	0f 2e       	mov	r0, r31
 324:	f4 e6       	ldi	r31, 0x64	; 100
 326:	6f 2e       	mov	r6, r31
 328:	f0 e0       	ldi	r31, 0x00	; 0
 32a:	7f 2e       	mov	r7, r31
 32c:	f0 2d       	mov	r31, r0
 32e:	2e 01       	movw	r4, r28
 330:	95 e0       	ldi	r25, 0x05	; 5
 332:	49 0e       	add	r4, r25
 334:	51 1c       	adc	r5, r1
		writeCharArray(rpmString, 4);
		writeCharArray(" RPM", 4);
		
		setCursor2Line();
		writeCharArray("Duty: ", 6);
		sprintf(dutyString,"%3u", duty);
 336:	0f 2e       	mov	r0, r31
 338:	f4 e7       	ldi	r31, 0x74	; 116
 33a:	2f 2e       	mov	r2, r31
 33c:	f0 e0       	ldi	r31, 0x00	; 0
 33e:	3f 2e       	mov	r3, r31
 340:	f0 2d       	mov	r31, r0
 342:	7e 01       	movw	r14, r28
 344:	ea e0       	ldi	r30, 0x0A	; 10
 346:	ee 0e       	add	r14, r30
 348:	f1 1c       	adc	r15, r1
	char timeString[5];
	char dutyString[3];
	
    while(1)
    {
		OCR2 = potiValueMeasured;
 34a:	e8 e7       	ldi	r30, 0x78	; 120
 34c:	f0 e0       	ldi	r31, 0x00	; 0
 34e:	80 81       	ld	r24, Z
 350:	83 bd       	out	0x23, r24	; 35
		int duty = (potiValueMeasured * 100) / 255;
 352:	c0 90 78 00 	lds	r12, 0x0078
 356:	d0 90 79 00 	lds	r13, 0x0079
		setBarMeter(potiValueMeasured);
 35a:	c6 01       	movw	r24, r12
 35c:	0e 94 49 00 	call	0x92	; 0x92 <setBarMeter>
		readADC();
 360:	0e 94 45 01 	call	0x28a	; 0x28a <readADC>
		
		int rpm = 60000000UL / ((unsigned long)16 * (unsigned long)actualFanSpeedMeasured);
 364:	00 91 7a 00 	lds	r16, 0x007A
 368:	10 91 7b 00 	lds	r17, 0x007B
 36c:	c8 01       	movw	r24, r16
 36e:	a0 e0       	ldi	r26, 0x00	; 0
 370:	b0 e0       	ldi	r27, 0x00	; 0
 372:	88 0f       	add	r24, r24
 374:	99 1f       	adc	r25, r25
 376:	aa 1f       	adc	r26, r26
 378:	bb 1f       	adc	r27, r27
 37a:	88 0f       	add	r24, r24
 37c:	99 1f       	adc	r25, r25
 37e:	aa 1f       	adc	r26, r26
 380:	bb 1f       	adc	r27, r27
 382:	9c 01       	movw	r18, r24
 384:	ad 01       	movw	r20, r26
 386:	22 0f       	add	r18, r18
 388:	33 1f       	adc	r19, r19
 38a:	44 1f       	adc	r20, r20
 38c:	55 1f       	adc	r21, r21
 38e:	22 0f       	add	r18, r18
 390:	33 1f       	adc	r19, r19
 392:	44 1f       	adc	r20, r20
 394:	55 1f       	adc	r21, r21
 396:	60 e0       	ldi	r22, 0x00	; 0
 398:	77 e8       	ldi	r23, 0x87	; 135
 39a:	83 e9       	ldi	r24, 0x93	; 147
 39c:	93 e0       	ldi	r25, 0x03	; 3
 39e:	0e 94 71 02 	call	0x4e2	; 0x4e2 <__udivmodsi4>
		int time = 8 * (unsigned long)actualFanSpeedMeasured;
		
		/* Convert integers to strings */
		sprintf(rpmString,"%4u", rpm);
 3a2:	3f 93       	push	r19
 3a4:	2f 93       	push	r18
 3a6:	9f 92       	push	r9
 3a8:	8f 92       	push	r8
 3aa:	bf 92       	push	r11
 3ac:	af 92       	push	r10
 3ae:	0e 94 a2 02 	call	0x544	; 0x544 <sprintf>
		int duty = (potiValueMeasured * 100) / 255;
		setBarMeter(potiValueMeasured);
		readADC();
		
		int rpm = 60000000UL / ((unsigned long)16 * (unsigned long)actualFanSpeedMeasured);
		int time = 8 * (unsigned long)actualFanSpeedMeasured;
 3b2:	00 0f       	add	r16, r16
 3b4:	11 1f       	adc	r17, r17
 3b6:	00 0f       	add	r16, r16
 3b8:	11 1f       	adc	r17, r17
 3ba:	00 0f       	add	r16, r16
 3bc:	11 1f       	adc	r17, r17
		
		/* Convert integers to strings */
		sprintf(rpmString,"%4u", rpm);
		sprintf(timeString,"%5u", time);
 3be:	1f 93       	push	r17
 3c0:	0f 93       	push	r16
 3c2:	7f 92       	push	r7
 3c4:	6f 92       	push	r6
 3c6:	5f 92       	push	r5
 3c8:	4f 92       	push	r4
 3ca:	0e 94 a2 02 	call	0x544	; 0x544 <sprintf>
		
		/* Print to display */
		setCursorToHome();
 3ce:	0e 94 9a 00 	call	0x134	; 0x134 <setCursorToHome>
		writeCharArray(rpmString, 4);
 3d2:	64 e0       	ldi	r22, 0x04	; 4
 3d4:	70 e0       	ldi	r23, 0x00	; 0
 3d6:	c5 01       	movw	r24, r10
 3d8:	0e 94 0a 01 	call	0x214	; 0x214 <writeCharArray>
		writeCharArray(" RPM", 4);
 3dc:	64 e0       	ldi	r22, 0x04	; 4
 3de:	70 e0       	ldi	r23, 0x00	; 0
 3e0:	88 e6       	ldi	r24, 0x68	; 104
 3e2:	90 e0       	ldi	r25, 0x00	; 0
 3e4:	0e 94 0a 01 	call	0x214	; 0x214 <writeCharArray>
		
		setCursor2Line();
 3e8:	0e 94 a4 00 	call	0x148	; 0x148 <setCursor2Line>
		writeCharArray("Duty: ", 6);
 3ec:	66 e0       	ldi	r22, 0x06	; 6
 3ee:	70 e0       	ldi	r23, 0x00	; 0
 3f0:	8d e6       	ldi	r24, 0x6D	; 109
 3f2:	90 e0       	ldi	r25, 0x00	; 0
 3f4:	0e 94 0a 01 	call	0x214	; 0x214 <writeCharArray>
	char dutyString[3];
	
    while(1)
    {
		OCR2 = potiValueMeasured;
		int duty = (potiValueMeasured * 100) / 255;
 3f8:	f4 e6       	ldi	r31, 0x64	; 100
 3fa:	fc 9d       	mul	r31, r12
 3fc:	90 01       	movw	r18, r0
 3fe:	fd 9d       	mul	r31, r13
 400:	30 0d       	add	r19, r0
 402:	11 24       	eor	r1, r1
 404:	a1 e8       	ldi	r26, 0x81	; 129
 406:	b0 e8       	ldi	r27, 0x80	; 128
 408:	0e 94 93 02 	call	0x526	; 0x526 <__umulhisi3>
 40c:	88 0f       	add	r24, r24
 40e:	89 2f       	mov	r24, r25
 410:	88 1f       	adc	r24, r24
 412:	99 0b       	sbc	r25, r25
 414:	91 95       	neg	r25
		writeCharArray(rpmString, 4);
		writeCharArray(" RPM", 4);
		
		setCursor2Line();
		writeCharArray("Duty: ", 6);
		sprintf(dutyString,"%3u", duty);
 416:	9f 93       	push	r25
 418:	8f 93       	push	r24
 41a:	3f 92       	push	r3
 41c:	2f 92       	push	r2
 41e:	ff 92       	push	r15
 420:	ef 92       	push	r14
 422:	0e 94 a2 02 	call	0x544	; 0x544 <sprintf>
		writeCharArray(dutyString, 3);
 426:	63 e0       	ldi	r22, 0x03	; 3
 428:	70 e0       	ldi	r23, 0x00	; 0
 42a:	c7 01       	movw	r24, r14
 42c:	0e 94 0a 01 	call	0x214	; 0x214 <writeCharArray>
 430:	8f e1       	ldi	r24, 0x1F	; 31
 432:	9e e4       	ldi	r25, 0x4E	; 78
 434:	01 97       	sbiw	r24, 0x01	; 1
 436:	f1 f7       	brne	.-4      	; 0x434 <main+0x15a>
 438:	00 c0       	rjmp	.+0      	; 0x43a <main+0x160>
 43a:	00 00       	nop
 43c:	0f b6       	in	r0, 0x3f	; 63
 43e:	f8 94       	cli
 440:	de bf       	out	0x3e, r29	; 62
 442:	0f be       	out	0x3f, r0	; 63
 444:	cd bf       	out	0x3d, r28	; 61
 446:	81 cf       	rjmp	.-254    	; 0x34a <main+0x70>

00000448 <__vector_1>:
	
	return 0;
}

ISR(INT0_vect)
{
 448:	1f 92       	push	r1
 44a:	0f 92       	push	r0
 44c:	0f b6       	in	r0, 0x3f	; 63
 44e:	0f 92       	push	r0
 450:	11 24       	eor	r1, r1
 452:	8f 93       	push	r24
 454:	9f 93       	push	r25
	actualFanSpeedMeasured = TCNT1;
 456:	8c b5       	in	r24, 0x2c	; 44
 458:	9d b5       	in	r25, 0x2d	; 45
 45a:	90 93 7b 00 	sts	0x007B, r25
 45e:	80 93 7a 00 	sts	0x007A, r24
	TCNT1 = 0x00;
 462:	1d bc       	out	0x2d, r1	; 45
 464:	1c bc       	out	0x2c, r1	; 44
}
 466:	9f 91       	pop	r25
 468:	8f 91       	pop	r24
 46a:	0f 90       	pop	r0
 46c:	0f be       	out	0x3f, r0	; 63
 46e:	0f 90       	pop	r0
 470:	1f 90       	pop	r1
 472:	18 95       	reti

00000474 <__vector_14>:


ISR(USART_UDRE_vect)
{
 474:	1f 92       	push	r1
 476:	0f 92       	push	r0
 478:	0f b6       	in	r0, 0x3f	; 63
 47a:	0f 92       	push	r0
 47c:	11 24       	eor	r1, r1
 47e:	2f 93       	push	r18
 480:	8f 93       	push	r24
 482:	9f 93       	push	r25
 484:	ef 93       	push	r30
 486:	ff 93       	push	r31
	if(pRead == pWrite)
 488:	e0 91 92 00 	lds	r30, 0x0092
 48c:	f0 91 93 00 	lds	r31, 0x0093
 490:	80 91 94 00 	lds	r24, 0x0094
 494:	90 91 95 00 	lds	r25, 0x0095
 498:	e8 17       	cp	r30, r24
 49a:	f9 07       	cpc	r31, r25
 49c:	11 f4       	brne	.+4      	; 0x4a2 <__vector_14+0x2e>
	{
		UCSRB &=~ (1 << UDRIE);
 49e:	55 98       	cbi	0x0a, 5	; 10
		return 1;
 4a0:	16 c0       	rjmp	.+44     	; 0x4ce <__vector_14+0x5a>
	}
	
	UDR = *pRead;
 4a2:	80 81       	ld	r24, Z
 4a4:	8c b9       	out	0x0c, r24	; 12
	pRead++;
 4a6:	80 91 92 00 	lds	r24, 0x0092
 4aa:	90 91 93 00 	lds	r25, 0x0093
 4ae:	01 96       	adiw	r24, 0x01	; 1
	if(pRead >= &circularBuffer[CIRCULARBUFFERSIZE])
 4b0:	20 e0       	ldi	r18, 0x00	; 0
 4b2:	80 39       	cpi	r24, 0x90	; 144
 4b4:	92 07       	cpc	r25, r18
 4b6:	28 f4       	brcc	.+10     	; 0x4c2 <__vector_14+0x4e>
		UCSRB &=~ (1 << UDRIE);
		return 1;
	}
	
	UDR = *pRead;
	pRead++;
 4b8:	90 93 93 00 	sts	0x0093, r25
 4bc:	80 93 92 00 	sts	0x0092, r24
 4c0:	06 c0       	rjmp	.+12     	; 0x4ce <__vector_14+0x5a>
	if(pRead >= &circularBuffer[CIRCULARBUFFERSIZE])
	{
		pRead = circularBuffer;
 4c2:	8c e7       	ldi	r24, 0x7C	; 124
 4c4:	90 e0       	ldi	r25, 0x00	; 0
 4c6:	90 93 93 00 	sts	0x0093, r25
 4ca:	80 93 92 00 	sts	0x0092, r24
	}
}
 4ce:	ff 91       	pop	r31
 4d0:	ef 91       	pop	r30
 4d2:	9f 91       	pop	r25
 4d4:	8f 91       	pop	r24
 4d6:	2f 91       	pop	r18
 4d8:	0f 90       	pop	r0
 4da:	0f be       	out	0x3f, r0	; 63
 4dc:	0f 90       	pop	r0
 4de:	1f 90       	pop	r1
 4e0:	18 95       	reti

000004e2 <__udivmodsi4>:
 4e2:	a1 e2       	ldi	r26, 0x21	; 33
 4e4:	1a 2e       	mov	r1, r26
 4e6:	aa 1b       	sub	r26, r26
 4e8:	bb 1b       	sub	r27, r27
 4ea:	fd 01       	movw	r30, r26
 4ec:	0d c0       	rjmp	.+26     	; 0x508 <__udivmodsi4_ep>

000004ee <__udivmodsi4_loop>:
 4ee:	aa 1f       	adc	r26, r26
 4f0:	bb 1f       	adc	r27, r27
 4f2:	ee 1f       	adc	r30, r30
 4f4:	ff 1f       	adc	r31, r31
 4f6:	a2 17       	cp	r26, r18
 4f8:	b3 07       	cpc	r27, r19
 4fa:	e4 07       	cpc	r30, r20
 4fc:	f5 07       	cpc	r31, r21
 4fe:	20 f0       	brcs	.+8      	; 0x508 <__udivmodsi4_ep>
 500:	a2 1b       	sub	r26, r18
 502:	b3 0b       	sbc	r27, r19
 504:	e4 0b       	sbc	r30, r20
 506:	f5 0b       	sbc	r31, r21

00000508 <__udivmodsi4_ep>:
 508:	66 1f       	adc	r22, r22
 50a:	77 1f       	adc	r23, r23
 50c:	88 1f       	adc	r24, r24
 50e:	99 1f       	adc	r25, r25
 510:	1a 94       	dec	r1
 512:	69 f7       	brne	.-38     	; 0x4ee <__udivmodsi4_loop>
 514:	60 95       	com	r22
 516:	70 95       	com	r23
 518:	80 95       	com	r24
 51a:	90 95       	com	r25
 51c:	9b 01       	movw	r18, r22
 51e:	ac 01       	movw	r20, r24
 520:	bd 01       	movw	r22, r26
 522:	cf 01       	movw	r24, r30
 524:	08 95       	ret

00000526 <__umulhisi3>:
 526:	a2 9f       	mul	r26, r18
 528:	b0 01       	movw	r22, r0
 52a:	b3 9f       	mul	r27, r19
 52c:	c0 01       	movw	r24, r0
 52e:	a3 9f       	mul	r26, r19
 530:	70 0d       	add	r23, r0
 532:	81 1d       	adc	r24, r1
 534:	11 24       	eor	r1, r1
 536:	91 1d       	adc	r25, r1
 538:	b2 9f       	mul	r27, r18
 53a:	70 0d       	add	r23, r0
 53c:	81 1d       	adc	r24, r1
 53e:	11 24       	eor	r1, r1
 540:	91 1d       	adc	r25, r1
 542:	08 95       	ret

00000544 <sprintf>:
 544:	ae e0       	ldi	r26, 0x0E	; 14
 546:	b0 e0       	ldi	r27, 0x00	; 0
 548:	e8 ea       	ldi	r30, 0xA8	; 168
 54a:	f2 e0       	ldi	r31, 0x02	; 2
 54c:	0c 94 51 05 	jmp	0xaa2	; 0xaa2 <__prologue_saves__+0x1c>
 550:	0d 89       	ldd	r16, Y+21	; 0x15
 552:	1e 89       	ldd	r17, Y+22	; 0x16
 554:	86 e0       	ldi	r24, 0x06	; 6
 556:	8c 83       	std	Y+4, r24	; 0x04
 558:	1a 83       	std	Y+2, r17	; 0x02
 55a:	09 83       	std	Y+1, r16	; 0x01
 55c:	8f ef       	ldi	r24, 0xFF	; 255
 55e:	9f e7       	ldi	r25, 0x7F	; 127
 560:	9e 83       	std	Y+6, r25	; 0x06
 562:	8d 83       	std	Y+5, r24	; 0x05
 564:	ae 01       	movw	r20, r28
 566:	47 5e       	subi	r20, 0xE7	; 231
 568:	5f 4f       	sbci	r21, 0xFF	; 255
 56a:	6f 89       	ldd	r22, Y+23	; 0x17
 56c:	78 8d       	ldd	r23, Y+24	; 0x18
 56e:	ce 01       	movw	r24, r28
 570:	01 96       	adiw	r24, 0x01	; 1
 572:	0e 94 c5 02 	call	0x58a	; 0x58a <vfprintf>
 576:	2f 81       	ldd	r18, Y+7	; 0x07
 578:	38 85       	ldd	r19, Y+8	; 0x08
 57a:	f8 01       	movw	r30, r16
 57c:	e2 0f       	add	r30, r18
 57e:	f3 1f       	adc	r31, r19
 580:	10 82       	st	Z, r1
 582:	2e 96       	adiw	r28, 0x0e	; 14
 584:	e4 e0       	ldi	r30, 0x04	; 4
 586:	0c 94 6d 05 	jmp	0xada	; 0xada <__epilogue_restores__+0x1c>

0000058a <vfprintf>:
 58a:	ac e0       	ldi	r26, 0x0C	; 12
 58c:	b0 e0       	ldi	r27, 0x00	; 0
 58e:	eb ec       	ldi	r30, 0xCB	; 203
 590:	f2 e0       	ldi	r31, 0x02	; 2
 592:	0c 94 43 05 	jmp	0xa86	; 0xa86 <__prologue_saves__>
 596:	7c 01       	movw	r14, r24
 598:	6b 01       	movw	r12, r22
 59a:	8a 01       	movw	r16, r20
 59c:	fc 01       	movw	r30, r24
 59e:	17 82       	std	Z+7, r1	; 0x07
 5a0:	16 82       	std	Z+6, r1	; 0x06
 5a2:	83 81       	ldd	r24, Z+3	; 0x03
 5a4:	81 ff       	sbrs	r24, 1
 5a6:	bd c1       	rjmp	.+890    	; 0x922 <__stack+0xc3>
 5a8:	ce 01       	movw	r24, r28
 5aa:	01 96       	adiw	r24, 0x01	; 1
 5ac:	4c 01       	movw	r8, r24
 5ae:	f7 01       	movw	r30, r14
 5b0:	93 81       	ldd	r25, Z+3	; 0x03
 5b2:	f6 01       	movw	r30, r12
 5b4:	93 fd       	sbrc	r25, 3
 5b6:	85 91       	lpm	r24, Z+
 5b8:	93 ff       	sbrs	r25, 3
 5ba:	81 91       	ld	r24, Z+
 5bc:	6f 01       	movw	r12, r30
 5be:	88 23       	and	r24, r24
 5c0:	09 f4       	brne	.+2      	; 0x5c4 <vfprintf+0x3a>
 5c2:	ab c1       	rjmp	.+854    	; 0x91a <__stack+0xbb>
 5c4:	85 32       	cpi	r24, 0x25	; 37
 5c6:	39 f4       	brne	.+14     	; 0x5d6 <vfprintf+0x4c>
 5c8:	93 fd       	sbrc	r25, 3
 5ca:	85 91       	lpm	r24, Z+
 5cc:	93 ff       	sbrs	r25, 3
 5ce:	81 91       	ld	r24, Z+
 5d0:	6f 01       	movw	r12, r30
 5d2:	85 32       	cpi	r24, 0x25	; 37
 5d4:	29 f4       	brne	.+10     	; 0x5e0 <vfprintf+0x56>
 5d6:	b7 01       	movw	r22, r14
 5d8:	90 e0       	ldi	r25, 0x00	; 0
 5da:	0e 94 ad 04 	call	0x95a	; 0x95a <fputc>
 5de:	e7 cf       	rjmp	.-50     	; 0x5ae <vfprintf+0x24>
 5e0:	51 2c       	mov	r5, r1
 5e2:	31 2c       	mov	r3, r1
 5e4:	20 e0       	ldi	r18, 0x00	; 0
 5e6:	20 32       	cpi	r18, 0x20	; 32
 5e8:	a0 f4       	brcc	.+40     	; 0x612 <vfprintf+0x88>
 5ea:	8b 32       	cpi	r24, 0x2B	; 43
 5ec:	69 f0       	breq	.+26     	; 0x608 <vfprintf+0x7e>
 5ee:	30 f4       	brcc	.+12     	; 0x5fc <vfprintf+0x72>
 5f0:	80 32       	cpi	r24, 0x20	; 32
 5f2:	59 f0       	breq	.+22     	; 0x60a <vfprintf+0x80>
 5f4:	83 32       	cpi	r24, 0x23	; 35
 5f6:	69 f4       	brne	.+26     	; 0x612 <vfprintf+0x88>
 5f8:	20 61       	ori	r18, 0x10	; 16
 5fa:	2c c0       	rjmp	.+88     	; 0x654 <vfprintf+0xca>
 5fc:	8d 32       	cpi	r24, 0x2D	; 45
 5fe:	39 f0       	breq	.+14     	; 0x60e <vfprintf+0x84>
 600:	80 33       	cpi	r24, 0x30	; 48
 602:	39 f4       	brne	.+14     	; 0x612 <vfprintf+0x88>
 604:	21 60       	ori	r18, 0x01	; 1
 606:	26 c0       	rjmp	.+76     	; 0x654 <vfprintf+0xca>
 608:	22 60       	ori	r18, 0x02	; 2
 60a:	24 60       	ori	r18, 0x04	; 4
 60c:	23 c0       	rjmp	.+70     	; 0x654 <vfprintf+0xca>
 60e:	28 60       	ori	r18, 0x08	; 8
 610:	21 c0       	rjmp	.+66     	; 0x654 <vfprintf+0xca>
 612:	27 fd       	sbrc	r18, 7
 614:	27 c0       	rjmp	.+78     	; 0x664 <vfprintf+0xda>
 616:	30 ed       	ldi	r19, 0xD0	; 208
 618:	38 0f       	add	r19, r24
 61a:	3a 30       	cpi	r19, 0x0A	; 10
 61c:	78 f4       	brcc	.+30     	; 0x63c <vfprintf+0xb2>
 61e:	26 ff       	sbrs	r18, 6
 620:	06 c0       	rjmp	.+12     	; 0x62e <vfprintf+0xa4>
 622:	fa e0       	ldi	r31, 0x0A	; 10
 624:	5f 9e       	mul	r5, r31
 626:	30 0d       	add	r19, r0
 628:	11 24       	eor	r1, r1
 62a:	53 2e       	mov	r5, r19
 62c:	13 c0       	rjmp	.+38     	; 0x654 <vfprintf+0xca>
 62e:	8a e0       	ldi	r24, 0x0A	; 10
 630:	38 9e       	mul	r3, r24
 632:	30 0d       	add	r19, r0
 634:	11 24       	eor	r1, r1
 636:	33 2e       	mov	r3, r19
 638:	20 62       	ori	r18, 0x20	; 32
 63a:	0c c0       	rjmp	.+24     	; 0x654 <vfprintf+0xca>
 63c:	8e 32       	cpi	r24, 0x2E	; 46
 63e:	21 f4       	brne	.+8      	; 0x648 <vfprintf+0xbe>
 640:	26 fd       	sbrc	r18, 6
 642:	6b c1       	rjmp	.+726    	; 0x91a <__stack+0xbb>
 644:	20 64       	ori	r18, 0x40	; 64
 646:	06 c0       	rjmp	.+12     	; 0x654 <vfprintf+0xca>
 648:	8c 36       	cpi	r24, 0x6C	; 108
 64a:	11 f4       	brne	.+4      	; 0x650 <vfprintf+0xc6>
 64c:	20 68       	ori	r18, 0x80	; 128
 64e:	02 c0       	rjmp	.+4      	; 0x654 <vfprintf+0xca>
 650:	88 36       	cpi	r24, 0x68	; 104
 652:	41 f4       	brne	.+16     	; 0x664 <vfprintf+0xda>
 654:	f6 01       	movw	r30, r12
 656:	93 fd       	sbrc	r25, 3
 658:	85 91       	lpm	r24, Z+
 65a:	93 ff       	sbrs	r25, 3
 65c:	81 91       	ld	r24, Z+
 65e:	6f 01       	movw	r12, r30
 660:	81 11       	cpse	r24, r1
 662:	c1 cf       	rjmp	.-126    	; 0x5e6 <vfprintf+0x5c>
 664:	98 2f       	mov	r25, r24
 666:	9f 7d       	andi	r25, 0xDF	; 223
 668:	95 54       	subi	r25, 0x45	; 69
 66a:	93 30       	cpi	r25, 0x03	; 3
 66c:	28 f4       	brcc	.+10     	; 0x678 <vfprintf+0xee>
 66e:	0c 5f       	subi	r16, 0xFC	; 252
 670:	1f 4f       	sbci	r17, 0xFF	; 255
 672:	ff e3       	ldi	r31, 0x3F	; 63
 674:	f9 83       	std	Y+1, r31	; 0x01
 676:	0d c0       	rjmp	.+26     	; 0x692 <vfprintf+0x108>
 678:	83 36       	cpi	r24, 0x63	; 99
 67a:	31 f0       	breq	.+12     	; 0x688 <vfprintf+0xfe>
 67c:	83 37       	cpi	r24, 0x73	; 115
 67e:	71 f0       	breq	.+28     	; 0x69c <vfprintf+0x112>
 680:	83 35       	cpi	r24, 0x53	; 83
 682:	09 f0       	breq	.+2      	; 0x686 <vfprintf+0xfc>
 684:	5b c0       	rjmp	.+182    	; 0x73c <vfprintf+0x1b2>
 686:	22 c0       	rjmp	.+68     	; 0x6cc <vfprintf+0x142>
 688:	f8 01       	movw	r30, r16
 68a:	80 81       	ld	r24, Z
 68c:	89 83       	std	Y+1, r24	; 0x01
 68e:	0e 5f       	subi	r16, 0xFE	; 254
 690:	1f 4f       	sbci	r17, 0xFF	; 255
 692:	44 24       	eor	r4, r4
 694:	43 94       	inc	r4
 696:	51 2c       	mov	r5, r1
 698:	54 01       	movw	r10, r8
 69a:	15 c0       	rjmp	.+42     	; 0x6c6 <vfprintf+0x13c>
 69c:	38 01       	movw	r6, r16
 69e:	f2 e0       	ldi	r31, 0x02	; 2
 6a0:	6f 0e       	add	r6, r31
 6a2:	71 1c       	adc	r7, r1
 6a4:	f8 01       	movw	r30, r16
 6a6:	a0 80       	ld	r10, Z
 6a8:	b1 80       	ldd	r11, Z+1	; 0x01
 6aa:	26 ff       	sbrs	r18, 6
 6ac:	03 c0       	rjmp	.+6      	; 0x6b4 <vfprintf+0x12a>
 6ae:	65 2d       	mov	r22, r5
 6b0:	70 e0       	ldi	r23, 0x00	; 0
 6b2:	02 c0       	rjmp	.+4      	; 0x6b8 <vfprintf+0x12e>
 6b4:	6f ef       	ldi	r22, 0xFF	; 255
 6b6:	7f ef       	ldi	r23, 0xFF	; 255
 6b8:	c5 01       	movw	r24, r10
 6ba:	2c 87       	std	Y+12, r18	; 0x0c
 6bc:	0e 94 a2 04 	call	0x944	; 0x944 <strnlen>
 6c0:	2c 01       	movw	r4, r24
 6c2:	83 01       	movw	r16, r6
 6c4:	2c 85       	ldd	r18, Y+12	; 0x0c
 6c6:	2f 77       	andi	r18, 0x7F	; 127
 6c8:	22 2e       	mov	r2, r18
 6ca:	17 c0       	rjmp	.+46     	; 0x6fa <vfprintf+0x170>
 6cc:	38 01       	movw	r6, r16
 6ce:	f2 e0       	ldi	r31, 0x02	; 2
 6d0:	6f 0e       	add	r6, r31
 6d2:	71 1c       	adc	r7, r1
 6d4:	f8 01       	movw	r30, r16
 6d6:	a0 80       	ld	r10, Z
 6d8:	b1 80       	ldd	r11, Z+1	; 0x01
 6da:	26 ff       	sbrs	r18, 6
 6dc:	03 c0       	rjmp	.+6      	; 0x6e4 <vfprintf+0x15a>
 6de:	65 2d       	mov	r22, r5
 6e0:	70 e0       	ldi	r23, 0x00	; 0
 6e2:	02 c0       	rjmp	.+4      	; 0x6e8 <vfprintf+0x15e>
 6e4:	6f ef       	ldi	r22, 0xFF	; 255
 6e6:	7f ef       	ldi	r23, 0xFF	; 255
 6e8:	c5 01       	movw	r24, r10
 6ea:	2c 87       	std	Y+12, r18	; 0x0c
 6ec:	0e 94 97 04 	call	0x92e	; 0x92e <strnlen_P>
 6f0:	2c 01       	movw	r4, r24
 6f2:	2c 85       	ldd	r18, Y+12	; 0x0c
 6f4:	20 68       	ori	r18, 0x80	; 128
 6f6:	22 2e       	mov	r2, r18
 6f8:	83 01       	movw	r16, r6
 6fa:	23 fc       	sbrc	r2, 3
 6fc:	1b c0       	rjmp	.+54     	; 0x734 <vfprintf+0x1aa>
 6fe:	83 2d       	mov	r24, r3
 700:	90 e0       	ldi	r25, 0x00	; 0
 702:	48 16       	cp	r4, r24
 704:	59 06       	cpc	r5, r25
 706:	b0 f4       	brcc	.+44     	; 0x734 <vfprintf+0x1aa>
 708:	b7 01       	movw	r22, r14
 70a:	80 e2       	ldi	r24, 0x20	; 32
 70c:	90 e0       	ldi	r25, 0x00	; 0
 70e:	0e 94 ad 04 	call	0x95a	; 0x95a <fputc>
 712:	3a 94       	dec	r3
 714:	f4 cf       	rjmp	.-24     	; 0x6fe <vfprintf+0x174>
 716:	f5 01       	movw	r30, r10
 718:	27 fc       	sbrc	r2, 7
 71a:	85 91       	lpm	r24, Z+
 71c:	27 fe       	sbrs	r2, 7
 71e:	81 91       	ld	r24, Z+
 720:	5f 01       	movw	r10, r30
 722:	b7 01       	movw	r22, r14
 724:	90 e0       	ldi	r25, 0x00	; 0
 726:	0e 94 ad 04 	call	0x95a	; 0x95a <fputc>
 72a:	31 10       	cpse	r3, r1
 72c:	3a 94       	dec	r3
 72e:	f1 e0       	ldi	r31, 0x01	; 1
 730:	4f 1a       	sub	r4, r31
 732:	51 08       	sbc	r5, r1
 734:	41 14       	cp	r4, r1
 736:	51 04       	cpc	r5, r1
 738:	71 f7       	brne	.-36     	; 0x716 <vfprintf+0x18c>
 73a:	e5 c0       	rjmp	.+458    	; 0x906 <__stack+0xa7>
 73c:	84 36       	cpi	r24, 0x64	; 100
 73e:	11 f0       	breq	.+4      	; 0x744 <vfprintf+0x1ba>
 740:	89 36       	cpi	r24, 0x69	; 105
 742:	39 f5       	brne	.+78     	; 0x792 <vfprintf+0x208>
 744:	f8 01       	movw	r30, r16
 746:	27 ff       	sbrs	r18, 7
 748:	07 c0       	rjmp	.+14     	; 0x758 <vfprintf+0x1ce>
 74a:	60 81       	ld	r22, Z
 74c:	71 81       	ldd	r23, Z+1	; 0x01
 74e:	82 81       	ldd	r24, Z+2	; 0x02
 750:	93 81       	ldd	r25, Z+3	; 0x03
 752:	0c 5f       	subi	r16, 0xFC	; 252
 754:	1f 4f       	sbci	r17, 0xFF	; 255
 756:	08 c0       	rjmp	.+16     	; 0x768 <vfprintf+0x1de>
 758:	60 81       	ld	r22, Z
 75a:	71 81       	ldd	r23, Z+1	; 0x01
 75c:	07 2e       	mov	r0, r23
 75e:	00 0c       	add	r0, r0
 760:	88 0b       	sbc	r24, r24
 762:	99 0b       	sbc	r25, r25
 764:	0e 5f       	subi	r16, 0xFE	; 254
 766:	1f 4f       	sbci	r17, 0xFF	; 255
 768:	2f 76       	andi	r18, 0x6F	; 111
 76a:	72 2e       	mov	r7, r18
 76c:	97 ff       	sbrs	r25, 7
 76e:	09 c0       	rjmp	.+18     	; 0x782 <vfprintf+0x1f8>
 770:	90 95       	com	r25
 772:	80 95       	com	r24
 774:	70 95       	com	r23
 776:	61 95       	neg	r22
 778:	7f 4f       	sbci	r23, 0xFF	; 255
 77a:	8f 4f       	sbci	r24, 0xFF	; 255
 77c:	9f 4f       	sbci	r25, 0xFF	; 255
 77e:	20 68       	ori	r18, 0x80	; 128
 780:	72 2e       	mov	r7, r18
 782:	2a e0       	ldi	r18, 0x0A	; 10
 784:	30 e0       	ldi	r19, 0x00	; 0
 786:	a4 01       	movw	r20, r8
 788:	0e 94 e5 04 	call	0x9ca	; 0x9ca <__ultoa_invert>
 78c:	a8 2e       	mov	r10, r24
 78e:	a8 18       	sub	r10, r8
 790:	44 c0       	rjmp	.+136    	; 0x81a <vfprintf+0x290>
 792:	85 37       	cpi	r24, 0x75	; 117
 794:	29 f4       	brne	.+10     	; 0x7a0 <vfprintf+0x216>
 796:	2f 7e       	andi	r18, 0xEF	; 239
 798:	b2 2e       	mov	r11, r18
 79a:	2a e0       	ldi	r18, 0x0A	; 10
 79c:	30 e0       	ldi	r19, 0x00	; 0
 79e:	25 c0       	rjmp	.+74     	; 0x7ea <vfprintf+0x260>
 7a0:	f2 2f       	mov	r31, r18
 7a2:	f9 7f       	andi	r31, 0xF9	; 249
 7a4:	bf 2e       	mov	r11, r31
 7a6:	8f 36       	cpi	r24, 0x6F	; 111
 7a8:	c1 f0       	breq	.+48     	; 0x7da <vfprintf+0x250>
 7aa:	18 f4       	brcc	.+6      	; 0x7b2 <vfprintf+0x228>
 7ac:	88 35       	cpi	r24, 0x58	; 88
 7ae:	79 f0       	breq	.+30     	; 0x7ce <vfprintf+0x244>
 7b0:	b4 c0       	rjmp	.+360    	; 0x91a <__stack+0xbb>
 7b2:	80 37       	cpi	r24, 0x70	; 112
 7b4:	19 f0       	breq	.+6      	; 0x7bc <vfprintf+0x232>
 7b6:	88 37       	cpi	r24, 0x78	; 120
 7b8:	21 f0       	breq	.+8      	; 0x7c2 <vfprintf+0x238>
 7ba:	af c0       	rjmp	.+350    	; 0x91a <__stack+0xbb>
 7bc:	2f 2f       	mov	r18, r31
 7be:	20 61       	ori	r18, 0x10	; 16
 7c0:	b2 2e       	mov	r11, r18
 7c2:	b4 fe       	sbrs	r11, 4
 7c4:	0d c0       	rjmp	.+26     	; 0x7e0 <vfprintf+0x256>
 7c6:	8b 2d       	mov	r24, r11
 7c8:	84 60       	ori	r24, 0x04	; 4
 7ca:	b8 2e       	mov	r11, r24
 7cc:	09 c0       	rjmp	.+18     	; 0x7e0 <vfprintf+0x256>
 7ce:	24 ff       	sbrs	r18, 4
 7d0:	0a c0       	rjmp	.+20     	; 0x7e6 <vfprintf+0x25c>
 7d2:	9f 2f       	mov	r25, r31
 7d4:	96 60       	ori	r25, 0x06	; 6
 7d6:	b9 2e       	mov	r11, r25
 7d8:	06 c0       	rjmp	.+12     	; 0x7e6 <vfprintf+0x25c>
 7da:	28 e0       	ldi	r18, 0x08	; 8
 7dc:	30 e0       	ldi	r19, 0x00	; 0
 7de:	05 c0       	rjmp	.+10     	; 0x7ea <vfprintf+0x260>
 7e0:	20 e1       	ldi	r18, 0x10	; 16
 7e2:	30 e0       	ldi	r19, 0x00	; 0
 7e4:	02 c0       	rjmp	.+4      	; 0x7ea <vfprintf+0x260>
 7e6:	20 e1       	ldi	r18, 0x10	; 16
 7e8:	32 e0       	ldi	r19, 0x02	; 2
 7ea:	f8 01       	movw	r30, r16
 7ec:	b7 fe       	sbrs	r11, 7
 7ee:	07 c0       	rjmp	.+14     	; 0x7fe <vfprintf+0x274>
 7f0:	60 81       	ld	r22, Z
 7f2:	71 81       	ldd	r23, Z+1	; 0x01
 7f4:	82 81       	ldd	r24, Z+2	; 0x02
 7f6:	93 81       	ldd	r25, Z+3	; 0x03
 7f8:	0c 5f       	subi	r16, 0xFC	; 252
 7fa:	1f 4f       	sbci	r17, 0xFF	; 255
 7fc:	06 c0       	rjmp	.+12     	; 0x80a <vfprintf+0x280>
 7fe:	60 81       	ld	r22, Z
 800:	71 81       	ldd	r23, Z+1	; 0x01
 802:	80 e0       	ldi	r24, 0x00	; 0
 804:	90 e0       	ldi	r25, 0x00	; 0
 806:	0e 5f       	subi	r16, 0xFE	; 254
 808:	1f 4f       	sbci	r17, 0xFF	; 255
 80a:	a4 01       	movw	r20, r8
 80c:	0e 94 e5 04 	call	0x9ca	; 0x9ca <__ultoa_invert>
 810:	a8 2e       	mov	r10, r24
 812:	a8 18       	sub	r10, r8
 814:	fb 2d       	mov	r31, r11
 816:	ff 77       	andi	r31, 0x7F	; 127
 818:	7f 2e       	mov	r7, r31
 81a:	76 fe       	sbrs	r7, 6
 81c:	0b c0       	rjmp	.+22     	; 0x834 <vfprintf+0x2aa>
 81e:	37 2d       	mov	r19, r7
 820:	3e 7f       	andi	r19, 0xFE	; 254
 822:	a5 14       	cp	r10, r5
 824:	50 f4       	brcc	.+20     	; 0x83a <vfprintf+0x2b0>
 826:	74 fe       	sbrs	r7, 4
 828:	0a c0       	rjmp	.+20     	; 0x83e <vfprintf+0x2b4>
 82a:	72 fc       	sbrc	r7, 2
 82c:	08 c0       	rjmp	.+16     	; 0x83e <vfprintf+0x2b4>
 82e:	37 2d       	mov	r19, r7
 830:	3e 7e       	andi	r19, 0xEE	; 238
 832:	05 c0       	rjmp	.+10     	; 0x83e <vfprintf+0x2b4>
 834:	ba 2c       	mov	r11, r10
 836:	37 2d       	mov	r19, r7
 838:	03 c0       	rjmp	.+6      	; 0x840 <vfprintf+0x2b6>
 83a:	ba 2c       	mov	r11, r10
 83c:	01 c0       	rjmp	.+2      	; 0x840 <vfprintf+0x2b6>
 83e:	b5 2c       	mov	r11, r5
 840:	34 ff       	sbrs	r19, 4
 842:	0d c0       	rjmp	.+26     	; 0x85e <vfprintf+0x2d4>
 844:	fe 01       	movw	r30, r28
 846:	ea 0d       	add	r30, r10
 848:	f1 1d       	adc	r31, r1
 84a:	80 81       	ld	r24, Z
 84c:	80 33       	cpi	r24, 0x30	; 48
 84e:	11 f4       	brne	.+4      	; 0x854 <vfprintf+0x2ca>
 850:	39 7e       	andi	r19, 0xE9	; 233
 852:	09 c0       	rjmp	.+18     	; 0x866 <__stack+0x7>
 854:	32 ff       	sbrs	r19, 2
 856:	06 c0       	rjmp	.+12     	; 0x864 <__stack+0x5>
 858:	b3 94       	inc	r11
 85a:	b3 94       	inc	r11
 85c:	04 c0       	rjmp	.+8      	; 0x866 <__stack+0x7>
 85e:	83 2f       	mov	r24, r19
 860:	86 78       	andi	r24, 0x86	; 134
 862:	09 f0       	breq	.+2      	; 0x866 <__stack+0x7>
 864:	b3 94       	inc	r11
 866:	33 fd       	sbrc	r19, 3
 868:	13 c0       	rjmp	.+38     	; 0x890 <__stack+0x31>
 86a:	30 ff       	sbrs	r19, 0
 86c:	06 c0       	rjmp	.+12     	; 0x87a <__stack+0x1b>
 86e:	5a 2c       	mov	r5, r10
 870:	b3 14       	cp	r11, r3
 872:	18 f4       	brcc	.+6      	; 0x87a <__stack+0x1b>
 874:	53 0c       	add	r5, r3
 876:	5b 18       	sub	r5, r11
 878:	b3 2c       	mov	r11, r3
 87a:	b3 14       	cp	r11, r3
 87c:	68 f4       	brcc	.+26     	; 0x898 <__stack+0x39>
 87e:	b7 01       	movw	r22, r14
 880:	80 e2       	ldi	r24, 0x20	; 32
 882:	90 e0       	ldi	r25, 0x00	; 0
 884:	3c 87       	std	Y+12, r19	; 0x0c
 886:	0e 94 ad 04 	call	0x95a	; 0x95a <fputc>
 88a:	b3 94       	inc	r11
 88c:	3c 85       	ldd	r19, Y+12	; 0x0c
 88e:	f5 cf       	rjmp	.-22     	; 0x87a <__stack+0x1b>
 890:	b3 14       	cp	r11, r3
 892:	10 f4       	brcc	.+4      	; 0x898 <__stack+0x39>
 894:	3b 18       	sub	r3, r11
 896:	01 c0       	rjmp	.+2      	; 0x89a <__stack+0x3b>
 898:	31 2c       	mov	r3, r1
 89a:	34 ff       	sbrs	r19, 4
 89c:	12 c0       	rjmp	.+36     	; 0x8c2 <__stack+0x63>
 89e:	b7 01       	movw	r22, r14
 8a0:	80 e3       	ldi	r24, 0x30	; 48
 8a2:	90 e0       	ldi	r25, 0x00	; 0
 8a4:	3c 87       	std	Y+12, r19	; 0x0c
 8a6:	0e 94 ad 04 	call	0x95a	; 0x95a <fputc>
 8aa:	3c 85       	ldd	r19, Y+12	; 0x0c
 8ac:	32 ff       	sbrs	r19, 2
 8ae:	17 c0       	rjmp	.+46     	; 0x8de <__stack+0x7f>
 8b0:	31 fd       	sbrc	r19, 1
 8b2:	03 c0       	rjmp	.+6      	; 0x8ba <__stack+0x5b>
 8b4:	88 e7       	ldi	r24, 0x78	; 120
 8b6:	90 e0       	ldi	r25, 0x00	; 0
 8b8:	02 c0       	rjmp	.+4      	; 0x8be <__stack+0x5f>
 8ba:	88 e5       	ldi	r24, 0x58	; 88
 8bc:	90 e0       	ldi	r25, 0x00	; 0
 8be:	b7 01       	movw	r22, r14
 8c0:	0c c0       	rjmp	.+24     	; 0x8da <__stack+0x7b>
 8c2:	83 2f       	mov	r24, r19
 8c4:	86 78       	andi	r24, 0x86	; 134
 8c6:	59 f0       	breq	.+22     	; 0x8de <__stack+0x7f>
 8c8:	31 ff       	sbrs	r19, 1
 8ca:	02 c0       	rjmp	.+4      	; 0x8d0 <__stack+0x71>
 8cc:	8b e2       	ldi	r24, 0x2B	; 43
 8ce:	01 c0       	rjmp	.+2      	; 0x8d2 <__stack+0x73>
 8d0:	80 e2       	ldi	r24, 0x20	; 32
 8d2:	37 fd       	sbrc	r19, 7
 8d4:	8d e2       	ldi	r24, 0x2D	; 45
 8d6:	b7 01       	movw	r22, r14
 8d8:	90 e0       	ldi	r25, 0x00	; 0
 8da:	0e 94 ad 04 	call	0x95a	; 0x95a <fputc>
 8de:	a5 14       	cp	r10, r5
 8e0:	38 f4       	brcc	.+14     	; 0x8f0 <__stack+0x91>
 8e2:	b7 01       	movw	r22, r14
 8e4:	80 e3       	ldi	r24, 0x30	; 48
 8e6:	90 e0       	ldi	r25, 0x00	; 0
 8e8:	0e 94 ad 04 	call	0x95a	; 0x95a <fputc>
 8ec:	5a 94       	dec	r5
 8ee:	f7 cf       	rjmp	.-18     	; 0x8de <__stack+0x7f>
 8f0:	aa 94       	dec	r10
 8f2:	f4 01       	movw	r30, r8
 8f4:	ea 0d       	add	r30, r10
 8f6:	f1 1d       	adc	r31, r1
 8f8:	80 81       	ld	r24, Z
 8fa:	b7 01       	movw	r22, r14
 8fc:	90 e0       	ldi	r25, 0x00	; 0
 8fe:	0e 94 ad 04 	call	0x95a	; 0x95a <fputc>
 902:	a1 10       	cpse	r10, r1
 904:	f5 cf       	rjmp	.-22     	; 0x8f0 <__stack+0x91>
 906:	33 20       	and	r3, r3
 908:	09 f4       	brne	.+2      	; 0x90c <__stack+0xad>
 90a:	51 ce       	rjmp	.-862    	; 0x5ae <vfprintf+0x24>
 90c:	b7 01       	movw	r22, r14
 90e:	80 e2       	ldi	r24, 0x20	; 32
 910:	90 e0       	ldi	r25, 0x00	; 0
 912:	0e 94 ad 04 	call	0x95a	; 0x95a <fputc>
 916:	3a 94       	dec	r3
 918:	f6 cf       	rjmp	.-20     	; 0x906 <__stack+0xa7>
 91a:	f7 01       	movw	r30, r14
 91c:	86 81       	ldd	r24, Z+6	; 0x06
 91e:	97 81       	ldd	r25, Z+7	; 0x07
 920:	02 c0       	rjmp	.+4      	; 0x926 <__stack+0xc7>
 922:	8f ef       	ldi	r24, 0xFF	; 255
 924:	9f ef       	ldi	r25, 0xFF	; 255
 926:	2c 96       	adiw	r28, 0x0c	; 12
 928:	e2 e1       	ldi	r30, 0x12	; 18
 92a:	0c 94 5f 05 	jmp	0xabe	; 0xabe <__epilogue_restores__>

0000092e <strnlen_P>:
 92e:	fc 01       	movw	r30, r24
 930:	05 90       	lpm	r0, Z+
 932:	61 50       	subi	r22, 0x01	; 1
 934:	70 40       	sbci	r23, 0x00	; 0
 936:	01 10       	cpse	r0, r1
 938:	d8 f7       	brcc	.-10     	; 0x930 <strnlen_P+0x2>
 93a:	80 95       	com	r24
 93c:	90 95       	com	r25
 93e:	8e 0f       	add	r24, r30
 940:	9f 1f       	adc	r25, r31
 942:	08 95       	ret

00000944 <strnlen>:
 944:	fc 01       	movw	r30, r24
 946:	61 50       	subi	r22, 0x01	; 1
 948:	70 40       	sbci	r23, 0x00	; 0
 94a:	01 90       	ld	r0, Z+
 94c:	01 10       	cpse	r0, r1
 94e:	d8 f7       	brcc	.-10     	; 0x946 <strnlen+0x2>
 950:	80 95       	com	r24
 952:	90 95       	com	r25
 954:	8e 0f       	add	r24, r30
 956:	9f 1f       	adc	r25, r31
 958:	08 95       	ret

0000095a <fputc>:
 95a:	0f 93       	push	r16
 95c:	1f 93       	push	r17
 95e:	cf 93       	push	r28
 960:	df 93       	push	r29
 962:	fb 01       	movw	r30, r22
 964:	23 81       	ldd	r18, Z+3	; 0x03
 966:	21 fd       	sbrc	r18, 1
 968:	03 c0       	rjmp	.+6      	; 0x970 <fputc+0x16>
 96a:	8f ef       	ldi	r24, 0xFF	; 255
 96c:	9f ef       	ldi	r25, 0xFF	; 255
 96e:	28 c0       	rjmp	.+80     	; 0x9c0 <fputc+0x66>
 970:	22 ff       	sbrs	r18, 2
 972:	16 c0       	rjmp	.+44     	; 0x9a0 <fputc+0x46>
 974:	46 81       	ldd	r20, Z+6	; 0x06
 976:	57 81       	ldd	r21, Z+7	; 0x07
 978:	24 81       	ldd	r18, Z+4	; 0x04
 97a:	35 81       	ldd	r19, Z+5	; 0x05
 97c:	42 17       	cp	r20, r18
 97e:	53 07       	cpc	r21, r19
 980:	44 f4       	brge	.+16     	; 0x992 <fputc+0x38>
 982:	a0 81       	ld	r26, Z
 984:	b1 81       	ldd	r27, Z+1	; 0x01
 986:	9d 01       	movw	r18, r26
 988:	2f 5f       	subi	r18, 0xFF	; 255
 98a:	3f 4f       	sbci	r19, 0xFF	; 255
 98c:	31 83       	std	Z+1, r19	; 0x01
 98e:	20 83       	st	Z, r18
 990:	8c 93       	st	X, r24
 992:	26 81       	ldd	r18, Z+6	; 0x06
 994:	37 81       	ldd	r19, Z+7	; 0x07
 996:	2f 5f       	subi	r18, 0xFF	; 255
 998:	3f 4f       	sbci	r19, 0xFF	; 255
 99a:	37 83       	std	Z+7, r19	; 0x07
 99c:	26 83       	std	Z+6, r18	; 0x06
 99e:	10 c0       	rjmp	.+32     	; 0x9c0 <fputc+0x66>
 9a0:	eb 01       	movw	r28, r22
 9a2:	09 2f       	mov	r16, r25
 9a4:	18 2f       	mov	r17, r24
 9a6:	00 84       	ldd	r0, Z+8	; 0x08
 9a8:	f1 85       	ldd	r31, Z+9	; 0x09
 9aa:	e0 2d       	mov	r30, r0
 9ac:	09 95       	icall
 9ae:	89 2b       	or	r24, r25
 9b0:	e1 f6       	brne	.-72     	; 0x96a <fputc+0x10>
 9b2:	8e 81       	ldd	r24, Y+6	; 0x06
 9b4:	9f 81       	ldd	r25, Y+7	; 0x07
 9b6:	01 96       	adiw	r24, 0x01	; 1
 9b8:	9f 83       	std	Y+7, r25	; 0x07
 9ba:	8e 83       	std	Y+6, r24	; 0x06
 9bc:	81 2f       	mov	r24, r17
 9be:	90 2f       	mov	r25, r16
 9c0:	df 91       	pop	r29
 9c2:	cf 91       	pop	r28
 9c4:	1f 91       	pop	r17
 9c6:	0f 91       	pop	r16
 9c8:	08 95       	ret

000009ca <__ultoa_invert>:
 9ca:	fa 01       	movw	r30, r20
 9cc:	aa 27       	eor	r26, r26
 9ce:	28 30       	cpi	r18, 0x08	; 8
 9d0:	51 f1       	breq	.+84     	; 0xa26 <__ultoa_invert+0x5c>
 9d2:	20 31       	cpi	r18, 0x10	; 16
 9d4:	81 f1       	breq	.+96     	; 0xa36 <__ultoa_invert+0x6c>
 9d6:	e8 94       	clt
 9d8:	6f 93       	push	r22
 9da:	6e 7f       	andi	r22, 0xFE	; 254
 9dc:	6e 5f       	subi	r22, 0xFE	; 254
 9de:	7f 4f       	sbci	r23, 0xFF	; 255
 9e0:	8f 4f       	sbci	r24, 0xFF	; 255
 9e2:	9f 4f       	sbci	r25, 0xFF	; 255
 9e4:	af 4f       	sbci	r26, 0xFF	; 255
 9e6:	b1 e0       	ldi	r27, 0x01	; 1
 9e8:	3e d0       	rcall	.+124    	; 0xa66 <__ultoa_invert+0x9c>
 9ea:	b4 e0       	ldi	r27, 0x04	; 4
 9ec:	3c d0       	rcall	.+120    	; 0xa66 <__ultoa_invert+0x9c>
 9ee:	67 0f       	add	r22, r23
 9f0:	78 1f       	adc	r23, r24
 9f2:	89 1f       	adc	r24, r25
 9f4:	9a 1f       	adc	r25, r26
 9f6:	a1 1d       	adc	r26, r1
 9f8:	68 0f       	add	r22, r24
 9fa:	79 1f       	adc	r23, r25
 9fc:	8a 1f       	adc	r24, r26
 9fe:	91 1d       	adc	r25, r1
 a00:	a1 1d       	adc	r26, r1
 a02:	6a 0f       	add	r22, r26
 a04:	71 1d       	adc	r23, r1
 a06:	81 1d       	adc	r24, r1
 a08:	91 1d       	adc	r25, r1
 a0a:	a1 1d       	adc	r26, r1
 a0c:	20 d0       	rcall	.+64     	; 0xa4e <__ultoa_invert+0x84>
 a0e:	09 f4       	brne	.+2      	; 0xa12 <__ultoa_invert+0x48>
 a10:	68 94       	set
 a12:	3f 91       	pop	r19
 a14:	2a e0       	ldi	r18, 0x0A	; 10
 a16:	26 9f       	mul	r18, r22
 a18:	11 24       	eor	r1, r1
 a1a:	30 19       	sub	r19, r0
 a1c:	30 5d       	subi	r19, 0xD0	; 208
 a1e:	31 93       	st	Z+, r19
 a20:	de f6       	brtc	.-74     	; 0x9d8 <__ultoa_invert+0xe>
 a22:	cf 01       	movw	r24, r30
 a24:	08 95       	ret
 a26:	46 2f       	mov	r20, r22
 a28:	47 70       	andi	r20, 0x07	; 7
 a2a:	40 5d       	subi	r20, 0xD0	; 208
 a2c:	41 93       	st	Z+, r20
 a2e:	b3 e0       	ldi	r27, 0x03	; 3
 a30:	0f d0       	rcall	.+30     	; 0xa50 <__ultoa_invert+0x86>
 a32:	c9 f7       	brne	.-14     	; 0xa26 <__ultoa_invert+0x5c>
 a34:	f6 cf       	rjmp	.-20     	; 0xa22 <__ultoa_invert+0x58>
 a36:	46 2f       	mov	r20, r22
 a38:	4f 70       	andi	r20, 0x0F	; 15
 a3a:	40 5d       	subi	r20, 0xD0	; 208
 a3c:	4a 33       	cpi	r20, 0x3A	; 58
 a3e:	18 f0       	brcs	.+6      	; 0xa46 <__ultoa_invert+0x7c>
 a40:	49 5d       	subi	r20, 0xD9	; 217
 a42:	31 fd       	sbrc	r19, 1
 a44:	40 52       	subi	r20, 0x20	; 32
 a46:	41 93       	st	Z+, r20
 a48:	02 d0       	rcall	.+4      	; 0xa4e <__ultoa_invert+0x84>
 a4a:	a9 f7       	brne	.-22     	; 0xa36 <__ultoa_invert+0x6c>
 a4c:	ea cf       	rjmp	.-44     	; 0xa22 <__ultoa_invert+0x58>
 a4e:	b4 e0       	ldi	r27, 0x04	; 4
 a50:	a6 95       	lsr	r26
 a52:	97 95       	ror	r25
 a54:	87 95       	ror	r24
 a56:	77 95       	ror	r23
 a58:	67 95       	ror	r22
 a5a:	ba 95       	dec	r27
 a5c:	c9 f7       	brne	.-14     	; 0xa50 <__ultoa_invert+0x86>
 a5e:	00 97       	sbiw	r24, 0x00	; 0
 a60:	61 05       	cpc	r22, r1
 a62:	71 05       	cpc	r23, r1
 a64:	08 95       	ret
 a66:	9b 01       	movw	r18, r22
 a68:	ac 01       	movw	r20, r24
 a6a:	0a 2e       	mov	r0, r26
 a6c:	06 94       	lsr	r0
 a6e:	57 95       	ror	r21
 a70:	47 95       	ror	r20
 a72:	37 95       	ror	r19
 a74:	27 95       	ror	r18
 a76:	ba 95       	dec	r27
 a78:	c9 f7       	brne	.-14     	; 0xa6c <__ultoa_invert+0xa2>
 a7a:	62 0f       	add	r22, r18
 a7c:	73 1f       	adc	r23, r19
 a7e:	84 1f       	adc	r24, r20
 a80:	95 1f       	adc	r25, r21
 a82:	a0 1d       	adc	r26, r0
 a84:	08 95       	ret

00000a86 <__prologue_saves__>:
 a86:	2f 92       	push	r2
 a88:	3f 92       	push	r3
 a8a:	4f 92       	push	r4
 a8c:	5f 92       	push	r5
 a8e:	6f 92       	push	r6
 a90:	7f 92       	push	r7
 a92:	8f 92       	push	r8
 a94:	9f 92       	push	r9
 a96:	af 92       	push	r10
 a98:	bf 92       	push	r11
 a9a:	cf 92       	push	r12
 a9c:	df 92       	push	r13
 a9e:	ef 92       	push	r14
 aa0:	ff 92       	push	r15
 aa2:	0f 93       	push	r16
 aa4:	1f 93       	push	r17
 aa6:	cf 93       	push	r28
 aa8:	df 93       	push	r29
 aaa:	cd b7       	in	r28, 0x3d	; 61
 aac:	de b7       	in	r29, 0x3e	; 62
 aae:	ca 1b       	sub	r28, r26
 ab0:	db 0b       	sbc	r29, r27
 ab2:	0f b6       	in	r0, 0x3f	; 63
 ab4:	f8 94       	cli
 ab6:	de bf       	out	0x3e, r29	; 62
 ab8:	0f be       	out	0x3f, r0	; 63
 aba:	cd bf       	out	0x3d, r28	; 61
 abc:	09 94       	ijmp

00000abe <__epilogue_restores__>:
 abe:	2a 88       	ldd	r2, Y+18	; 0x12
 ac0:	39 88       	ldd	r3, Y+17	; 0x11
 ac2:	48 88       	ldd	r4, Y+16	; 0x10
 ac4:	5f 84       	ldd	r5, Y+15	; 0x0f
 ac6:	6e 84       	ldd	r6, Y+14	; 0x0e
 ac8:	7d 84       	ldd	r7, Y+13	; 0x0d
 aca:	8c 84       	ldd	r8, Y+12	; 0x0c
 acc:	9b 84       	ldd	r9, Y+11	; 0x0b
 ace:	aa 84       	ldd	r10, Y+10	; 0x0a
 ad0:	b9 84       	ldd	r11, Y+9	; 0x09
 ad2:	c8 84       	ldd	r12, Y+8	; 0x08
 ad4:	df 80       	ldd	r13, Y+7	; 0x07
 ad6:	ee 80       	ldd	r14, Y+6	; 0x06
 ad8:	fd 80       	ldd	r15, Y+5	; 0x05
 ada:	0c 81       	ldd	r16, Y+4	; 0x04
 adc:	1b 81       	ldd	r17, Y+3	; 0x03
 ade:	aa 81       	ldd	r26, Y+2	; 0x02
 ae0:	b9 81       	ldd	r27, Y+1	; 0x01
 ae2:	ce 0f       	add	r28, r30
 ae4:	d1 1d       	adc	r29, r1
 ae6:	0f b6       	in	r0, 0x3f	; 63
 ae8:	f8 94       	cli
 aea:	de bf       	out	0x3e, r29	; 62
 aec:	0f be       	out	0x3f, r0	; 63
 aee:	cd bf       	out	0x3d, r28	; 61
 af0:	ed 01       	movw	r28, r26
 af2:	08 95       	ret

00000af4 <_exit>:
 af4:	f8 94       	cli

00000af6 <__stop_program>:
 af6:	ff cf       	rjmp	.-2      	; 0xaf6 <__stop_program>
