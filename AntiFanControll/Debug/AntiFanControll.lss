
AntiFanControll.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b9e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  00000b9e  00000c32  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001e  0080006c  0080006c  00000c3e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000c3e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000c9c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000138  00000000  00000000  00000cd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000cd6  00000000  00000000  00000e10  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000531  00000000  00000000  00001ae6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000610  00000000  00000000  00002017  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000278  00000000  00000000  00002628  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003e1  00000000  00000000  000028a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003c4  00000000  00000000  00002c81  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  00003045  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 77 02 	jmp	0x4ee	; 0x4ee <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 8d 02 	jmp	0x51a	; 0x51a <__vector_14>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e9       	ldi	r30, 0x9E	; 158
  68:	fb e0       	ldi	r31, 0x0B	; 11
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 36       	cpi	r26, 0x6C	; 108
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ac e6       	ldi	r26, 0x6C	; 108
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 38       	cpi	r26, 0x8A	; 138
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 ff 01 	call	0x3fe	; 0x3fe <main>
  8a:	0c 94 cd 05 	jmp	0xb9a	; 0xb9a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <setBarMeter>:
  92:	2b b3       	in	r18, 0x1b	; 27
  94:	2f 70       	andi	r18, 0x0F	; 15
  96:	2b bb       	out	0x1b, r18	; 27
  98:	84 33       	cpi	r24, 0x34	; 52
  9a:	91 05       	cpc	r25, r1
  9c:	08 f0       	brcs	.+2      	; 0xa0 <setBarMeter+0xe>
  9e:	dc 9a       	sbi	0x1b, 4	; 27
  a0:	87 36       	cpi	r24, 0x67	; 103
  a2:	91 05       	cpc	r25, r1
  a4:	18 f0       	brcs	.+6      	; 0xac <setBarMeter+0x1a>
  a6:	2b b3       	in	r18, 0x1b	; 27
  a8:	20 63       	ori	r18, 0x30	; 48
  aa:	2b bb       	out	0x1b, r18	; 27
  ac:	8a 39       	cpi	r24, 0x9A	; 154
  ae:	91 05       	cpc	r25, r1
  b0:	18 f0       	brcs	.+6      	; 0xb8 <setBarMeter+0x26>
  b2:	2b b3       	in	r18, 0x1b	; 27
  b4:	20 67       	ori	r18, 0x70	; 112
  b6:	2b bb       	out	0x1b, r18	; 27
  b8:	8d 3c       	cpi	r24, 0xCD	; 205
  ba:	91 05       	cpc	r25, r1
  bc:	18 f0       	brcs	.+6      	; 0xc4 <setBarMeter+0x32>
  be:	8b b3       	in	r24, 0x1b	; 27
  c0:	80 6f       	ori	r24, 0xF0	; 240
  c2:	8b bb       	out	0x1b, r24	; 27
  c4:	08 95       	ret

000000c6 <initBarMeter>:
  c6:	8a b3       	in	r24, 0x1a	; 26
  c8:	80 6f       	ori	r24, 0xF0	; 240
  ca:	8a bb       	out	0x1a, r24	; 26
  cc:	dc 98       	cbi	0x1b, 4	; 27
  ce:	08 95       	ret

000000d0 <sendUartString>:

int sendUartString(unsigned char *pData)
{
	int length = sizeof(pData) / sizeof(unsigned char);
	
	if(pWrite >= pRead)
  d0:	40 91 88 00 	lds	r20, 0x0088
  d4:	50 91 89 00 	lds	r21, 0x0089
  d8:	20 91 86 00 	lds	r18, 0x0086
  dc:	30 91 87 00 	lds	r19, 0x0087
  e0:	42 17       	cp	r20, r18
  e2:	53 07       	cpc	r21, r19
  e4:	48 f0       	brcs	.+18     	; 0xf8 <sendUartString+0x28>
	{
		bufferFreeLength = CIRCULARBUFFERSIZE - (int)pWrite + (int)pRead - 1;
  e6:	24 1b       	sub	r18, r20
  e8:	35 0b       	sbc	r19, r21
  ea:	2d 5e       	subi	r18, 0xED	; 237
  ec:	3f 4f       	sbci	r19, 0xFF	; 255
  ee:	30 93 85 00 	sts	0x0085, r19
  f2:	20 93 84 00 	sts	0x0084, r18
  f6:	1b c0       	rjmp	.+54     	; 0x12e <sendUartString+0x5e>
	}
	else
	{
		bufferFreeLength = (int)pRead - (int)pWrite - 1;
  f8:	24 1b       	sub	r18, r20
  fa:	35 0b       	sbc	r19, r21
  fc:	21 50       	subi	r18, 0x01	; 1
  fe:	31 09       	sbc	r19, r1
 100:	30 93 85 00 	sts	0x0085, r19
 104:	20 93 84 00 	sts	0x0084, r18
 108:	12 c0       	rjmp	.+36     	; 0x12e <sendUartString+0x5e>
	if(length > bufferFreeLength) return 1;
	
	for(int i = 0; i < length; i++)
	{
		*pWrite = pData[i];
		pWrite++;
 10a:	90 93 89 00 	sts	0x0089, r25
 10e:	80 93 88 00 	sts	0x0088, r24
 112:	06 c0       	rjmp	.+12     	; 0x120 <sendUartString+0x50>
		if(pWrite >= &circularBuffer[CIRCULARBUFFERSIZE]) pWrite = circularBuffer;
 114:	80 e7       	ldi	r24, 0x70	; 112
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	90 93 89 00 	sts	0x0089, r25
 11c:	80 93 88 00 	sts	0x0088, r24
	}
	
	UCSRB |= (1 << UDRIE);
 120:	55 9a       	sbi	0x0a, 5	; 10
	
	return 0;
 122:	80 e0       	ldi	r24, 0x00	; 0
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	08 95       	ret
	else
	{
		bufferFreeLength = (int)pRead - (int)pWrite - 1;
	}
	
	if(length > bufferFreeLength) return 1;
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	08 95       	ret
 12e:	20 91 84 00 	lds	r18, 0x0084
 132:	30 91 85 00 	lds	r19, 0x0085
 136:	22 30       	cpi	r18, 0x02	; 2
 138:	31 05       	cpc	r19, r1
 13a:	b4 f3       	brlt	.-20     	; 0x128 <sendUartString+0x58>
	
	for(int i = 0; i < length; i++)
	{
		*pWrite = pData[i];
 13c:	e0 91 88 00 	lds	r30, 0x0088
 140:	f0 91 89 00 	lds	r31, 0x0089
 144:	dc 01       	movw	r26, r24
 146:	2c 91       	ld	r18, X
 148:	20 83       	st	Z, r18
		pWrite++;
 14a:	20 91 88 00 	lds	r18, 0x0088
 14e:	30 91 89 00 	lds	r19, 0x0089
 152:	2f 5f       	subi	r18, 0xFF	; 255
 154:	3f 4f       	sbci	r19, 0xFF	; 255
		if(pWrite >= &circularBuffer[CIRCULARBUFFERSIZE]) pWrite = circularBuffer;
 156:	b0 e0       	ldi	r27, 0x00	; 0
 158:	24 38       	cpi	r18, 0x84	; 132
 15a:	3b 07       	cpc	r19, r27
 15c:	38 f0       	brcs	.+14     	; 0x16c <sendUartString+0x9c>
 15e:	20 e7       	ldi	r18, 0x70	; 112
 160:	30 e0       	ldi	r19, 0x00	; 0
 162:	30 93 89 00 	sts	0x0089, r19
 166:	20 93 88 00 	sts	0x0088, r18
 16a:	04 c0       	rjmp	.+8      	; 0x174 <sendUartString+0xa4>
	if(length > bufferFreeLength) return 1;
	
	for(int i = 0; i < length; i++)
	{
		*pWrite = pData[i];
		pWrite++;
 16c:	30 93 89 00 	sts	0x0089, r19
 170:	20 93 88 00 	sts	0x0088, r18
	
	if(length > bufferFreeLength) return 1;
	
	for(int i = 0; i < length; i++)
	{
		*pWrite = pData[i];
 174:	e0 91 88 00 	lds	r30, 0x0088
 178:	f0 91 89 00 	lds	r31, 0x0089
 17c:	dc 01       	movw	r26, r24
 17e:	11 96       	adiw	r26, 0x01	; 1
 180:	8c 91       	ld	r24, X
 182:	80 83       	st	Z, r24
		pWrite++;
 184:	80 91 88 00 	lds	r24, 0x0088
 188:	90 91 89 00 	lds	r25, 0x0089
 18c:	01 96       	adiw	r24, 0x01	; 1
		if(pWrite >= &circularBuffer[CIRCULARBUFFERSIZE]) pWrite = circularBuffer;
 18e:	b0 e0       	ldi	r27, 0x00	; 0
 190:	84 38       	cpi	r24, 0x84	; 132
 192:	9b 07       	cpc	r25, r27
 194:	08 f0       	brcs	.+2      	; 0x198 <sendUartString+0xc8>
 196:	be cf       	rjmp	.-132    	; 0x114 <sendUartString+0x44>
 198:	b8 cf       	rjmp	.-144    	; 0x10a <sendUartString+0x3a>

0000019a <initCircularBuffer>:
	return 0;
} 

void initCircularBuffer()
{
	pRead = circularBuffer;
 19a:	80 e7       	ldi	r24, 0x70	; 112
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	90 93 87 00 	sts	0x0087, r25
 1a2:	80 93 86 00 	sts	0x0086, r24
	pWrite = circularBuffer;
 1a6:	90 93 89 00 	sts	0x0089, r25
 1aa:	80 93 88 00 	sts	0x0088, r24
 1ae:	08 95       	ret

000001b0 <toggleEnable>:
 1b0:	c3 9a       	sbi	0x18, 3	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1b2:	85 e8       	ldi	r24, 0x85	; 133
 1b4:	8a 95       	dec	r24
 1b6:	f1 f7       	brne	.-4      	; 0x1b4 <toggleEnable+0x4>
 1b8:	00 00       	nop
 1ba:	c3 98       	cbi	0x18, 3	; 24
 1bc:	08 95       	ret

000001be <setRS>:
 1be:	c2 9a       	sbi	0x18, 2	; 24
 1c0:	08 95       	ret

000001c2 <resetRS>:
 1c2:	c2 98       	cbi	0x18, 2	; 24
 1c4:	08 95       	ret

000001c6 <write4Bit>:
 1c6:	98 b3       	in	r25, 0x18	; 24
 1c8:	9f 70       	andi	r25, 0x0F	; 15
 1ca:	98 bb       	out	0x18, r25	; 24
 1cc:	28 b3       	in	r18, 0x18	; 24
 1ce:	30 e1       	ldi	r19, 0x10	; 16
 1d0:	83 9f       	mul	r24, r19
 1d2:	c0 01       	movw	r24, r0
 1d4:	11 24       	eor	r1, r1
 1d6:	82 2b       	or	r24, r18
 1d8:	88 bb       	out	0x18, r24	; 24
 1da:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <toggleEnable>
 1de:	08 95       	ret

000001e0 <writeCommand>:
 1e0:	cf 93       	push	r28
 1e2:	c8 2f       	mov	r28, r24
 1e4:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <resetRS>
 1e8:	8c 2f       	mov	r24, r28
 1ea:	82 95       	swap	r24
 1ec:	8f 70       	andi	r24, 0x0F	; 15
 1ee:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <write4Bit>
 1f2:	8c 2f       	mov	r24, r28
 1f4:	8f 70       	andi	r24, 0x0F	; 15
 1f6:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <write4Bit>
 1fa:	cf 91       	pop	r28
 1fc:	08 95       	ret

000001fe <setCursorToHome>:
 1fe:	82 e0       	ldi	r24, 0x02	; 2
 200:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <writeCommand>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 204:	8f e9       	ldi	r24, 0x9F	; 159
 206:	9f e0       	ldi	r25, 0x0F	; 15
 208:	01 97       	sbiw	r24, 0x01	; 1
 20a:	f1 f7       	brne	.-4      	; 0x208 <setCursorToHome+0xa>
 20c:	00 c0       	rjmp	.+0      	; 0x20e <setCursorToHome+0x10>
 20e:	00 00       	nop
 210:	08 95       	ret

00000212 <setCursor2Line>:
 212:	80 ec       	ldi	r24, 0xC0	; 192
 214:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <writeCommand>
 218:	8f ec       	ldi	r24, 0xCF	; 207
 21a:	97 e0       	ldi	r25, 0x07	; 7
 21c:	01 97       	sbiw	r24, 0x01	; 1
 21e:	f1 f7       	brne	.-4      	; 0x21c <setCursor2Line+0xa>
 220:	00 c0       	rjmp	.+0      	; 0x222 <setCursor2Line+0x10>
 222:	00 00       	nop
 224:	08 95       	ret

00000226 <writeData>:
 226:	cf 93       	push	r28
 228:	c8 2f       	mov	r28, r24
 22a:	0e 94 df 00 	call	0x1be	; 0x1be <setRS>
 22e:	8c 2f       	mov	r24, r28
 230:	82 95       	swap	r24
 232:	8f 70       	andi	r24, 0x0F	; 15
 234:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <write4Bit>
 238:	8c 2f       	mov	r24, r28
 23a:	8f 70       	andi	r24, 0x0F	; 15
 23c:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <write4Bit>
 240:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <resetRS>
 244:	cf 91       	pop	r28
 246:	08 95       	ret

00000248 <clearDisplay>:
 248:	80 e0       	ldi	r24, 0x00	; 0
 24a:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <writeCommand>
 24e:	8f e6       	ldi	r24, 0x6F	; 111
 250:	97 e1       	ldi	r25, 0x17	; 23
 252:	01 97       	sbiw	r24, 0x01	; 1
 254:	f1 f7       	brne	.-4      	; 0x252 <clearDisplay+0xa>
 256:	00 c0       	rjmp	.+0      	; 0x258 <clearDisplay+0x10>
 258:	00 00       	nop
 25a:	81 e0       	ldi	r24, 0x01	; 1
 25c:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <writeCommand>
 260:	8f e6       	ldi	r24, 0x6F	; 111
 262:	97 e1       	ldi	r25, 0x17	; 23
 264:	01 97       	sbiw	r24, 0x01	; 1
 266:	f1 f7       	brne	.-4      	; 0x264 <clearDisplay+0x1c>
 268:	00 c0       	rjmp	.+0      	; 0x26a <clearDisplay+0x22>
 26a:	00 00       	nop
 26c:	08 95       	ret

0000026e <initDisplay>:
 26e:	87 b3       	in	r24, 0x17	; 23
 270:	8c 6f       	ori	r24, 0xFC	; 252
 272:	87 bb       	out	0x17, r24	; 23
 274:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <resetRS>
 278:	88 b3       	in	r24, 0x18	; 24
 27a:	80 63       	ori	r24, 0x30	; 48
 27c:	88 bb       	out	0x18, r24	; 24
 27e:	88 b3       	in	r24, 0x18	; 24
 280:	8f 73       	andi	r24, 0x3F	; 63
 282:	88 bb       	out	0x18, r24	; 24
 284:	8f e2       	ldi	r24, 0x2F	; 47
 286:	95 e7       	ldi	r25, 0x75	; 117
 288:	01 97       	sbiw	r24, 0x01	; 1
 28a:	f1 f7       	brne	.-4      	; 0x288 <initDisplay+0x1a>
 28c:	00 c0       	rjmp	.+0      	; 0x28e <initDisplay+0x20>
 28e:	00 00       	nop
 290:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <toggleEnable>
 294:	8f e0       	ldi	r24, 0x0F	; 15
 296:	97 e2       	ldi	r25, 0x27	; 39
 298:	01 97       	sbiw	r24, 0x01	; 1
 29a:	f1 f7       	brne	.-4      	; 0x298 <initDisplay+0x2a>
 29c:	00 c0       	rjmp	.+0      	; 0x29e <initDisplay+0x30>
 29e:	00 00       	nop
 2a0:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <toggleEnable>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2a4:	8f e8       	ldi	r24, 0x8F	; 143
 2a6:	91 e0       	ldi	r25, 0x01	; 1
 2a8:	01 97       	sbiw	r24, 0x01	; 1
 2aa:	f1 f7       	brne	.-4      	; 0x2a8 <initDisplay+0x3a>
 2ac:	00 c0       	rjmp	.+0      	; 0x2ae <initDisplay+0x40>
 2ae:	00 00       	nop
 2b0:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <toggleEnable>
 2b4:	c5 9a       	sbi	0x18, 5	; 24
 2b6:	88 b3       	in	r24, 0x18	; 24
 2b8:	8f 72       	andi	r24, 0x2F	; 47
 2ba:	88 bb       	out	0x18, r24	; 24
 2bc:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <toggleEnable>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2c0:	8f e6       	ldi	r24, 0x6F	; 111
 2c2:	97 e1       	ldi	r25, 0x17	; 23
 2c4:	01 97       	sbiw	r24, 0x01	; 1
 2c6:	f1 f7       	brne	.-4      	; 0x2c4 <initDisplay+0x56>
 2c8:	00 c0       	rjmp	.+0      	; 0x2ca <initDisplay+0x5c>
 2ca:	00 00       	nop
 2cc:	8c e2       	ldi	r24, 0x2C	; 44
 2ce:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <writeCommand>
 2d2:	8e e0       	ldi	r24, 0x0E	; 14
 2d4:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <writeCommand>
 2d8:	0e 94 24 01 	call	0x248	; 0x248 <clearDisplay>
 2dc:	08 95       	ret

000002de <writeCharArray>:
 2de:	0f 93       	push	r16
 2e0:	1f 93       	push	r17
 2e2:	cf 93       	push	r28
 2e4:	df 93       	push	r29
 2e6:	16 16       	cp	r1, r22
 2e8:	17 06       	cpc	r1, r23
 2ea:	54 f4       	brge	.+20     	; 0x300 <writeCharArray+0x22>
 2ec:	8c 01       	movw	r16, r24
 2ee:	ec 01       	movw	r28, r24
 2f0:	06 0f       	add	r16, r22
 2f2:	17 1f       	adc	r17, r23
 2f4:	89 91       	ld	r24, Y+
 2f6:	0e 94 13 01 	call	0x226	; 0x226 <writeData>
 2fa:	c0 17       	cp	r28, r16
 2fc:	d1 07       	cpc	r29, r17
 2fe:	d1 f7       	brne	.-12     	; 0x2f4 <writeCharArray+0x16>
 300:	df 91       	pop	r29
 302:	cf 91       	pop	r28
 304:	1f 91       	pop	r17
 306:	0f 91       	pop	r16
 308:	08 95       	ret

0000030a <initRPM>:



void initRPM()
{
	GICR = 1<<INT0;					// Enable INT0
 30a:	80 e4       	ldi	r24, 0x40	; 64
 30c:	8b bf       	out	0x3b, r24	; 59
	MCUCR |= 1<<ISC01;				// Trigger INT0 on falling edge
 30e:	85 b7       	in	r24, 0x35	; 53
 310:	82 60       	ori	r24, 0x02	; 2
 312:	85 bf       	out	0x35, r24	; 53
	MCUCR &= ~(1<<ISC00);
 314:	85 b7       	in	r24, 0x35	; 53
 316:	8e 7f       	andi	r24, 0xFE	; 254
 318:	85 bf       	out	0x35, r24	; 53
 31a:	08 95       	ret

0000031c <initTimer1>:
}

void initTimer1(void)
{
	//Normal-Mode
	TCCR1A &= ~((1 << WGM10) | (1 << WGM11));
 31c:	8f b5       	in	r24, 0x2f	; 47
 31e:	8c 7f       	andi	r24, 0xFC	; 252
 320:	8f bd       	out	0x2f, r24	; 47
	TCCR1B &= ~((1 << WGM12) | (1 << WGM13));
 322:	8e b5       	in	r24, 0x2e	; 46
 324:	87 7e       	andi	r24, 0xE7	; 231
 326:	8e bd       	out	0x2e, r24	; 46
	
	//Prescaler 64
	TCCR1B |= ((1 << CS10) | (1 << CS11));
 328:	8e b5       	in	r24, 0x2e	; 46
 32a:	83 60       	ori	r24, 0x03	; 3
 32c:	8e bd       	out	0x2e, r24	; 46
	TCCR1B &= ~((1 << CS12));
 32e:	8e b5       	in	r24, 0x2e	; 46
 330:	8b 7f       	andi	r24, 0xFB	; 251
 332:	8e bd       	out	0x2e, r24	; 46
	
	TCNT1 = 0;
 334:	1d bc       	out	0x2d, r1	; 45
 336:	1c bc       	out	0x2c, r1	; 44
 338:	08 95       	ret

0000033a <initADC>:
	
}

void initADC()
{
	DDRA &= ~(1<<PA0);
 33a:	d0 98       	cbi	0x1a, 0	; 26
	ADMUX &= ~((1<<MUX0) | (1<<MUX1) | (1<<MUX2) | (1<<MUX3) | (1<<MUX4));	// ADC input channel set to PA0
 33c:	87 b1       	in	r24, 0x07	; 7
 33e:	80 7e       	andi	r24, 0xE0	; 224
 340:	87 b9       	out	0x07, r24	; 7
	
	ADMUX &=~(1<<REFS1);
 342:	3f 98       	cbi	0x07, 7	; 7
	ADMUX |= (1<<REFS0);
 344:	3e 9a       	sbi	0x07, 6	; 7
	ADCSRA |= (1<<ADEN);
 346:	37 9a       	sbi	0x06, 7	; 6

	ADCSRA &= ~(1<<ADPS0);	//Prescaler 64
 348:	30 98       	cbi	0x06, 0	; 6
	ADCSRA |= ((1<<ADPS1)|(1<<ADPS2));
 34a:	86 b1       	in	r24, 0x06	; 6
 34c:	86 60       	ori	r24, 0x06	; 6
 34e:	86 b9       	out	0x06, r24	; 6

	ADMUX |=(1<<ADLAR);
 350:	3d 9a       	sbi	0x07, 5	; 7
 352:	08 95       	ret

00000354 <readADC>:
}

void readADC()
{
	if(!(ADCSRA & (1<<ADSC)))	//still converting
 354:	36 99       	sbic	0x06, 6	; 6
 356:	07 c0       	rjmp	.+14     	; 0x366 <readADC+0x12>
	{
		potiValueMeasured = ADCH;
 358:	85 b1       	in	r24, 0x05	; 5
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	90 93 6d 00 	sts	0x006D, r25
 360:	80 93 6c 00 	sts	0x006C, r24
		ADCSRA |= (1<<ADSC);	//restart
 364:	36 9a       	sbi	0x06, 6	; 6
 366:	08 95       	ret

00000368 <initPWM2>:
	}
}

void initPWM2()
{
	DDRD |= 1<<PD7;	//set pin to output
 368:	8f 9a       	sbi	0x11, 7	; 17

	TCCR2 |= (1<<WGM21)|(1<<WGM20);	//set fastPWM
 36a:	85 b5       	in	r24, 0x25	; 37
 36c:	88 64       	ori	r24, 0x48	; 72
 36e:	85 bd       	out	0x25, r24	; 37
	OCR2 = 255;	//set compare register
 370:	8f ef       	ldi	r24, 0xFF	; 255
 372:	83 bd       	out	0x23, r24	; 35
	
	TCCR2 &= ~ ((1<<CS21)|(1<<CS22));	//prescaler = 1;
 374:	85 b5       	in	r24, 0x25	; 37
 376:	89 7f       	andi	r24, 0xF9	; 249
 378:	85 bd       	out	0x25, r24	; 37
	TCCR2 |= (1<<CS20);
 37a:	85 b5       	in	r24, 0x25	; 37
 37c:	81 60       	ori	r24, 0x01	; 1
 37e:	85 bd       	out	0x25, r24	; 37
	TCCR2 |= (1<<COM21);	//Clear OC2 on compare match, set OC2 at BOTTOM,
 380:	85 b5       	in	r24, 0x25	; 37
 382:	80 62       	ori	r24, 0x20	; 32
 384:	85 bd       	out	0x25, r24	; 37
	TCCR2 &= ~ (1<<COM20);
 386:	85 b5       	in	r24, 0x25	; 37
 388:	8f 7e       	andi	r24, 0xEF	; 239
 38a:	85 bd       	out	0x25, r24	; 37
 38c:	08 95       	ret

0000038e <initUART>:
	// Set frame format: 8data, 1stop bit
	
	//UBRRH = (uint8_t) (MYUBRR>>8);
	//UBRRL = (uint8_t) MYUBRR;
	
	UBRRL = 51;
 38e:	83 e3       	ldi	r24, 0x33	; 51
 390:	89 b9       	out	0x09, r24	; 9
	UBRRH = 0;
 392:	10 bc       	out	0x20, r1	; 32
	
	UCSRB = ((1<<TXEN) | (1<<TXCIE));								// Enable transmitter & interrupt on finish,     (1<<RXEN) for receiver
 394:	88 e4       	ldi	r24, 0x48	; 72
 396:	8a b9       	out	0x0a, r24	; 10
	//UCSRB |= (1<<UCSZ1) | (1<<UCSZ0);								//UCSZ1,0 set to 1 UCSZ2 set to 0 for 8bit data
	
	UCSRC = ((1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1));	//Asynchron 8N1
 398:	86 e8       	ldi	r24, 0x86	; 134
 39a:	80 bd       	out	0x20, r24	; 32
	UCSRB |= (1 << UDRIE);
 39c:	55 9a       	sbi	0x0a, 5	; 10
 39e:	08 95       	ret

000003a0 <writeIntToDisplay>:
{
	writeCharArray(s, sizeof(s)/sizeof(s[0]));
}

void writeIntToDisplay(int value)
{
 3a0:	0f 93       	push	r16
 3a2:	1f 93       	push	r17
 3a4:	cf 93       	push	r28
 3a6:	df 93       	push	r29
 3a8:	cd b7       	in	r28, 0x3d	; 61
 3aa:	de b7       	in	r29, 0x3e	; 62
 3ac:	2f 97       	sbiw	r28, 0x0f	; 15
 3ae:	0f b6       	in	r0, 0x3f	; 63
 3b0:	f8 94       	cli
 3b2:	de bf       	out	0x3e, r29	; 62
 3b4:	0f be       	out	0x3f, r0	; 63
 3b6:	cd bf       	out	0x3d, r28	; 61
	char tempString[15];
	sprintf(tempString,"%15u", value);	
 3b8:	9f 93       	push	r25
 3ba:	8f 93       	push	r24
 3bc:	80 e6       	ldi	r24, 0x60	; 96
 3be:	90 e0       	ldi	r25, 0x00	; 0
 3c0:	9f 93       	push	r25
 3c2:	8f 93       	push	r24
 3c4:	8e 01       	movw	r16, r28
 3c6:	0f 5f       	subi	r16, 0xFF	; 255
 3c8:	1f 4f       	sbci	r17, 0xFF	; 255
 3ca:	1f 93       	push	r17
 3cc:	0f 93       	push	r16
 3ce:	0e 94 f5 02 	call	0x5ea	; 0x5ea <sprintf>

	writeCharArray(tempString, sizeof(tempString)/sizeof(tempString[0]));
 3d2:	6f e0       	ldi	r22, 0x0F	; 15
 3d4:	70 e0       	ldi	r23, 0x00	; 0
 3d6:	c8 01       	movw	r24, r16
 3d8:	0e 94 6f 01 	call	0x2de	; 0x2de <writeCharArray>
 3dc:	0f 90       	pop	r0
 3de:	0f 90       	pop	r0
 3e0:	0f 90       	pop	r0
 3e2:	0f 90       	pop	r0
 3e4:	0f 90       	pop	r0
 3e6:	0f 90       	pop	r0
}
 3e8:	2f 96       	adiw	r28, 0x0f	; 15
 3ea:	0f b6       	in	r0, 0x3f	; 63
 3ec:	f8 94       	cli
 3ee:	de bf       	out	0x3e, r29	; 62
 3f0:	0f be       	out	0x3f, r0	; 63
 3f2:	cd bf       	out	0x3d, r28	; 61
 3f4:	df 91       	pop	r29
 3f6:	cf 91       	pop	r28
 3f8:	1f 91       	pop	r17
 3fa:	0f 91       	pop	r16
 3fc:	08 95       	ret

000003fe <main>:

int main(void)
{
	initBarMeter();
 3fe:	0e 94 63 00 	call	0xc6	; 0xc6 <initBarMeter>
	initDisplay();
 402:	0e 94 37 01 	call	0x26e	; 0x26e <initDisplay>
	initRPM();
 406:	0e 94 85 01 	call	0x30a	; 0x30a <initRPM>
	initTimer1();
 40a:	0e 94 8e 01 	call	0x31c	; 0x31c <initTimer1>
	initADC();
 40e:	0e 94 9d 01 	call	0x33a	; 0x33a <initADC>
	initPWM2();
 412:	0e 94 b4 01 	call	0x368	; 0x368 <initPWM2>
	initUART();	
 416:	0e 94 c7 01 	call	0x38e	; 0x38e <initUART>
	initCircularBuffer();
 41a:	0e 94 cd 00 	call	0x19a	; 0x19a <initCircularBuffer>
	
	sei();
 41e:	78 94       	sei
	
	//RingBuffer buffer = RingBuffer_create(20);		//ka obs funktioniert
	//writeToDisplay(":D");
	
	sendUartString("Hallo");
 420:	85 e6       	ldi	r24, 0x65	; 101
 422:	90 e0       	ldi	r25, 0x00	; 0
 424:	0e 94 68 00 	call	0xd0	; 0xd0 <sendUartString>
		
		setBarMeter(potiValueMeasured);
		
		readADC();
		setCursorToHome();
		writeIntToDisplay((60000000UL/((unsigned long)16*(unsigned long)actualFanSpeedMeasured)));	//Print RPM 
 428:	0f 2e       	mov	r0, r31
 42a:	c1 2c       	mov	r12, r1
 42c:	f7 e8       	ldi	r31, 0x87	; 135
 42e:	df 2e       	mov	r13, r31
 430:	f3 e9       	ldi	r31, 0x93	; 147
 432:	ef 2e       	mov	r14, r31
 434:	f3 e0       	ldi	r31, 0x03	; 3
 436:	ff 2e       	mov	r15, r31
 438:	f0 2d       	mov	r31, r0
		setCursor2Line();
		writeIntToDisplay((potiValueMeasured*100)/255);	//Print Duty
 43a:	14 e6       	ldi	r17, 0x64	; 100
		setCursor2Line();
		writeIntToDisplay(8 * (unsigned long)actualFanSpeedMeasured);	//Print pulse time
		OCR2 = potiValueMeasured;
 43c:	cc e6       	ldi	r28, 0x6C	; 108
 43e:	d0 e0       	ldi	r29, 0x00	; 0
		/*if(uartStringEmpty == 1){
			initUartString("lol");
			sendUartChar();
		}*/
		
		setBarMeter(potiValueMeasured);
 440:	80 91 6c 00 	lds	r24, 0x006C
 444:	90 91 6d 00 	lds	r25, 0x006D
 448:	0e 94 49 00 	call	0x92	; 0x92 <setBarMeter>
		
		readADC();
 44c:	0e 94 aa 01 	call	0x354	; 0x354 <readADC>
		setCursorToHome();
 450:	0e 94 ff 00 	call	0x1fe	; 0x1fe <setCursorToHome>
		writeIntToDisplay((60000000UL/((unsigned long)16*(unsigned long)actualFanSpeedMeasured)));	//Print RPM 
 454:	20 91 6e 00 	lds	r18, 0x006E
 458:	30 91 6f 00 	lds	r19, 0x006F
 45c:	c9 01       	movw	r24, r18
 45e:	a0 e0       	ldi	r26, 0x00	; 0
 460:	b0 e0       	ldi	r27, 0x00	; 0
 462:	88 0f       	add	r24, r24
 464:	99 1f       	adc	r25, r25
 466:	aa 1f       	adc	r26, r26
 468:	bb 1f       	adc	r27, r27
 46a:	88 0f       	add	r24, r24
 46c:	99 1f       	adc	r25, r25
 46e:	aa 1f       	adc	r26, r26
 470:	bb 1f       	adc	r27, r27
 472:	9c 01       	movw	r18, r24
 474:	ad 01       	movw	r20, r26
 476:	22 0f       	add	r18, r18
 478:	33 1f       	adc	r19, r19
 47a:	44 1f       	adc	r20, r20
 47c:	55 1f       	adc	r21, r21
 47e:	22 0f       	add	r18, r18
 480:	33 1f       	adc	r19, r19
 482:	44 1f       	adc	r20, r20
 484:	55 1f       	adc	r21, r21
 486:	c7 01       	movw	r24, r14
 488:	b6 01       	movw	r22, r12
 48a:	0e 94 c4 02 	call	0x588	; 0x588 <__udivmodsi4>
 48e:	c9 01       	movw	r24, r18
 490:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <writeIntToDisplay>
		setCursor2Line();
 494:	0e 94 09 01 	call	0x212	; 0x212 <setCursor2Line>
		writeIntToDisplay((potiValueMeasured*100)/255);	//Print Duty
 498:	80 91 6c 00 	lds	r24, 0x006C
 49c:	90 91 6d 00 	lds	r25, 0x006D
 4a0:	18 9f       	mul	r17, r24
 4a2:	90 01       	movw	r18, r0
 4a4:	19 9f       	mul	r17, r25
 4a6:	30 0d       	add	r19, r0
 4a8:	11 24       	eor	r1, r1
 4aa:	a1 e8       	ldi	r26, 0x81	; 129
 4ac:	b0 e8       	ldi	r27, 0x80	; 128
 4ae:	0e 94 e6 02 	call	0x5cc	; 0x5cc <__umulhisi3>
 4b2:	88 0f       	add	r24, r24
 4b4:	89 2f       	mov	r24, r25
 4b6:	88 1f       	adc	r24, r24
 4b8:	99 0b       	sbc	r25, r25
 4ba:	91 95       	neg	r25
 4bc:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <writeIntToDisplay>
		setCursor2Line();
 4c0:	0e 94 09 01 	call	0x212	; 0x212 <setCursor2Line>
		writeIntToDisplay(8 * (unsigned long)actualFanSpeedMeasured);	//Print pulse time
 4c4:	80 91 6e 00 	lds	r24, 0x006E
 4c8:	90 91 6f 00 	lds	r25, 0x006F
 4cc:	88 0f       	add	r24, r24
 4ce:	99 1f       	adc	r25, r25
 4d0:	88 0f       	add	r24, r24
 4d2:	99 1f       	adc	r25, r25
 4d4:	88 0f       	add	r24, r24
 4d6:	99 1f       	adc	r25, r25
 4d8:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <writeIntToDisplay>
		OCR2 = potiValueMeasured;
 4dc:	88 81       	ld	r24, Y
 4de:	83 bd       	out	0x23, r24	; 35
 4e0:	8f e1       	ldi	r24, 0x1F	; 31
 4e2:	9e e4       	ldi	r25, 0x4E	; 78
 4e4:	01 97       	sbiw	r24, 0x01	; 1
 4e6:	f1 f7       	brne	.-4      	; 0x4e4 <main+0xe6>
 4e8:	00 c0       	rjmp	.+0      	; 0x4ea <main+0xec>
 4ea:	00 00       	nop
 4ec:	a9 cf       	rjmp	.-174    	; 0x440 <main+0x42>

000004ee <__vector_1>:
	
	return 0;
}

ISR(INT0_vect)
{
 4ee:	1f 92       	push	r1
 4f0:	0f 92       	push	r0
 4f2:	0f b6       	in	r0, 0x3f	; 63
 4f4:	0f 92       	push	r0
 4f6:	11 24       	eor	r1, r1
 4f8:	8f 93       	push	r24
 4fa:	9f 93       	push	r25
	actualFanSpeedMeasured = TCNT1;
 4fc:	8c b5       	in	r24, 0x2c	; 44
 4fe:	9d b5       	in	r25, 0x2d	; 45
 500:	90 93 6f 00 	sts	0x006F, r25
 504:	80 93 6e 00 	sts	0x006E, r24
	TCNT1 = 0x00;
 508:	1d bc       	out	0x2d, r1	; 45
 50a:	1c bc       	out	0x2c, r1	; 44
}
 50c:	9f 91       	pop	r25
 50e:	8f 91       	pop	r24
 510:	0f 90       	pop	r0
 512:	0f be       	out	0x3f, r0	; 63
 514:	0f 90       	pop	r0
 516:	1f 90       	pop	r1
 518:	18 95       	reti

0000051a <__vector_14>:


ISR(USART_UDRE_vect)
{
 51a:	1f 92       	push	r1
 51c:	0f 92       	push	r0
 51e:	0f b6       	in	r0, 0x3f	; 63
 520:	0f 92       	push	r0
 522:	11 24       	eor	r1, r1
 524:	2f 93       	push	r18
 526:	8f 93       	push	r24
 528:	9f 93       	push	r25
 52a:	ef 93       	push	r30
 52c:	ff 93       	push	r31
	if(pRead == pWrite)
 52e:	e0 91 86 00 	lds	r30, 0x0086
 532:	f0 91 87 00 	lds	r31, 0x0087
 536:	80 91 88 00 	lds	r24, 0x0088
 53a:	90 91 89 00 	lds	r25, 0x0089
 53e:	e8 17       	cp	r30, r24
 540:	f9 07       	cpc	r31, r25
 542:	11 f4       	brne	.+4      	; 0x548 <__vector_14+0x2e>
	{
		UCSRB &=~ (1 << UDRIE);
 544:	55 98       	cbi	0x0a, 5	; 10
		return 1;
 546:	16 c0       	rjmp	.+44     	; 0x574 <__vector_14+0x5a>
	}
	
	UDR = *pRead;
 548:	80 81       	ld	r24, Z
 54a:	8c b9       	out	0x0c, r24	; 12
	pRead++;
 54c:	80 91 86 00 	lds	r24, 0x0086
 550:	90 91 87 00 	lds	r25, 0x0087
 554:	01 96       	adiw	r24, 0x01	; 1
	if(pRead >= &circularBuffer[CIRCULARBUFFERSIZE])
 556:	20 e0       	ldi	r18, 0x00	; 0
 558:	84 38       	cpi	r24, 0x84	; 132
 55a:	92 07       	cpc	r25, r18
 55c:	28 f4       	brcc	.+10     	; 0x568 <__vector_14+0x4e>
		UCSRB &=~ (1 << UDRIE);
		return 1;
	}
	
	UDR = *pRead;
	pRead++;
 55e:	90 93 87 00 	sts	0x0087, r25
 562:	80 93 86 00 	sts	0x0086, r24
 566:	06 c0       	rjmp	.+12     	; 0x574 <__vector_14+0x5a>
	if(pRead >= &circularBuffer[CIRCULARBUFFERSIZE])
	{
		pRead = circularBuffer;
 568:	80 e7       	ldi	r24, 0x70	; 112
 56a:	90 e0       	ldi	r25, 0x00	; 0
 56c:	90 93 87 00 	sts	0x0087, r25
 570:	80 93 86 00 	sts	0x0086, r24
	}
}
 574:	ff 91       	pop	r31
 576:	ef 91       	pop	r30
 578:	9f 91       	pop	r25
 57a:	8f 91       	pop	r24
 57c:	2f 91       	pop	r18
 57e:	0f 90       	pop	r0
 580:	0f be       	out	0x3f, r0	; 63
 582:	0f 90       	pop	r0
 584:	1f 90       	pop	r1
 586:	18 95       	reti

00000588 <__udivmodsi4>:
 588:	a1 e2       	ldi	r26, 0x21	; 33
 58a:	1a 2e       	mov	r1, r26
 58c:	aa 1b       	sub	r26, r26
 58e:	bb 1b       	sub	r27, r27
 590:	fd 01       	movw	r30, r26
 592:	0d c0       	rjmp	.+26     	; 0x5ae <__udivmodsi4_ep>

00000594 <__udivmodsi4_loop>:
 594:	aa 1f       	adc	r26, r26
 596:	bb 1f       	adc	r27, r27
 598:	ee 1f       	adc	r30, r30
 59a:	ff 1f       	adc	r31, r31
 59c:	a2 17       	cp	r26, r18
 59e:	b3 07       	cpc	r27, r19
 5a0:	e4 07       	cpc	r30, r20
 5a2:	f5 07       	cpc	r31, r21
 5a4:	20 f0       	brcs	.+8      	; 0x5ae <__udivmodsi4_ep>
 5a6:	a2 1b       	sub	r26, r18
 5a8:	b3 0b       	sbc	r27, r19
 5aa:	e4 0b       	sbc	r30, r20
 5ac:	f5 0b       	sbc	r31, r21

000005ae <__udivmodsi4_ep>:
 5ae:	66 1f       	adc	r22, r22
 5b0:	77 1f       	adc	r23, r23
 5b2:	88 1f       	adc	r24, r24
 5b4:	99 1f       	adc	r25, r25
 5b6:	1a 94       	dec	r1
 5b8:	69 f7       	brne	.-38     	; 0x594 <__udivmodsi4_loop>
 5ba:	60 95       	com	r22
 5bc:	70 95       	com	r23
 5be:	80 95       	com	r24
 5c0:	90 95       	com	r25
 5c2:	9b 01       	movw	r18, r22
 5c4:	ac 01       	movw	r20, r24
 5c6:	bd 01       	movw	r22, r26
 5c8:	cf 01       	movw	r24, r30
 5ca:	08 95       	ret

000005cc <__umulhisi3>:
 5cc:	a2 9f       	mul	r26, r18
 5ce:	b0 01       	movw	r22, r0
 5d0:	b3 9f       	mul	r27, r19
 5d2:	c0 01       	movw	r24, r0
 5d4:	a3 9f       	mul	r26, r19
 5d6:	70 0d       	add	r23, r0
 5d8:	81 1d       	adc	r24, r1
 5da:	11 24       	eor	r1, r1
 5dc:	91 1d       	adc	r25, r1
 5de:	b2 9f       	mul	r27, r18
 5e0:	70 0d       	add	r23, r0
 5e2:	81 1d       	adc	r24, r1
 5e4:	11 24       	eor	r1, r1
 5e6:	91 1d       	adc	r25, r1
 5e8:	08 95       	ret

000005ea <sprintf>:
 5ea:	ae e0       	ldi	r26, 0x0E	; 14
 5ec:	b0 e0       	ldi	r27, 0x00	; 0
 5ee:	eb ef       	ldi	r30, 0xFB	; 251
 5f0:	f2 e0       	ldi	r31, 0x02	; 2
 5f2:	0c 94 a4 05 	jmp	0xb48	; 0xb48 <__prologue_saves__+0x1c>
 5f6:	0d 89       	ldd	r16, Y+21	; 0x15
 5f8:	1e 89       	ldd	r17, Y+22	; 0x16
 5fa:	86 e0       	ldi	r24, 0x06	; 6
 5fc:	8c 83       	std	Y+4, r24	; 0x04
 5fe:	1a 83       	std	Y+2, r17	; 0x02
 600:	09 83       	std	Y+1, r16	; 0x01
 602:	8f ef       	ldi	r24, 0xFF	; 255
 604:	9f e7       	ldi	r25, 0x7F	; 127
 606:	9e 83       	std	Y+6, r25	; 0x06
 608:	8d 83       	std	Y+5, r24	; 0x05
 60a:	ae 01       	movw	r20, r28
 60c:	47 5e       	subi	r20, 0xE7	; 231
 60e:	5f 4f       	sbci	r21, 0xFF	; 255
 610:	6f 89       	ldd	r22, Y+23	; 0x17
 612:	78 8d       	ldd	r23, Y+24	; 0x18
 614:	ce 01       	movw	r24, r28
 616:	01 96       	adiw	r24, 0x01	; 1
 618:	0e 94 18 03 	call	0x630	; 0x630 <vfprintf>
 61c:	2f 81       	ldd	r18, Y+7	; 0x07
 61e:	38 85       	ldd	r19, Y+8	; 0x08
 620:	f8 01       	movw	r30, r16
 622:	e2 0f       	add	r30, r18
 624:	f3 1f       	adc	r31, r19
 626:	10 82       	st	Z, r1
 628:	2e 96       	adiw	r28, 0x0e	; 14
 62a:	e4 e0       	ldi	r30, 0x04	; 4
 62c:	0c 94 c0 05 	jmp	0xb80	; 0xb80 <__epilogue_restores__+0x1c>

00000630 <vfprintf>:
 630:	ac e0       	ldi	r26, 0x0C	; 12
 632:	b0 e0       	ldi	r27, 0x00	; 0
 634:	ee e1       	ldi	r30, 0x1E	; 30
 636:	f3 e0       	ldi	r31, 0x03	; 3
 638:	0c 94 96 05 	jmp	0xb2c	; 0xb2c <__prologue_saves__>
 63c:	7c 01       	movw	r14, r24
 63e:	6b 01       	movw	r12, r22
 640:	8a 01       	movw	r16, r20
 642:	fc 01       	movw	r30, r24
 644:	17 82       	std	Z+7, r1	; 0x07
 646:	16 82       	std	Z+6, r1	; 0x06
 648:	83 81       	ldd	r24, Z+3	; 0x03
 64a:	81 ff       	sbrs	r24, 1
 64c:	bd c1       	rjmp	.+890    	; 0x9c8 <__stack+0x169>
 64e:	ce 01       	movw	r24, r28
 650:	01 96       	adiw	r24, 0x01	; 1
 652:	4c 01       	movw	r8, r24
 654:	f7 01       	movw	r30, r14
 656:	93 81       	ldd	r25, Z+3	; 0x03
 658:	f6 01       	movw	r30, r12
 65a:	93 fd       	sbrc	r25, 3
 65c:	85 91       	lpm	r24, Z+
 65e:	93 ff       	sbrs	r25, 3
 660:	81 91       	ld	r24, Z+
 662:	6f 01       	movw	r12, r30
 664:	88 23       	and	r24, r24
 666:	09 f4       	brne	.+2      	; 0x66a <vfprintf+0x3a>
 668:	ab c1       	rjmp	.+854    	; 0x9c0 <__stack+0x161>
 66a:	85 32       	cpi	r24, 0x25	; 37
 66c:	39 f4       	brne	.+14     	; 0x67c <vfprintf+0x4c>
 66e:	93 fd       	sbrc	r25, 3
 670:	85 91       	lpm	r24, Z+
 672:	93 ff       	sbrs	r25, 3
 674:	81 91       	ld	r24, Z+
 676:	6f 01       	movw	r12, r30
 678:	85 32       	cpi	r24, 0x25	; 37
 67a:	29 f4       	brne	.+10     	; 0x686 <vfprintf+0x56>
 67c:	b7 01       	movw	r22, r14
 67e:	90 e0       	ldi	r25, 0x00	; 0
 680:	0e 94 00 05 	call	0xa00	; 0xa00 <fputc>
 684:	e7 cf       	rjmp	.-50     	; 0x654 <vfprintf+0x24>
 686:	51 2c       	mov	r5, r1
 688:	31 2c       	mov	r3, r1
 68a:	20 e0       	ldi	r18, 0x00	; 0
 68c:	20 32       	cpi	r18, 0x20	; 32
 68e:	a0 f4       	brcc	.+40     	; 0x6b8 <vfprintf+0x88>
 690:	8b 32       	cpi	r24, 0x2B	; 43
 692:	69 f0       	breq	.+26     	; 0x6ae <vfprintf+0x7e>
 694:	30 f4       	brcc	.+12     	; 0x6a2 <vfprintf+0x72>
 696:	80 32       	cpi	r24, 0x20	; 32
 698:	59 f0       	breq	.+22     	; 0x6b0 <vfprintf+0x80>
 69a:	83 32       	cpi	r24, 0x23	; 35
 69c:	69 f4       	brne	.+26     	; 0x6b8 <vfprintf+0x88>
 69e:	20 61       	ori	r18, 0x10	; 16
 6a0:	2c c0       	rjmp	.+88     	; 0x6fa <vfprintf+0xca>
 6a2:	8d 32       	cpi	r24, 0x2D	; 45
 6a4:	39 f0       	breq	.+14     	; 0x6b4 <vfprintf+0x84>
 6a6:	80 33       	cpi	r24, 0x30	; 48
 6a8:	39 f4       	brne	.+14     	; 0x6b8 <vfprintf+0x88>
 6aa:	21 60       	ori	r18, 0x01	; 1
 6ac:	26 c0       	rjmp	.+76     	; 0x6fa <vfprintf+0xca>
 6ae:	22 60       	ori	r18, 0x02	; 2
 6b0:	24 60       	ori	r18, 0x04	; 4
 6b2:	23 c0       	rjmp	.+70     	; 0x6fa <vfprintf+0xca>
 6b4:	28 60       	ori	r18, 0x08	; 8
 6b6:	21 c0       	rjmp	.+66     	; 0x6fa <vfprintf+0xca>
 6b8:	27 fd       	sbrc	r18, 7
 6ba:	27 c0       	rjmp	.+78     	; 0x70a <vfprintf+0xda>
 6bc:	30 ed       	ldi	r19, 0xD0	; 208
 6be:	38 0f       	add	r19, r24
 6c0:	3a 30       	cpi	r19, 0x0A	; 10
 6c2:	78 f4       	brcc	.+30     	; 0x6e2 <vfprintf+0xb2>
 6c4:	26 ff       	sbrs	r18, 6
 6c6:	06 c0       	rjmp	.+12     	; 0x6d4 <vfprintf+0xa4>
 6c8:	fa e0       	ldi	r31, 0x0A	; 10
 6ca:	5f 9e       	mul	r5, r31
 6cc:	30 0d       	add	r19, r0
 6ce:	11 24       	eor	r1, r1
 6d0:	53 2e       	mov	r5, r19
 6d2:	13 c0       	rjmp	.+38     	; 0x6fa <vfprintf+0xca>
 6d4:	8a e0       	ldi	r24, 0x0A	; 10
 6d6:	38 9e       	mul	r3, r24
 6d8:	30 0d       	add	r19, r0
 6da:	11 24       	eor	r1, r1
 6dc:	33 2e       	mov	r3, r19
 6de:	20 62       	ori	r18, 0x20	; 32
 6e0:	0c c0       	rjmp	.+24     	; 0x6fa <vfprintf+0xca>
 6e2:	8e 32       	cpi	r24, 0x2E	; 46
 6e4:	21 f4       	brne	.+8      	; 0x6ee <vfprintf+0xbe>
 6e6:	26 fd       	sbrc	r18, 6
 6e8:	6b c1       	rjmp	.+726    	; 0x9c0 <__stack+0x161>
 6ea:	20 64       	ori	r18, 0x40	; 64
 6ec:	06 c0       	rjmp	.+12     	; 0x6fa <vfprintf+0xca>
 6ee:	8c 36       	cpi	r24, 0x6C	; 108
 6f0:	11 f4       	brne	.+4      	; 0x6f6 <vfprintf+0xc6>
 6f2:	20 68       	ori	r18, 0x80	; 128
 6f4:	02 c0       	rjmp	.+4      	; 0x6fa <vfprintf+0xca>
 6f6:	88 36       	cpi	r24, 0x68	; 104
 6f8:	41 f4       	brne	.+16     	; 0x70a <vfprintf+0xda>
 6fa:	f6 01       	movw	r30, r12
 6fc:	93 fd       	sbrc	r25, 3
 6fe:	85 91       	lpm	r24, Z+
 700:	93 ff       	sbrs	r25, 3
 702:	81 91       	ld	r24, Z+
 704:	6f 01       	movw	r12, r30
 706:	81 11       	cpse	r24, r1
 708:	c1 cf       	rjmp	.-126    	; 0x68c <vfprintf+0x5c>
 70a:	98 2f       	mov	r25, r24
 70c:	9f 7d       	andi	r25, 0xDF	; 223
 70e:	95 54       	subi	r25, 0x45	; 69
 710:	93 30       	cpi	r25, 0x03	; 3
 712:	28 f4       	brcc	.+10     	; 0x71e <vfprintf+0xee>
 714:	0c 5f       	subi	r16, 0xFC	; 252
 716:	1f 4f       	sbci	r17, 0xFF	; 255
 718:	ff e3       	ldi	r31, 0x3F	; 63
 71a:	f9 83       	std	Y+1, r31	; 0x01
 71c:	0d c0       	rjmp	.+26     	; 0x738 <vfprintf+0x108>
 71e:	83 36       	cpi	r24, 0x63	; 99
 720:	31 f0       	breq	.+12     	; 0x72e <vfprintf+0xfe>
 722:	83 37       	cpi	r24, 0x73	; 115
 724:	71 f0       	breq	.+28     	; 0x742 <vfprintf+0x112>
 726:	83 35       	cpi	r24, 0x53	; 83
 728:	09 f0       	breq	.+2      	; 0x72c <vfprintf+0xfc>
 72a:	5b c0       	rjmp	.+182    	; 0x7e2 <vfprintf+0x1b2>
 72c:	22 c0       	rjmp	.+68     	; 0x772 <vfprintf+0x142>
 72e:	f8 01       	movw	r30, r16
 730:	80 81       	ld	r24, Z
 732:	89 83       	std	Y+1, r24	; 0x01
 734:	0e 5f       	subi	r16, 0xFE	; 254
 736:	1f 4f       	sbci	r17, 0xFF	; 255
 738:	44 24       	eor	r4, r4
 73a:	43 94       	inc	r4
 73c:	51 2c       	mov	r5, r1
 73e:	54 01       	movw	r10, r8
 740:	15 c0       	rjmp	.+42     	; 0x76c <vfprintf+0x13c>
 742:	38 01       	movw	r6, r16
 744:	f2 e0       	ldi	r31, 0x02	; 2
 746:	6f 0e       	add	r6, r31
 748:	71 1c       	adc	r7, r1
 74a:	f8 01       	movw	r30, r16
 74c:	a0 80       	ld	r10, Z
 74e:	b1 80       	ldd	r11, Z+1	; 0x01
 750:	26 ff       	sbrs	r18, 6
 752:	03 c0       	rjmp	.+6      	; 0x75a <vfprintf+0x12a>
 754:	65 2d       	mov	r22, r5
 756:	70 e0       	ldi	r23, 0x00	; 0
 758:	02 c0       	rjmp	.+4      	; 0x75e <vfprintf+0x12e>
 75a:	6f ef       	ldi	r22, 0xFF	; 255
 75c:	7f ef       	ldi	r23, 0xFF	; 255
 75e:	c5 01       	movw	r24, r10
 760:	2c 87       	std	Y+12, r18	; 0x0c
 762:	0e 94 f5 04 	call	0x9ea	; 0x9ea <strnlen>
 766:	2c 01       	movw	r4, r24
 768:	83 01       	movw	r16, r6
 76a:	2c 85       	ldd	r18, Y+12	; 0x0c
 76c:	2f 77       	andi	r18, 0x7F	; 127
 76e:	22 2e       	mov	r2, r18
 770:	17 c0       	rjmp	.+46     	; 0x7a0 <vfprintf+0x170>
 772:	38 01       	movw	r6, r16
 774:	f2 e0       	ldi	r31, 0x02	; 2
 776:	6f 0e       	add	r6, r31
 778:	71 1c       	adc	r7, r1
 77a:	f8 01       	movw	r30, r16
 77c:	a0 80       	ld	r10, Z
 77e:	b1 80       	ldd	r11, Z+1	; 0x01
 780:	26 ff       	sbrs	r18, 6
 782:	03 c0       	rjmp	.+6      	; 0x78a <vfprintf+0x15a>
 784:	65 2d       	mov	r22, r5
 786:	70 e0       	ldi	r23, 0x00	; 0
 788:	02 c0       	rjmp	.+4      	; 0x78e <vfprintf+0x15e>
 78a:	6f ef       	ldi	r22, 0xFF	; 255
 78c:	7f ef       	ldi	r23, 0xFF	; 255
 78e:	c5 01       	movw	r24, r10
 790:	2c 87       	std	Y+12, r18	; 0x0c
 792:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <strnlen_P>
 796:	2c 01       	movw	r4, r24
 798:	2c 85       	ldd	r18, Y+12	; 0x0c
 79a:	20 68       	ori	r18, 0x80	; 128
 79c:	22 2e       	mov	r2, r18
 79e:	83 01       	movw	r16, r6
 7a0:	23 fc       	sbrc	r2, 3
 7a2:	1b c0       	rjmp	.+54     	; 0x7da <vfprintf+0x1aa>
 7a4:	83 2d       	mov	r24, r3
 7a6:	90 e0       	ldi	r25, 0x00	; 0
 7a8:	48 16       	cp	r4, r24
 7aa:	59 06       	cpc	r5, r25
 7ac:	b0 f4       	brcc	.+44     	; 0x7da <vfprintf+0x1aa>
 7ae:	b7 01       	movw	r22, r14
 7b0:	80 e2       	ldi	r24, 0x20	; 32
 7b2:	90 e0       	ldi	r25, 0x00	; 0
 7b4:	0e 94 00 05 	call	0xa00	; 0xa00 <fputc>
 7b8:	3a 94       	dec	r3
 7ba:	f4 cf       	rjmp	.-24     	; 0x7a4 <vfprintf+0x174>
 7bc:	f5 01       	movw	r30, r10
 7be:	27 fc       	sbrc	r2, 7
 7c0:	85 91       	lpm	r24, Z+
 7c2:	27 fe       	sbrs	r2, 7
 7c4:	81 91       	ld	r24, Z+
 7c6:	5f 01       	movw	r10, r30
 7c8:	b7 01       	movw	r22, r14
 7ca:	90 e0       	ldi	r25, 0x00	; 0
 7cc:	0e 94 00 05 	call	0xa00	; 0xa00 <fputc>
 7d0:	31 10       	cpse	r3, r1
 7d2:	3a 94       	dec	r3
 7d4:	f1 e0       	ldi	r31, 0x01	; 1
 7d6:	4f 1a       	sub	r4, r31
 7d8:	51 08       	sbc	r5, r1
 7da:	41 14       	cp	r4, r1
 7dc:	51 04       	cpc	r5, r1
 7de:	71 f7       	brne	.-36     	; 0x7bc <vfprintf+0x18c>
 7e0:	e5 c0       	rjmp	.+458    	; 0x9ac <__stack+0x14d>
 7e2:	84 36       	cpi	r24, 0x64	; 100
 7e4:	11 f0       	breq	.+4      	; 0x7ea <vfprintf+0x1ba>
 7e6:	89 36       	cpi	r24, 0x69	; 105
 7e8:	39 f5       	brne	.+78     	; 0x838 <vfprintf+0x208>
 7ea:	f8 01       	movw	r30, r16
 7ec:	27 ff       	sbrs	r18, 7
 7ee:	07 c0       	rjmp	.+14     	; 0x7fe <vfprintf+0x1ce>
 7f0:	60 81       	ld	r22, Z
 7f2:	71 81       	ldd	r23, Z+1	; 0x01
 7f4:	82 81       	ldd	r24, Z+2	; 0x02
 7f6:	93 81       	ldd	r25, Z+3	; 0x03
 7f8:	0c 5f       	subi	r16, 0xFC	; 252
 7fa:	1f 4f       	sbci	r17, 0xFF	; 255
 7fc:	08 c0       	rjmp	.+16     	; 0x80e <vfprintf+0x1de>
 7fe:	60 81       	ld	r22, Z
 800:	71 81       	ldd	r23, Z+1	; 0x01
 802:	07 2e       	mov	r0, r23
 804:	00 0c       	add	r0, r0
 806:	88 0b       	sbc	r24, r24
 808:	99 0b       	sbc	r25, r25
 80a:	0e 5f       	subi	r16, 0xFE	; 254
 80c:	1f 4f       	sbci	r17, 0xFF	; 255
 80e:	2f 76       	andi	r18, 0x6F	; 111
 810:	72 2e       	mov	r7, r18
 812:	97 ff       	sbrs	r25, 7
 814:	09 c0       	rjmp	.+18     	; 0x828 <vfprintf+0x1f8>
 816:	90 95       	com	r25
 818:	80 95       	com	r24
 81a:	70 95       	com	r23
 81c:	61 95       	neg	r22
 81e:	7f 4f       	sbci	r23, 0xFF	; 255
 820:	8f 4f       	sbci	r24, 0xFF	; 255
 822:	9f 4f       	sbci	r25, 0xFF	; 255
 824:	20 68       	ori	r18, 0x80	; 128
 826:	72 2e       	mov	r7, r18
 828:	2a e0       	ldi	r18, 0x0A	; 10
 82a:	30 e0       	ldi	r19, 0x00	; 0
 82c:	a4 01       	movw	r20, r8
 82e:	0e 94 38 05 	call	0xa70	; 0xa70 <__ultoa_invert>
 832:	a8 2e       	mov	r10, r24
 834:	a8 18       	sub	r10, r8
 836:	44 c0       	rjmp	.+136    	; 0x8c0 <__stack+0x61>
 838:	85 37       	cpi	r24, 0x75	; 117
 83a:	29 f4       	brne	.+10     	; 0x846 <vfprintf+0x216>
 83c:	2f 7e       	andi	r18, 0xEF	; 239
 83e:	b2 2e       	mov	r11, r18
 840:	2a e0       	ldi	r18, 0x0A	; 10
 842:	30 e0       	ldi	r19, 0x00	; 0
 844:	25 c0       	rjmp	.+74     	; 0x890 <__stack+0x31>
 846:	f2 2f       	mov	r31, r18
 848:	f9 7f       	andi	r31, 0xF9	; 249
 84a:	bf 2e       	mov	r11, r31
 84c:	8f 36       	cpi	r24, 0x6F	; 111
 84e:	c1 f0       	breq	.+48     	; 0x880 <__stack+0x21>
 850:	18 f4       	brcc	.+6      	; 0x858 <vfprintf+0x228>
 852:	88 35       	cpi	r24, 0x58	; 88
 854:	79 f0       	breq	.+30     	; 0x874 <__stack+0x15>
 856:	b4 c0       	rjmp	.+360    	; 0x9c0 <__stack+0x161>
 858:	80 37       	cpi	r24, 0x70	; 112
 85a:	19 f0       	breq	.+6      	; 0x862 <__stack+0x3>
 85c:	88 37       	cpi	r24, 0x78	; 120
 85e:	21 f0       	breq	.+8      	; 0x868 <__stack+0x9>
 860:	af c0       	rjmp	.+350    	; 0x9c0 <__stack+0x161>
 862:	2f 2f       	mov	r18, r31
 864:	20 61       	ori	r18, 0x10	; 16
 866:	b2 2e       	mov	r11, r18
 868:	b4 fe       	sbrs	r11, 4
 86a:	0d c0       	rjmp	.+26     	; 0x886 <__stack+0x27>
 86c:	8b 2d       	mov	r24, r11
 86e:	84 60       	ori	r24, 0x04	; 4
 870:	b8 2e       	mov	r11, r24
 872:	09 c0       	rjmp	.+18     	; 0x886 <__stack+0x27>
 874:	24 ff       	sbrs	r18, 4
 876:	0a c0       	rjmp	.+20     	; 0x88c <__stack+0x2d>
 878:	9f 2f       	mov	r25, r31
 87a:	96 60       	ori	r25, 0x06	; 6
 87c:	b9 2e       	mov	r11, r25
 87e:	06 c0       	rjmp	.+12     	; 0x88c <__stack+0x2d>
 880:	28 e0       	ldi	r18, 0x08	; 8
 882:	30 e0       	ldi	r19, 0x00	; 0
 884:	05 c0       	rjmp	.+10     	; 0x890 <__stack+0x31>
 886:	20 e1       	ldi	r18, 0x10	; 16
 888:	30 e0       	ldi	r19, 0x00	; 0
 88a:	02 c0       	rjmp	.+4      	; 0x890 <__stack+0x31>
 88c:	20 e1       	ldi	r18, 0x10	; 16
 88e:	32 e0       	ldi	r19, 0x02	; 2
 890:	f8 01       	movw	r30, r16
 892:	b7 fe       	sbrs	r11, 7
 894:	07 c0       	rjmp	.+14     	; 0x8a4 <__stack+0x45>
 896:	60 81       	ld	r22, Z
 898:	71 81       	ldd	r23, Z+1	; 0x01
 89a:	82 81       	ldd	r24, Z+2	; 0x02
 89c:	93 81       	ldd	r25, Z+3	; 0x03
 89e:	0c 5f       	subi	r16, 0xFC	; 252
 8a0:	1f 4f       	sbci	r17, 0xFF	; 255
 8a2:	06 c0       	rjmp	.+12     	; 0x8b0 <__stack+0x51>
 8a4:	60 81       	ld	r22, Z
 8a6:	71 81       	ldd	r23, Z+1	; 0x01
 8a8:	80 e0       	ldi	r24, 0x00	; 0
 8aa:	90 e0       	ldi	r25, 0x00	; 0
 8ac:	0e 5f       	subi	r16, 0xFE	; 254
 8ae:	1f 4f       	sbci	r17, 0xFF	; 255
 8b0:	a4 01       	movw	r20, r8
 8b2:	0e 94 38 05 	call	0xa70	; 0xa70 <__ultoa_invert>
 8b6:	a8 2e       	mov	r10, r24
 8b8:	a8 18       	sub	r10, r8
 8ba:	fb 2d       	mov	r31, r11
 8bc:	ff 77       	andi	r31, 0x7F	; 127
 8be:	7f 2e       	mov	r7, r31
 8c0:	76 fe       	sbrs	r7, 6
 8c2:	0b c0       	rjmp	.+22     	; 0x8da <__stack+0x7b>
 8c4:	37 2d       	mov	r19, r7
 8c6:	3e 7f       	andi	r19, 0xFE	; 254
 8c8:	a5 14       	cp	r10, r5
 8ca:	50 f4       	brcc	.+20     	; 0x8e0 <__stack+0x81>
 8cc:	74 fe       	sbrs	r7, 4
 8ce:	0a c0       	rjmp	.+20     	; 0x8e4 <__stack+0x85>
 8d0:	72 fc       	sbrc	r7, 2
 8d2:	08 c0       	rjmp	.+16     	; 0x8e4 <__stack+0x85>
 8d4:	37 2d       	mov	r19, r7
 8d6:	3e 7e       	andi	r19, 0xEE	; 238
 8d8:	05 c0       	rjmp	.+10     	; 0x8e4 <__stack+0x85>
 8da:	ba 2c       	mov	r11, r10
 8dc:	37 2d       	mov	r19, r7
 8de:	03 c0       	rjmp	.+6      	; 0x8e6 <__stack+0x87>
 8e0:	ba 2c       	mov	r11, r10
 8e2:	01 c0       	rjmp	.+2      	; 0x8e6 <__stack+0x87>
 8e4:	b5 2c       	mov	r11, r5
 8e6:	34 ff       	sbrs	r19, 4
 8e8:	0d c0       	rjmp	.+26     	; 0x904 <__stack+0xa5>
 8ea:	fe 01       	movw	r30, r28
 8ec:	ea 0d       	add	r30, r10
 8ee:	f1 1d       	adc	r31, r1
 8f0:	80 81       	ld	r24, Z
 8f2:	80 33       	cpi	r24, 0x30	; 48
 8f4:	11 f4       	brne	.+4      	; 0x8fa <__stack+0x9b>
 8f6:	39 7e       	andi	r19, 0xE9	; 233
 8f8:	09 c0       	rjmp	.+18     	; 0x90c <__stack+0xad>
 8fa:	32 ff       	sbrs	r19, 2
 8fc:	06 c0       	rjmp	.+12     	; 0x90a <__stack+0xab>
 8fe:	b3 94       	inc	r11
 900:	b3 94       	inc	r11
 902:	04 c0       	rjmp	.+8      	; 0x90c <__stack+0xad>
 904:	83 2f       	mov	r24, r19
 906:	86 78       	andi	r24, 0x86	; 134
 908:	09 f0       	breq	.+2      	; 0x90c <__stack+0xad>
 90a:	b3 94       	inc	r11
 90c:	33 fd       	sbrc	r19, 3
 90e:	13 c0       	rjmp	.+38     	; 0x936 <__stack+0xd7>
 910:	30 ff       	sbrs	r19, 0
 912:	06 c0       	rjmp	.+12     	; 0x920 <__stack+0xc1>
 914:	5a 2c       	mov	r5, r10
 916:	b3 14       	cp	r11, r3
 918:	18 f4       	brcc	.+6      	; 0x920 <__stack+0xc1>
 91a:	53 0c       	add	r5, r3
 91c:	5b 18       	sub	r5, r11
 91e:	b3 2c       	mov	r11, r3
 920:	b3 14       	cp	r11, r3
 922:	68 f4       	brcc	.+26     	; 0x93e <__stack+0xdf>
 924:	b7 01       	movw	r22, r14
 926:	80 e2       	ldi	r24, 0x20	; 32
 928:	90 e0       	ldi	r25, 0x00	; 0
 92a:	3c 87       	std	Y+12, r19	; 0x0c
 92c:	0e 94 00 05 	call	0xa00	; 0xa00 <fputc>
 930:	b3 94       	inc	r11
 932:	3c 85       	ldd	r19, Y+12	; 0x0c
 934:	f5 cf       	rjmp	.-22     	; 0x920 <__stack+0xc1>
 936:	b3 14       	cp	r11, r3
 938:	10 f4       	brcc	.+4      	; 0x93e <__stack+0xdf>
 93a:	3b 18       	sub	r3, r11
 93c:	01 c0       	rjmp	.+2      	; 0x940 <__stack+0xe1>
 93e:	31 2c       	mov	r3, r1
 940:	34 ff       	sbrs	r19, 4
 942:	12 c0       	rjmp	.+36     	; 0x968 <__stack+0x109>
 944:	b7 01       	movw	r22, r14
 946:	80 e3       	ldi	r24, 0x30	; 48
 948:	90 e0       	ldi	r25, 0x00	; 0
 94a:	3c 87       	std	Y+12, r19	; 0x0c
 94c:	0e 94 00 05 	call	0xa00	; 0xa00 <fputc>
 950:	3c 85       	ldd	r19, Y+12	; 0x0c
 952:	32 ff       	sbrs	r19, 2
 954:	17 c0       	rjmp	.+46     	; 0x984 <__stack+0x125>
 956:	31 fd       	sbrc	r19, 1
 958:	03 c0       	rjmp	.+6      	; 0x960 <__stack+0x101>
 95a:	88 e7       	ldi	r24, 0x78	; 120
 95c:	90 e0       	ldi	r25, 0x00	; 0
 95e:	02 c0       	rjmp	.+4      	; 0x964 <__stack+0x105>
 960:	88 e5       	ldi	r24, 0x58	; 88
 962:	90 e0       	ldi	r25, 0x00	; 0
 964:	b7 01       	movw	r22, r14
 966:	0c c0       	rjmp	.+24     	; 0x980 <__stack+0x121>
 968:	83 2f       	mov	r24, r19
 96a:	86 78       	andi	r24, 0x86	; 134
 96c:	59 f0       	breq	.+22     	; 0x984 <__stack+0x125>
 96e:	31 ff       	sbrs	r19, 1
 970:	02 c0       	rjmp	.+4      	; 0x976 <__stack+0x117>
 972:	8b e2       	ldi	r24, 0x2B	; 43
 974:	01 c0       	rjmp	.+2      	; 0x978 <__stack+0x119>
 976:	80 e2       	ldi	r24, 0x20	; 32
 978:	37 fd       	sbrc	r19, 7
 97a:	8d e2       	ldi	r24, 0x2D	; 45
 97c:	b7 01       	movw	r22, r14
 97e:	90 e0       	ldi	r25, 0x00	; 0
 980:	0e 94 00 05 	call	0xa00	; 0xa00 <fputc>
 984:	a5 14       	cp	r10, r5
 986:	38 f4       	brcc	.+14     	; 0x996 <__stack+0x137>
 988:	b7 01       	movw	r22, r14
 98a:	80 e3       	ldi	r24, 0x30	; 48
 98c:	90 e0       	ldi	r25, 0x00	; 0
 98e:	0e 94 00 05 	call	0xa00	; 0xa00 <fputc>
 992:	5a 94       	dec	r5
 994:	f7 cf       	rjmp	.-18     	; 0x984 <__stack+0x125>
 996:	aa 94       	dec	r10
 998:	f4 01       	movw	r30, r8
 99a:	ea 0d       	add	r30, r10
 99c:	f1 1d       	adc	r31, r1
 99e:	80 81       	ld	r24, Z
 9a0:	b7 01       	movw	r22, r14
 9a2:	90 e0       	ldi	r25, 0x00	; 0
 9a4:	0e 94 00 05 	call	0xa00	; 0xa00 <fputc>
 9a8:	a1 10       	cpse	r10, r1
 9aa:	f5 cf       	rjmp	.-22     	; 0x996 <__stack+0x137>
 9ac:	33 20       	and	r3, r3
 9ae:	09 f4       	brne	.+2      	; 0x9b2 <__stack+0x153>
 9b0:	51 ce       	rjmp	.-862    	; 0x654 <vfprintf+0x24>
 9b2:	b7 01       	movw	r22, r14
 9b4:	80 e2       	ldi	r24, 0x20	; 32
 9b6:	90 e0       	ldi	r25, 0x00	; 0
 9b8:	0e 94 00 05 	call	0xa00	; 0xa00 <fputc>
 9bc:	3a 94       	dec	r3
 9be:	f6 cf       	rjmp	.-20     	; 0x9ac <__stack+0x14d>
 9c0:	f7 01       	movw	r30, r14
 9c2:	86 81       	ldd	r24, Z+6	; 0x06
 9c4:	97 81       	ldd	r25, Z+7	; 0x07
 9c6:	02 c0       	rjmp	.+4      	; 0x9cc <__stack+0x16d>
 9c8:	8f ef       	ldi	r24, 0xFF	; 255
 9ca:	9f ef       	ldi	r25, 0xFF	; 255
 9cc:	2c 96       	adiw	r28, 0x0c	; 12
 9ce:	e2 e1       	ldi	r30, 0x12	; 18
 9d0:	0c 94 b2 05 	jmp	0xb64	; 0xb64 <__epilogue_restores__>

000009d4 <strnlen_P>:
 9d4:	fc 01       	movw	r30, r24
 9d6:	05 90       	lpm	r0, Z+
 9d8:	61 50       	subi	r22, 0x01	; 1
 9da:	70 40       	sbci	r23, 0x00	; 0
 9dc:	01 10       	cpse	r0, r1
 9de:	d8 f7       	brcc	.-10     	; 0x9d6 <strnlen_P+0x2>
 9e0:	80 95       	com	r24
 9e2:	90 95       	com	r25
 9e4:	8e 0f       	add	r24, r30
 9e6:	9f 1f       	adc	r25, r31
 9e8:	08 95       	ret

000009ea <strnlen>:
 9ea:	fc 01       	movw	r30, r24
 9ec:	61 50       	subi	r22, 0x01	; 1
 9ee:	70 40       	sbci	r23, 0x00	; 0
 9f0:	01 90       	ld	r0, Z+
 9f2:	01 10       	cpse	r0, r1
 9f4:	d8 f7       	brcc	.-10     	; 0x9ec <strnlen+0x2>
 9f6:	80 95       	com	r24
 9f8:	90 95       	com	r25
 9fa:	8e 0f       	add	r24, r30
 9fc:	9f 1f       	adc	r25, r31
 9fe:	08 95       	ret

00000a00 <fputc>:
 a00:	0f 93       	push	r16
 a02:	1f 93       	push	r17
 a04:	cf 93       	push	r28
 a06:	df 93       	push	r29
 a08:	fb 01       	movw	r30, r22
 a0a:	23 81       	ldd	r18, Z+3	; 0x03
 a0c:	21 fd       	sbrc	r18, 1
 a0e:	03 c0       	rjmp	.+6      	; 0xa16 <fputc+0x16>
 a10:	8f ef       	ldi	r24, 0xFF	; 255
 a12:	9f ef       	ldi	r25, 0xFF	; 255
 a14:	28 c0       	rjmp	.+80     	; 0xa66 <fputc+0x66>
 a16:	22 ff       	sbrs	r18, 2
 a18:	16 c0       	rjmp	.+44     	; 0xa46 <fputc+0x46>
 a1a:	46 81       	ldd	r20, Z+6	; 0x06
 a1c:	57 81       	ldd	r21, Z+7	; 0x07
 a1e:	24 81       	ldd	r18, Z+4	; 0x04
 a20:	35 81       	ldd	r19, Z+5	; 0x05
 a22:	42 17       	cp	r20, r18
 a24:	53 07       	cpc	r21, r19
 a26:	44 f4       	brge	.+16     	; 0xa38 <fputc+0x38>
 a28:	a0 81       	ld	r26, Z
 a2a:	b1 81       	ldd	r27, Z+1	; 0x01
 a2c:	9d 01       	movw	r18, r26
 a2e:	2f 5f       	subi	r18, 0xFF	; 255
 a30:	3f 4f       	sbci	r19, 0xFF	; 255
 a32:	31 83       	std	Z+1, r19	; 0x01
 a34:	20 83       	st	Z, r18
 a36:	8c 93       	st	X, r24
 a38:	26 81       	ldd	r18, Z+6	; 0x06
 a3a:	37 81       	ldd	r19, Z+7	; 0x07
 a3c:	2f 5f       	subi	r18, 0xFF	; 255
 a3e:	3f 4f       	sbci	r19, 0xFF	; 255
 a40:	37 83       	std	Z+7, r19	; 0x07
 a42:	26 83       	std	Z+6, r18	; 0x06
 a44:	10 c0       	rjmp	.+32     	; 0xa66 <fputc+0x66>
 a46:	eb 01       	movw	r28, r22
 a48:	09 2f       	mov	r16, r25
 a4a:	18 2f       	mov	r17, r24
 a4c:	00 84       	ldd	r0, Z+8	; 0x08
 a4e:	f1 85       	ldd	r31, Z+9	; 0x09
 a50:	e0 2d       	mov	r30, r0
 a52:	09 95       	icall
 a54:	89 2b       	or	r24, r25
 a56:	e1 f6       	brne	.-72     	; 0xa10 <fputc+0x10>
 a58:	8e 81       	ldd	r24, Y+6	; 0x06
 a5a:	9f 81       	ldd	r25, Y+7	; 0x07
 a5c:	01 96       	adiw	r24, 0x01	; 1
 a5e:	9f 83       	std	Y+7, r25	; 0x07
 a60:	8e 83       	std	Y+6, r24	; 0x06
 a62:	81 2f       	mov	r24, r17
 a64:	90 2f       	mov	r25, r16
 a66:	df 91       	pop	r29
 a68:	cf 91       	pop	r28
 a6a:	1f 91       	pop	r17
 a6c:	0f 91       	pop	r16
 a6e:	08 95       	ret

00000a70 <__ultoa_invert>:
 a70:	fa 01       	movw	r30, r20
 a72:	aa 27       	eor	r26, r26
 a74:	28 30       	cpi	r18, 0x08	; 8
 a76:	51 f1       	breq	.+84     	; 0xacc <__ultoa_invert+0x5c>
 a78:	20 31       	cpi	r18, 0x10	; 16
 a7a:	81 f1       	breq	.+96     	; 0xadc <__ultoa_invert+0x6c>
 a7c:	e8 94       	clt
 a7e:	6f 93       	push	r22
 a80:	6e 7f       	andi	r22, 0xFE	; 254
 a82:	6e 5f       	subi	r22, 0xFE	; 254
 a84:	7f 4f       	sbci	r23, 0xFF	; 255
 a86:	8f 4f       	sbci	r24, 0xFF	; 255
 a88:	9f 4f       	sbci	r25, 0xFF	; 255
 a8a:	af 4f       	sbci	r26, 0xFF	; 255
 a8c:	b1 e0       	ldi	r27, 0x01	; 1
 a8e:	3e d0       	rcall	.+124    	; 0xb0c <__ultoa_invert+0x9c>
 a90:	b4 e0       	ldi	r27, 0x04	; 4
 a92:	3c d0       	rcall	.+120    	; 0xb0c <__ultoa_invert+0x9c>
 a94:	67 0f       	add	r22, r23
 a96:	78 1f       	adc	r23, r24
 a98:	89 1f       	adc	r24, r25
 a9a:	9a 1f       	adc	r25, r26
 a9c:	a1 1d       	adc	r26, r1
 a9e:	68 0f       	add	r22, r24
 aa0:	79 1f       	adc	r23, r25
 aa2:	8a 1f       	adc	r24, r26
 aa4:	91 1d       	adc	r25, r1
 aa6:	a1 1d       	adc	r26, r1
 aa8:	6a 0f       	add	r22, r26
 aaa:	71 1d       	adc	r23, r1
 aac:	81 1d       	adc	r24, r1
 aae:	91 1d       	adc	r25, r1
 ab0:	a1 1d       	adc	r26, r1
 ab2:	20 d0       	rcall	.+64     	; 0xaf4 <__ultoa_invert+0x84>
 ab4:	09 f4       	brne	.+2      	; 0xab8 <__ultoa_invert+0x48>
 ab6:	68 94       	set
 ab8:	3f 91       	pop	r19
 aba:	2a e0       	ldi	r18, 0x0A	; 10
 abc:	26 9f       	mul	r18, r22
 abe:	11 24       	eor	r1, r1
 ac0:	30 19       	sub	r19, r0
 ac2:	30 5d       	subi	r19, 0xD0	; 208
 ac4:	31 93       	st	Z+, r19
 ac6:	de f6       	brtc	.-74     	; 0xa7e <__ultoa_invert+0xe>
 ac8:	cf 01       	movw	r24, r30
 aca:	08 95       	ret
 acc:	46 2f       	mov	r20, r22
 ace:	47 70       	andi	r20, 0x07	; 7
 ad0:	40 5d       	subi	r20, 0xD0	; 208
 ad2:	41 93       	st	Z+, r20
 ad4:	b3 e0       	ldi	r27, 0x03	; 3
 ad6:	0f d0       	rcall	.+30     	; 0xaf6 <__ultoa_invert+0x86>
 ad8:	c9 f7       	brne	.-14     	; 0xacc <__ultoa_invert+0x5c>
 ada:	f6 cf       	rjmp	.-20     	; 0xac8 <__ultoa_invert+0x58>
 adc:	46 2f       	mov	r20, r22
 ade:	4f 70       	andi	r20, 0x0F	; 15
 ae0:	40 5d       	subi	r20, 0xD0	; 208
 ae2:	4a 33       	cpi	r20, 0x3A	; 58
 ae4:	18 f0       	brcs	.+6      	; 0xaec <__ultoa_invert+0x7c>
 ae6:	49 5d       	subi	r20, 0xD9	; 217
 ae8:	31 fd       	sbrc	r19, 1
 aea:	40 52       	subi	r20, 0x20	; 32
 aec:	41 93       	st	Z+, r20
 aee:	02 d0       	rcall	.+4      	; 0xaf4 <__ultoa_invert+0x84>
 af0:	a9 f7       	brne	.-22     	; 0xadc <__ultoa_invert+0x6c>
 af2:	ea cf       	rjmp	.-44     	; 0xac8 <__ultoa_invert+0x58>
 af4:	b4 e0       	ldi	r27, 0x04	; 4
 af6:	a6 95       	lsr	r26
 af8:	97 95       	ror	r25
 afa:	87 95       	ror	r24
 afc:	77 95       	ror	r23
 afe:	67 95       	ror	r22
 b00:	ba 95       	dec	r27
 b02:	c9 f7       	brne	.-14     	; 0xaf6 <__ultoa_invert+0x86>
 b04:	00 97       	sbiw	r24, 0x00	; 0
 b06:	61 05       	cpc	r22, r1
 b08:	71 05       	cpc	r23, r1
 b0a:	08 95       	ret
 b0c:	9b 01       	movw	r18, r22
 b0e:	ac 01       	movw	r20, r24
 b10:	0a 2e       	mov	r0, r26
 b12:	06 94       	lsr	r0
 b14:	57 95       	ror	r21
 b16:	47 95       	ror	r20
 b18:	37 95       	ror	r19
 b1a:	27 95       	ror	r18
 b1c:	ba 95       	dec	r27
 b1e:	c9 f7       	brne	.-14     	; 0xb12 <__ultoa_invert+0xa2>
 b20:	62 0f       	add	r22, r18
 b22:	73 1f       	adc	r23, r19
 b24:	84 1f       	adc	r24, r20
 b26:	95 1f       	adc	r25, r21
 b28:	a0 1d       	adc	r26, r0
 b2a:	08 95       	ret

00000b2c <__prologue_saves__>:
 b2c:	2f 92       	push	r2
 b2e:	3f 92       	push	r3
 b30:	4f 92       	push	r4
 b32:	5f 92       	push	r5
 b34:	6f 92       	push	r6
 b36:	7f 92       	push	r7
 b38:	8f 92       	push	r8
 b3a:	9f 92       	push	r9
 b3c:	af 92       	push	r10
 b3e:	bf 92       	push	r11
 b40:	cf 92       	push	r12
 b42:	df 92       	push	r13
 b44:	ef 92       	push	r14
 b46:	ff 92       	push	r15
 b48:	0f 93       	push	r16
 b4a:	1f 93       	push	r17
 b4c:	cf 93       	push	r28
 b4e:	df 93       	push	r29
 b50:	cd b7       	in	r28, 0x3d	; 61
 b52:	de b7       	in	r29, 0x3e	; 62
 b54:	ca 1b       	sub	r28, r26
 b56:	db 0b       	sbc	r29, r27
 b58:	0f b6       	in	r0, 0x3f	; 63
 b5a:	f8 94       	cli
 b5c:	de bf       	out	0x3e, r29	; 62
 b5e:	0f be       	out	0x3f, r0	; 63
 b60:	cd bf       	out	0x3d, r28	; 61
 b62:	09 94       	ijmp

00000b64 <__epilogue_restores__>:
 b64:	2a 88       	ldd	r2, Y+18	; 0x12
 b66:	39 88       	ldd	r3, Y+17	; 0x11
 b68:	48 88       	ldd	r4, Y+16	; 0x10
 b6a:	5f 84       	ldd	r5, Y+15	; 0x0f
 b6c:	6e 84       	ldd	r6, Y+14	; 0x0e
 b6e:	7d 84       	ldd	r7, Y+13	; 0x0d
 b70:	8c 84       	ldd	r8, Y+12	; 0x0c
 b72:	9b 84       	ldd	r9, Y+11	; 0x0b
 b74:	aa 84       	ldd	r10, Y+10	; 0x0a
 b76:	b9 84       	ldd	r11, Y+9	; 0x09
 b78:	c8 84       	ldd	r12, Y+8	; 0x08
 b7a:	df 80       	ldd	r13, Y+7	; 0x07
 b7c:	ee 80       	ldd	r14, Y+6	; 0x06
 b7e:	fd 80       	ldd	r15, Y+5	; 0x05
 b80:	0c 81       	ldd	r16, Y+4	; 0x04
 b82:	1b 81       	ldd	r17, Y+3	; 0x03
 b84:	aa 81       	ldd	r26, Y+2	; 0x02
 b86:	b9 81       	ldd	r27, Y+1	; 0x01
 b88:	ce 0f       	add	r28, r30
 b8a:	d1 1d       	adc	r29, r1
 b8c:	0f b6       	in	r0, 0x3f	; 63
 b8e:	f8 94       	cli
 b90:	de bf       	out	0x3e, r29	; 62
 b92:	0f be       	out	0x3f, r0	; 63
 b94:	cd bf       	out	0x3d, r28	; 61
 b96:	ed 01       	movw	r28, r26
 b98:	08 95       	ret

00000b9a <_exit>:
 b9a:	f8 94       	cli

00000b9c <__stop_program>:
 b9c:	ff cf       	rjmp	.-2      	; 0xb9c <__stop_program>
