
AntiFanControll.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a58  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  00000a58  00000aec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800066  00800066  00000af2  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000af2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000b50  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000128  00000000  00000000  00000b8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000bd7  00000000  00000000  00000cb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000460  00000000  00000000  0000188b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000559  00000000  00000000  00001ceb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000268  00000000  00000000  00002244  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003c5  00000000  00000000  000024ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003a8  00000000  00000000  00002871  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  00002c19  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 01 02 	jmp	0x402	; 0x402 <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 17 02 	jmp	0x42e	; 0x42e <__vector_14>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e5       	ldi	r30, 0x58	; 88
  68:	fa e0       	ldi	r31, 0x0A	; 10
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 36       	cpi	r26, 0x66	; 102
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a6 e6       	ldi	r26, 0x66	; 102
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 36       	cpi	r26, 0x6A	; 106
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 8f 01 	call	0x31e	; 0x31e <main>
  8a:	0c 94 2a 05 	jmp	0xa54	; 0xa54 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <setBarMeter>:
  92:	2b b3       	in	r18, 0x1b	; 27
  94:	2f 70       	andi	r18, 0x0F	; 15
  96:	2b bb       	out	0x1b, r18	; 27
  98:	84 33       	cpi	r24, 0x34	; 52
  9a:	91 05       	cpc	r25, r1
  9c:	08 f0       	brcs	.+2      	; 0xa0 <setBarMeter+0xe>
  9e:	dc 9a       	sbi	0x1b, 4	; 27
  a0:	87 36       	cpi	r24, 0x67	; 103
  a2:	91 05       	cpc	r25, r1
  a4:	18 f0       	brcs	.+6      	; 0xac <setBarMeter+0x1a>
  a6:	2b b3       	in	r18, 0x1b	; 27
  a8:	20 63       	ori	r18, 0x30	; 48
  aa:	2b bb       	out	0x1b, r18	; 27
  ac:	8a 39       	cpi	r24, 0x9A	; 154
  ae:	91 05       	cpc	r25, r1
  b0:	18 f0       	brcs	.+6      	; 0xb8 <setBarMeter+0x26>
  b2:	2b b3       	in	r18, 0x1b	; 27
  b4:	20 67       	ori	r18, 0x70	; 112
  b6:	2b bb       	out	0x1b, r18	; 27
  b8:	8d 3c       	cpi	r24, 0xCD	; 205
  ba:	91 05       	cpc	r25, r1
  bc:	18 f0       	brcs	.+6      	; 0xc4 <setBarMeter+0x32>
  be:	8b b3       	in	r24, 0x1b	; 27
  c0:	80 6f       	ori	r24, 0xF0	; 240
  c2:	8b bb       	out	0x1b, r24	; 27
  c4:	08 95       	ret

000000c6 <initBarMeter>:
  c6:	8a b3       	in	r24, 0x1a	; 26
  c8:	80 6f       	ori	r24, 0xF0	; 240
  ca:	8a bb       	out	0x1a, r24	; 26
  cc:	dc 98       	cbi	0x1b, 4	; 27
  ce:	08 95       	ret

000000d0 <toggleEnable>:
  d0:	c3 9a       	sbi	0x18, 3	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d2:	85 e8       	ldi	r24, 0x85	; 133
  d4:	8a 95       	dec	r24
  d6:	f1 f7       	brne	.-4      	; 0xd4 <toggleEnable+0x4>
  d8:	00 00       	nop
  da:	c3 98       	cbi	0x18, 3	; 24
  dc:	08 95       	ret

000000de <setRS>:
  de:	c2 9a       	sbi	0x18, 2	; 24
  e0:	08 95       	ret

000000e2 <resetRS>:
  e2:	c2 98       	cbi	0x18, 2	; 24
  e4:	08 95       	ret

000000e6 <write4Bit>:
  e6:	98 b3       	in	r25, 0x18	; 24
  e8:	9f 70       	andi	r25, 0x0F	; 15
  ea:	98 bb       	out	0x18, r25	; 24
  ec:	28 b3       	in	r18, 0x18	; 24
  ee:	30 e1       	ldi	r19, 0x10	; 16
  f0:	83 9f       	mul	r24, r19
  f2:	c0 01       	movw	r24, r0
  f4:	11 24       	eor	r1, r1
  f6:	82 2b       	or	r24, r18
  f8:	88 bb       	out	0x18, r24	; 24
  fa:	0e 94 68 00 	call	0xd0	; 0xd0 <toggleEnable>
  fe:	08 95       	ret

00000100 <writeCommand>:
 100:	cf 93       	push	r28
 102:	c8 2f       	mov	r28, r24
 104:	0e 94 71 00 	call	0xe2	; 0xe2 <resetRS>
 108:	8c 2f       	mov	r24, r28
 10a:	82 95       	swap	r24
 10c:	8f 70       	andi	r24, 0x0F	; 15
 10e:	0e 94 73 00 	call	0xe6	; 0xe6 <write4Bit>
 112:	8c 2f       	mov	r24, r28
 114:	8f 70       	andi	r24, 0x0F	; 15
 116:	0e 94 73 00 	call	0xe6	; 0xe6 <write4Bit>
 11a:	cf 91       	pop	r28
 11c:	08 95       	ret

0000011e <setCursorToHome>:
 11e:	82 e0       	ldi	r24, 0x02	; 2
 120:	0e 94 80 00 	call	0x100	; 0x100 <writeCommand>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 124:	8f e9       	ldi	r24, 0x9F	; 159
 126:	9f e0       	ldi	r25, 0x0F	; 15
 128:	01 97       	sbiw	r24, 0x01	; 1
 12a:	f1 f7       	brne	.-4      	; 0x128 <setCursorToHome+0xa>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <setCursorToHome+0x10>
 12e:	00 00       	nop
 130:	08 95       	ret

00000132 <setCursor2Line>:
 132:	80 ec       	ldi	r24, 0xC0	; 192
 134:	0e 94 80 00 	call	0x100	; 0x100 <writeCommand>
 138:	8f ec       	ldi	r24, 0xCF	; 207
 13a:	97 e0       	ldi	r25, 0x07	; 7
 13c:	01 97       	sbiw	r24, 0x01	; 1
 13e:	f1 f7       	brne	.-4      	; 0x13c <setCursor2Line+0xa>
 140:	00 c0       	rjmp	.+0      	; 0x142 <setCursor2Line+0x10>
 142:	00 00       	nop
 144:	08 95       	ret

00000146 <writeData>:
 146:	cf 93       	push	r28
 148:	c8 2f       	mov	r28, r24
 14a:	0e 94 6f 00 	call	0xde	; 0xde <setRS>
 14e:	8c 2f       	mov	r24, r28
 150:	82 95       	swap	r24
 152:	8f 70       	andi	r24, 0x0F	; 15
 154:	0e 94 73 00 	call	0xe6	; 0xe6 <write4Bit>
 158:	8c 2f       	mov	r24, r28
 15a:	8f 70       	andi	r24, 0x0F	; 15
 15c:	0e 94 73 00 	call	0xe6	; 0xe6 <write4Bit>
 160:	0e 94 71 00 	call	0xe2	; 0xe2 <resetRS>
 164:	cf 91       	pop	r28
 166:	08 95       	ret

00000168 <clearDisplay>:
 168:	80 e0       	ldi	r24, 0x00	; 0
 16a:	0e 94 80 00 	call	0x100	; 0x100 <writeCommand>
 16e:	8f e6       	ldi	r24, 0x6F	; 111
 170:	97 e1       	ldi	r25, 0x17	; 23
 172:	01 97       	sbiw	r24, 0x01	; 1
 174:	f1 f7       	brne	.-4      	; 0x172 <clearDisplay+0xa>
 176:	00 c0       	rjmp	.+0      	; 0x178 <clearDisplay+0x10>
 178:	00 00       	nop
 17a:	81 e0       	ldi	r24, 0x01	; 1
 17c:	0e 94 80 00 	call	0x100	; 0x100 <writeCommand>
 180:	8f e6       	ldi	r24, 0x6F	; 111
 182:	97 e1       	ldi	r25, 0x17	; 23
 184:	01 97       	sbiw	r24, 0x01	; 1
 186:	f1 f7       	brne	.-4      	; 0x184 <clearDisplay+0x1c>
 188:	00 c0       	rjmp	.+0      	; 0x18a <clearDisplay+0x22>
 18a:	00 00       	nop
 18c:	08 95       	ret

0000018e <initDisplay>:
 18e:	87 b3       	in	r24, 0x17	; 23
 190:	8c 6f       	ori	r24, 0xFC	; 252
 192:	87 bb       	out	0x17, r24	; 23
 194:	0e 94 71 00 	call	0xe2	; 0xe2 <resetRS>
 198:	88 b3       	in	r24, 0x18	; 24
 19a:	80 63       	ori	r24, 0x30	; 48
 19c:	88 bb       	out	0x18, r24	; 24
 19e:	88 b3       	in	r24, 0x18	; 24
 1a0:	8f 73       	andi	r24, 0x3F	; 63
 1a2:	88 bb       	out	0x18, r24	; 24
 1a4:	8f e2       	ldi	r24, 0x2F	; 47
 1a6:	95 e7       	ldi	r25, 0x75	; 117
 1a8:	01 97       	sbiw	r24, 0x01	; 1
 1aa:	f1 f7       	brne	.-4      	; 0x1a8 <initDisplay+0x1a>
 1ac:	00 c0       	rjmp	.+0      	; 0x1ae <initDisplay+0x20>
 1ae:	00 00       	nop
 1b0:	0e 94 68 00 	call	0xd0	; 0xd0 <toggleEnable>
 1b4:	8f e0       	ldi	r24, 0x0F	; 15
 1b6:	97 e2       	ldi	r25, 0x27	; 39
 1b8:	01 97       	sbiw	r24, 0x01	; 1
 1ba:	f1 f7       	brne	.-4      	; 0x1b8 <initDisplay+0x2a>
 1bc:	00 c0       	rjmp	.+0      	; 0x1be <initDisplay+0x30>
 1be:	00 00       	nop
 1c0:	0e 94 68 00 	call	0xd0	; 0xd0 <toggleEnable>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1c4:	8f e8       	ldi	r24, 0x8F	; 143
 1c6:	91 e0       	ldi	r25, 0x01	; 1
 1c8:	01 97       	sbiw	r24, 0x01	; 1
 1ca:	f1 f7       	brne	.-4      	; 0x1c8 <initDisplay+0x3a>
 1cc:	00 c0       	rjmp	.+0      	; 0x1ce <initDisplay+0x40>
 1ce:	00 00       	nop
 1d0:	0e 94 68 00 	call	0xd0	; 0xd0 <toggleEnable>
 1d4:	c5 9a       	sbi	0x18, 5	; 24
 1d6:	88 b3       	in	r24, 0x18	; 24
 1d8:	8f 72       	andi	r24, 0x2F	; 47
 1da:	88 bb       	out	0x18, r24	; 24
 1dc:	0e 94 68 00 	call	0xd0	; 0xd0 <toggleEnable>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1e0:	8f e6       	ldi	r24, 0x6F	; 111
 1e2:	97 e1       	ldi	r25, 0x17	; 23
 1e4:	01 97       	sbiw	r24, 0x01	; 1
 1e6:	f1 f7       	brne	.-4      	; 0x1e4 <initDisplay+0x56>
 1e8:	00 c0       	rjmp	.+0      	; 0x1ea <initDisplay+0x5c>
 1ea:	00 00       	nop
 1ec:	8c e2       	ldi	r24, 0x2C	; 44
 1ee:	0e 94 80 00 	call	0x100	; 0x100 <writeCommand>
 1f2:	8e e0       	ldi	r24, 0x0E	; 14
 1f4:	0e 94 80 00 	call	0x100	; 0x100 <writeCommand>
 1f8:	0e 94 b4 00 	call	0x168	; 0x168 <clearDisplay>
 1fc:	08 95       	ret

000001fe <writeCharArray>:
 1fe:	0f 93       	push	r16
 200:	1f 93       	push	r17
 202:	cf 93       	push	r28
 204:	df 93       	push	r29
 206:	16 16       	cp	r1, r22
 208:	17 06       	cpc	r1, r23
 20a:	54 f4       	brge	.+20     	; 0x220 <writeCharArray+0x22>
 20c:	8c 01       	movw	r16, r24
 20e:	ec 01       	movw	r28, r24
 210:	06 0f       	add	r16, r22
 212:	17 1f       	adc	r17, r23
 214:	89 91       	ld	r24, Y+
 216:	0e 94 a3 00 	call	0x146	; 0x146 <writeData>
 21a:	c0 17       	cp	r28, r16
 21c:	d1 07       	cpc	r29, r17
 21e:	d1 f7       	brne	.-12     	; 0x214 <writeCharArray+0x16>
 220:	df 91       	pop	r29
 222:	cf 91       	pop	r28
 224:	1f 91       	pop	r17
 226:	0f 91       	pop	r16
 228:	08 95       	ret

0000022a <initRPM>:
unsigned short actualFanSpeedMeasured = 0;
unsigned short potiValueMeasured = 0;

void initRPM()
{
	GICR = 1<<INT0;					// Enable INT0
 22a:	80 e4       	ldi	r24, 0x40	; 64
 22c:	8b bf       	out	0x3b, r24	; 59
	MCUCR |= 1<<ISC01;				// Trigger INT0 on falling edge
 22e:	85 b7       	in	r24, 0x35	; 53
 230:	82 60       	ori	r24, 0x02	; 2
 232:	85 bf       	out	0x35, r24	; 53
	MCUCR &= ~(1<<ISC00);
 234:	85 b7       	in	r24, 0x35	; 53
 236:	8e 7f       	andi	r24, 0xFE	; 254
 238:	85 bf       	out	0x35, r24	; 53
 23a:	08 95       	ret

0000023c <initTimer1>:
}

void initTimer1(void)
{
	//Normal-Mode
	TCCR1A &= ~((1 << WGM10) | (1 << WGM11));
 23c:	8f b5       	in	r24, 0x2f	; 47
 23e:	8c 7f       	andi	r24, 0xFC	; 252
 240:	8f bd       	out	0x2f, r24	; 47
	TCCR1B &= ~((1 << WGM12) | (1 << WGM13));
 242:	8e b5       	in	r24, 0x2e	; 46
 244:	87 7e       	andi	r24, 0xE7	; 231
 246:	8e bd       	out	0x2e, r24	; 46
	
	//Prescaler 64
	TCCR1B |= ((1 << CS10) | (1 << CS11));
 248:	8e b5       	in	r24, 0x2e	; 46
 24a:	83 60       	ori	r24, 0x03	; 3
 24c:	8e bd       	out	0x2e, r24	; 46
	TCCR1B &= ~((1 << CS12));
 24e:	8e b5       	in	r24, 0x2e	; 46
 250:	8b 7f       	andi	r24, 0xFB	; 251
 252:	8e bd       	out	0x2e, r24	; 46
	
	TCNT1 = 0;
 254:	1d bc       	out	0x2d, r1	; 45
 256:	1c bc       	out	0x2c, r1	; 44
 258:	08 95       	ret

0000025a <initADC>:
	
}

void initADC()
{
	DDRA &= ~(1<<PA0);
 25a:	d0 98       	cbi	0x1a, 0	; 26
	ADMUX &= ~((1<<MUX0) | (1<<MUX1) | (1<<MUX2) | (1<<MUX3) | (1<<MUX4));	// ADC input channel set to PA0
 25c:	87 b1       	in	r24, 0x07	; 7
 25e:	80 7e       	andi	r24, 0xE0	; 224
 260:	87 b9       	out	0x07, r24	; 7
	
	ADMUX &=~(1<<REFS1);
 262:	3f 98       	cbi	0x07, 7	; 7
	ADMUX |= (1<<REFS0);
 264:	3e 9a       	sbi	0x07, 6	; 7
	ADCSRA |= (1<<ADEN);
 266:	37 9a       	sbi	0x06, 7	; 6

	ADCSRA &= ~(1<<ADPS0);	//Prescaler 64
 268:	30 98       	cbi	0x06, 0	; 6
	ADCSRA |= ((1<<ADPS1)|(1<<ADPS2));
 26a:	86 b1       	in	r24, 0x06	; 6
 26c:	86 60       	ori	r24, 0x06	; 6
 26e:	86 b9       	out	0x06, r24	; 6

	ADMUX |=(1<<ADLAR);
 270:	3d 9a       	sbi	0x07, 5	; 7
 272:	08 95       	ret

00000274 <readADC>:
}

void readADC()
{
	if(!(ADCSRA & (1<<ADSC)))	//still converting
 274:	36 99       	sbic	0x06, 6	; 6
 276:	07 c0       	rjmp	.+14     	; 0x286 <readADC+0x12>
	{
		potiValueMeasured = ADCH;
 278:	85 b1       	in	r24, 0x05	; 5
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	90 93 67 00 	sts	0x0067, r25
 280:	80 93 66 00 	sts	0x0066, r24
		ADCSRA |= (1<<ADSC);	//restart
 284:	36 9a       	sbi	0x06, 6	; 6
 286:	08 95       	ret

00000288 <initPWM2>:
	}
}

void initPWM2()
{
	DDRD |= 1<<PD7;	//set pin to output
 288:	8f 9a       	sbi	0x11, 7	; 17

	TCCR2 |= (1<<WGM21)|(1<<WGM20);	//set fastPWM
 28a:	85 b5       	in	r24, 0x25	; 37
 28c:	88 64       	ori	r24, 0x48	; 72
 28e:	85 bd       	out	0x25, r24	; 37
	OCR2 = 255;	//set compare register
 290:	8f ef       	ldi	r24, 0xFF	; 255
 292:	83 bd       	out	0x23, r24	; 35
	
	TCCR2 &= ~ ((1<<CS21)|(1<<CS22));	//prescaler = 1;
 294:	85 b5       	in	r24, 0x25	; 37
 296:	89 7f       	andi	r24, 0xF9	; 249
 298:	85 bd       	out	0x25, r24	; 37
	TCCR2 |= (1<<CS20);
 29a:	85 b5       	in	r24, 0x25	; 37
 29c:	81 60       	ori	r24, 0x01	; 1
 29e:	85 bd       	out	0x25, r24	; 37
	TCCR2 |= (1<<COM21);	//Clear OC2 on compare match, set OC2 at BOTTOM,
 2a0:	85 b5       	in	r24, 0x25	; 37
 2a2:	80 62       	ori	r24, 0x20	; 32
 2a4:	85 bd       	out	0x25, r24	; 37
	TCCR2 &= ~ (1<<COM20);
 2a6:	85 b5       	in	r24, 0x25	; 37
 2a8:	8f 7e       	andi	r24, 0xEF	; 239
 2aa:	85 bd       	out	0x25, r24	; 37
 2ac:	08 95       	ret

000002ae <initUART>:
	// Set frame format: 8data, 1stop bit
	
	//UBRRH = (uint8_t) (MYUBRR>>8);
	//UBRRL = (uint8_t) MYUBRR;
	
	UBRRL = 51;
 2ae:	83 e3       	ldi	r24, 0x33	; 51
 2b0:	89 b9       	out	0x09, r24	; 9
	UBRRH = 0;
 2b2:	10 bc       	out	0x20, r1	; 32
	
	UCSRB |= (1<<TXEN) | (1<<TXCIE);								// Enable transmitter & interrupt on finish,     (1<<RXEN) for receiver
 2b4:	8a b1       	in	r24, 0x0a	; 10
 2b6:	88 64       	ori	r24, 0x48	; 72
 2b8:	8a b9       	out	0x0a, r24	; 10
	//UCSRB |= (1<<UCSZ1) | (1<<UCSZ0);								//UCSZ1,0 set to 1 UCSZ2 set to 0 for 8bit data
	
	UCSRC = (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1);	//Asynchron 8N1
 2ba:	86 e8       	ldi	r24, 0x86	; 134
 2bc:	80 bd       	out	0x20, r24	; 32
 2be:	08 95       	ret

000002c0 <writeIntToDisplay>:
{
	writeCharArray(s, sizeof(s)/sizeof(s[0]));
}

void writeIntToDisplay(int value)
{
 2c0:	0f 93       	push	r16
 2c2:	1f 93       	push	r17
 2c4:	cf 93       	push	r28
 2c6:	df 93       	push	r29
 2c8:	cd b7       	in	r28, 0x3d	; 61
 2ca:	de b7       	in	r29, 0x3e	; 62
 2cc:	2f 97       	sbiw	r28, 0x0f	; 15
 2ce:	0f b6       	in	r0, 0x3f	; 63
 2d0:	f8 94       	cli
 2d2:	de bf       	out	0x3e, r29	; 62
 2d4:	0f be       	out	0x3f, r0	; 63
 2d6:	cd bf       	out	0x3d, r28	; 61
	char tempString[15];
	sprintf(tempString,"%15u", value);	
 2d8:	9f 93       	push	r25
 2da:	8f 93       	push	r24
 2dc:	80 e6       	ldi	r24, 0x60	; 96
 2de:	90 e0       	ldi	r25, 0x00	; 0
 2e0:	9f 93       	push	r25
 2e2:	8f 93       	push	r24
 2e4:	8e 01       	movw	r16, r28
 2e6:	0f 5f       	subi	r16, 0xFF	; 255
 2e8:	1f 4f       	sbci	r17, 0xFF	; 255
 2ea:	1f 93       	push	r17
 2ec:	0f 93       	push	r16
 2ee:	0e 94 52 02 	call	0x4a4	; 0x4a4 <sprintf>

	writeCharArray(tempString, sizeof(tempString)/sizeof(tempString[0]));
 2f2:	6f e0       	ldi	r22, 0x0F	; 15
 2f4:	70 e0       	ldi	r23, 0x00	; 0
 2f6:	c8 01       	movw	r24, r16
 2f8:	0e 94 ff 00 	call	0x1fe	; 0x1fe <writeCharArray>
 2fc:	0f 90       	pop	r0
 2fe:	0f 90       	pop	r0
 300:	0f 90       	pop	r0
 302:	0f 90       	pop	r0
 304:	0f 90       	pop	r0
 306:	0f 90       	pop	r0
}
 308:	2f 96       	adiw	r28, 0x0f	; 15
 30a:	0f b6       	in	r0, 0x3f	; 63
 30c:	f8 94       	cli
 30e:	de bf       	out	0x3e, r29	; 62
 310:	0f be       	out	0x3f, r0	; 63
 312:	cd bf       	out	0x3d, r28	; 61
 314:	df 91       	pop	r29
 316:	cf 91       	pop	r28
 318:	1f 91       	pop	r17
 31a:	0f 91       	pop	r16
 31c:	08 95       	ret

0000031e <main>:

int main(void)
{
	initBarMeter();
 31e:	0e 94 63 00 	call	0xc6	; 0xc6 <initBarMeter>
	initDisplay();
 322:	0e 94 c7 00 	call	0x18e	; 0x18e <initDisplay>
	initRPM();
 326:	0e 94 15 01 	call	0x22a	; 0x22a <initRPM>
	initTimer1();
 32a:	0e 94 1e 01 	call	0x23c	; 0x23c <initTimer1>
	initADC();
 32e:	0e 94 2d 01 	call	0x25a	; 0x25a <initADC>
	initPWM2();
 332:	0e 94 44 01 	call	0x288	; 0x288 <initPWM2>
	initUART();	
 336:	0e 94 57 01 	call	0x2ae	; 0x2ae <initUART>
	
	sei();
 33a:	78 94       	sei
		
		setBarMeter(potiValueMeasured);
		
		readADC();
		setCursorToHome();
		writeIntToDisplay((60000000UL/((unsigned long)16*(unsigned long)actualFanSpeedMeasured)));	//Print RPM 
 33c:	0f 2e       	mov	r0, r31
 33e:	c1 2c       	mov	r12, r1
 340:	f7 e8       	ldi	r31, 0x87	; 135
 342:	df 2e       	mov	r13, r31
 344:	f3 e9       	ldi	r31, 0x93	; 147
 346:	ef 2e       	mov	r14, r31
 348:	f3 e0       	ldi	r31, 0x03	; 3
 34a:	ff 2e       	mov	r15, r31
 34c:	f0 2d       	mov	r31, r0
		setCursor2Line();
		writeIntToDisplay((potiValueMeasured*100)/255);	//Print Duty
 34e:	14 e6       	ldi	r17, 0x64	; 100
		setCursor2Line();
		writeIntToDisplay(8 * (unsigned long)actualFanSpeedMeasured);	//Print pulse time
		OCR2 = potiValueMeasured;
 350:	c6 e6       	ldi	r28, 0x66	; 102
 352:	d0 e0       	ldi	r29, 0x00	; 0
		/*if(uartStringEmpty == 1){
			initUartString("lol");
			sendUartChar();
		}*/
		
		setBarMeter(potiValueMeasured);
 354:	80 91 66 00 	lds	r24, 0x0066
 358:	90 91 67 00 	lds	r25, 0x0067
 35c:	0e 94 49 00 	call	0x92	; 0x92 <setBarMeter>
		
		readADC();
 360:	0e 94 3a 01 	call	0x274	; 0x274 <readADC>
		setCursorToHome();
 364:	0e 94 8f 00 	call	0x11e	; 0x11e <setCursorToHome>
		writeIntToDisplay((60000000UL/((unsigned long)16*(unsigned long)actualFanSpeedMeasured)));	//Print RPM 
 368:	20 91 68 00 	lds	r18, 0x0068
 36c:	30 91 69 00 	lds	r19, 0x0069
 370:	c9 01       	movw	r24, r18
 372:	a0 e0       	ldi	r26, 0x00	; 0
 374:	b0 e0       	ldi	r27, 0x00	; 0
 376:	88 0f       	add	r24, r24
 378:	99 1f       	adc	r25, r25
 37a:	aa 1f       	adc	r26, r26
 37c:	bb 1f       	adc	r27, r27
 37e:	88 0f       	add	r24, r24
 380:	99 1f       	adc	r25, r25
 382:	aa 1f       	adc	r26, r26
 384:	bb 1f       	adc	r27, r27
 386:	9c 01       	movw	r18, r24
 388:	ad 01       	movw	r20, r26
 38a:	22 0f       	add	r18, r18
 38c:	33 1f       	adc	r19, r19
 38e:	44 1f       	adc	r20, r20
 390:	55 1f       	adc	r21, r21
 392:	22 0f       	add	r18, r18
 394:	33 1f       	adc	r19, r19
 396:	44 1f       	adc	r20, r20
 398:	55 1f       	adc	r21, r21
 39a:	c7 01       	movw	r24, r14
 39c:	b6 01       	movw	r22, r12
 39e:	0e 94 21 02 	call	0x442	; 0x442 <__udivmodsi4>
 3a2:	c9 01       	movw	r24, r18
 3a4:	0e 94 60 01 	call	0x2c0	; 0x2c0 <writeIntToDisplay>
		setCursor2Line();
 3a8:	0e 94 99 00 	call	0x132	; 0x132 <setCursor2Line>
		writeIntToDisplay((potiValueMeasured*100)/255);	//Print Duty
 3ac:	80 91 66 00 	lds	r24, 0x0066
 3b0:	90 91 67 00 	lds	r25, 0x0067
 3b4:	18 9f       	mul	r17, r24
 3b6:	90 01       	movw	r18, r0
 3b8:	19 9f       	mul	r17, r25
 3ba:	30 0d       	add	r19, r0
 3bc:	11 24       	eor	r1, r1
 3be:	a1 e8       	ldi	r26, 0x81	; 129
 3c0:	b0 e8       	ldi	r27, 0x80	; 128
 3c2:	0e 94 43 02 	call	0x486	; 0x486 <__umulhisi3>
 3c6:	88 0f       	add	r24, r24
 3c8:	89 2f       	mov	r24, r25
 3ca:	88 1f       	adc	r24, r24
 3cc:	99 0b       	sbc	r25, r25
 3ce:	91 95       	neg	r25
 3d0:	0e 94 60 01 	call	0x2c0	; 0x2c0 <writeIntToDisplay>
		setCursor2Line();
 3d4:	0e 94 99 00 	call	0x132	; 0x132 <setCursor2Line>
		writeIntToDisplay(8 * (unsigned long)actualFanSpeedMeasured);	//Print pulse time
 3d8:	80 91 68 00 	lds	r24, 0x0068
 3dc:	90 91 69 00 	lds	r25, 0x0069
 3e0:	88 0f       	add	r24, r24
 3e2:	99 1f       	adc	r25, r25
 3e4:	88 0f       	add	r24, r24
 3e6:	99 1f       	adc	r25, r25
 3e8:	88 0f       	add	r24, r24
 3ea:	99 1f       	adc	r25, r25
 3ec:	0e 94 60 01 	call	0x2c0	; 0x2c0 <writeIntToDisplay>
		OCR2 = potiValueMeasured;
 3f0:	88 81       	ld	r24, Y
 3f2:	83 bd       	out	0x23, r24	; 35
 3f4:	8f e1       	ldi	r24, 0x1F	; 31
 3f6:	9e e4       	ldi	r25, 0x4E	; 78
 3f8:	01 97       	sbiw	r24, 0x01	; 1
 3fa:	f1 f7       	brne	.-4      	; 0x3f8 <main+0xda>
 3fc:	00 c0       	rjmp	.+0      	; 0x3fe <main+0xe0>
 3fe:	00 00       	nop
 400:	a9 cf       	rjmp	.-174    	; 0x354 <main+0x36>

00000402 <__vector_1>:
	
	return 0;
}

ISR(INT0_vect)
{
 402:	1f 92       	push	r1
 404:	0f 92       	push	r0
 406:	0f b6       	in	r0, 0x3f	; 63
 408:	0f 92       	push	r0
 40a:	11 24       	eor	r1, r1
 40c:	8f 93       	push	r24
 40e:	9f 93       	push	r25
	actualFanSpeedMeasured = TCNT1;
 410:	8c b5       	in	r24, 0x2c	; 44
 412:	9d b5       	in	r25, 0x2d	; 45
 414:	90 93 69 00 	sts	0x0069, r25
 418:	80 93 68 00 	sts	0x0068, r24
	TCNT1 = 0x00;
 41c:	1d bc       	out	0x2d, r1	; 45
 41e:	1c bc       	out	0x2c, r1	; 44
}
 420:	9f 91       	pop	r25
 422:	8f 91       	pop	r24
 424:	0f 90       	pop	r0
 426:	0f be       	out	0x3f, r0	; 63
 428:	0f 90       	pop	r0
 42a:	1f 90       	pop	r1
 42c:	18 95       	reti

0000042e <__vector_14>:


ISR(USART_UDRE_vect)	//UART has Transmitted
{
 42e:	1f 92       	push	r1
 430:	0f 92       	push	r0
 432:	0f b6       	in	r0, 0x3f	; 63
 434:	0f 92       	push	r0
 436:	11 24       	eor	r1, r1
	
}
 438:	0f 90       	pop	r0
 43a:	0f be       	out	0x3f, r0	; 63
 43c:	0f 90       	pop	r0
 43e:	1f 90       	pop	r1
 440:	18 95       	reti

00000442 <__udivmodsi4>:
 442:	a1 e2       	ldi	r26, 0x21	; 33
 444:	1a 2e       	mov	r1, r26
 446:	aa 1b       	sub	r26, r26
 448:	bb 1b       	sub	r27, r27
 44a:	fd 01       	movw	r30, r26
 44c:	0d c0       	rjmp	.+26     	; 0x468 <__udivmodsi4_ep>

0000044e <__udivmodsi4_loop>:
 44e:	aa 1f       	adc	r26, r26
 450:	bb 1f       	adc	r27, r27
 452:	ee 1f       	adc	r30, r30
 454:	ff 1f       	adc	r31, r31
 456:	a2 17       	cp	r26, r18
 458:	b3 07       	cpc	r27, r19
 45a:	e4 07       	cpc	r30, r20
 45c:	f5 07       	cpc	r31, r21
 45e:	20 f0       	brcs	.+8      	; 0x468 <__udivmodsi4_ep>
 460:	a2 1b       	sub	r26, r18
 462:	b3 0b       	sbc	r27, r19
 464:	e4 0b       	sbc	r30, r20
 466:	f5 0b       	sbc	r31, r21

00000468 <__udivmodsi4_ep>:
 468:	66 1f       	adc	r22, r22
 46a:	77 1f       	adc	r23, r23
 46c:	88 1f       	adc	r24, r24
 46e:	99 1f       	adc	r25, r25
 470:	1a 94       	dec	r1
 472:	69 f7       	brne	.-38     	; 0x44e <__udivmodsi4_loop>
 474:	60 95       	com	r22
 476:	70 95       	com	r23
 478:	80 95       	com	r24
 47a:	90 95       	com	r25
 47c:	9b 01       	movw	r18, r22
 47e:	ac 01       	movw	r20, r24
 480:	bd 01       	movw	r22, r26
 482:	cf 01       	movw	r24, r30
 484:	08 95       	ret

00000486 <__umulhisi3>:
 486:	a2 9f       	mul	r26, r18
 488:	b0 01       	movw	r22, r0
 48a:	b3 9f       	mul	r27, r19
 48c:	c0 01       	movw	r24, r0
 48e:	a3 9f       	mul	r26, r19
 490:	70 0d       	add	r23, r0
 492:	81 1d       	adc	r24, r1
 494:	11 24       	eor	r1, r1
 496:	91 1d       	adc	r25, r1
 498:	b2 9f       	mul	r27, r18
 49a:	70 0d       	add	r23, r0
 49c:	81 1d       	adc	r24, r1
 49e:	11 24       	eor	r1, r1
 4a0:	91 1d       	adc	r25, r1
 4a2:	08 95       	ret

000004a4 <sprintf>:
 4a4:	ae e0       	ldi	r26, 0x0E	; 14
 4a6:	b0 e0       	ldi	r27, 0x00	; 0
 4a8:	e8 e5       	ldi	r30, 0x58	; 88
 4aa:	f2 e0       	ldi	r31, 0x02	; 2
 4ac:	0c 94 01 05 	jmp	0xa02	; 0xa02 <__prologue_saves__+0x1c>
 4b0:	0d 89       	ldd	r16, Y+21	; 0x15
 4b2:	1e 89       	ldd	r17, Y+22	; 0x16
 4b4:	86 e0       	ldi	r24, 0x06	; 6
 4b6:	8c 83       	std	Y+4, r24	; 0x04
 4b8:	1a 83       	std	Y+2, r17	; 0x02
 4ba:	09 83       	std	Y+1, r16	; 0x01
 4bc:	8f ef       	ldi	r24, 0xFF	; 255
 4be:	9f e7       	ldi	r25, 0x7F	; 127
 4c0:	9e 83       	std	Y+6, r25	; 0x06
 4c2:	8d 83       	std	Y+5, r24	; 0x05
 4c4:	ae 01       	movw	r20, r28
 4c6:	47 5e       	subi	r20, 0xE7	; 231
 4c8:	5f 4f       	sbci	r21, 0xFF	; 255
 4ca:	6f 89       	ldd	r22, Y+23	; 0x17
 4cc:	78 8d       	ldd	r23, Y+24	; 0x18
 4ce:	ce 01       	movw	r24, r28
 4d0:	01 96       	adiw	r24, 0x01	; 1
 4d2:	0e 94 75 02 	call	0x4ea	; 0x4ea <vfprintf>
 4d6:	2f 81       	ldd	r18, Y+7	; 0x07
 4d8:	38 85       	ldd	r19, Y+8	; 0x08
 4da:	f8 01       	movw	r30, r16
 4dc:	e2 0f       	add	r30, r18
 4de:	f3 1f       	adc	r31, r19
 4e0:	10 82       	st	Z, r1
 4e2:	2e 96       	adiw	r28, 0x0e	; 14
 4e4:	e4 e0       	ldi	r30, 0x04	; 4
 4e6:	0c 94 1d 05 	jmp	0xa3a	; 0xa3a <__epilogue_restores__+0x1c>

000004ea <vfprintf>:
 4ea:	ac e0       	ldi	r26, 0x0C	; 12
 4ec:	b0 e0       	ldi	r27, 0x00	; 0
 4ee:	eb e7       	ldi	r30, 0x7B	; 123
 4f0:	f2 e0       	ldi	r31, 0x02	; 2
 4f2:	0c 94 f3 04 	jmp	0x9e6	; 0x9e6 <__prologue_saves__>
 4f6:	7c 01       	movw	r14, r24
 4f8:	6b 01       	movw	r12, r22
 4fa:	8a 01       	movw	r16, r20
 4fc:	fc 01       	movw	r30, r24
 4fe:	17 82       	std	Z+7, r1	; 0x07
 500:	16 82       	std	Z+6, r1	; 0x06
 502:	83 81       	ldd	r24, Z+3	; 0x03
 504:	81 ff       	sbrs	r24, 1
 506:	bd c1       	rjmp	.+890    	; 0x882 <__stack+0x23>
 508:	ce 01       	movw	r24, r28
 50a:	01 96       	adiw	r24, 0x01	; 1
 50c:	4c 01       	movw	r8, r24
 50e:	f7 01       	movw	r30, r14
 510:	93 81       	ldd	r25, Z+3	; 0x03
 512:	f6 01       	movw	r30, r12
 514:	93 fd       	sbrc	r25, 3
 516:	85 91       	lpm	r24, Z+
 518:	93 ff       	sbrs	r25, 3
 51a:	81 91       	ld	r24, Z+
 51c:	6f 01       	movw	r12, r30
 51e:	88 23       	and	r24, r24
 520:	09 f4       	brne	.+2      	; 0x524 <vfprintf+0x3a>
 522:	ab c1       	rjmp	.+854    	; 0x87a <__stack+0x1b>
 524:	85 32       	cpi	r24, 0x25	; 37
 526:	39 f4       	brne	.+14     	; 0x536 <vfprintf+0x4c>
 528:	93 fd       	sbrc	r25, 3
 52a:	85 91       	lpm	r24, Z+
 52c:	93 ff       	sbrs	r25, 3
 52e:	81 91       	ld	r24, Z+
 530:	6f 01       	movw	r12, r30
 532:	85 32       	cpi	r24, 0x25	; 37
 534:	29 f4       	brne	.+10     	; 0x540 <vfprintf+0x56>
 536:	b7 01       	movw	r22, r14
 538:	90 e0       	ldi	r25, 0x00	; 0
 53a:	0e 94 5d 04 	call	0x8ba	; 0x8ba <fputc>
 53e:	e7 cf       	rjmp	.-50     	; 0x50e <vfprintf+0x24>
 540:	51 2c       	mov	r5, r1
 542:	31 2c       	mov	r3, r1
 544:	20 e0       	ldi	r18, 0x00	; 0
 546:	20 32       	cpi	r18, 0x20	; 32
 548:	a0 f4       	brcc	.+40     	; 0x572 <vfprintf+0x88>
 54a:	8b 32       	cpi	r24, 0x2B	; 43
 54c:	69 f0       	breq	.+26     	; 0x568 <vfprintf+0x7e>
 54e:	30 f4       	brcc	.+12     	; 0x55c <vfprintf+0x72>
 550:	80 32       	cpi	r24, 0x20	; 32
 552:	59 f0       	breq	.+22     	; 0x56a <vfprintf+0x80>
 554:	83 32       	cpi	r24, 0x23	; 35
 556:	69 f4       	brne	.+26     	; 0x572 <vfprintf+0x88>
 558:	20 61       	ori	r18, 0x10	; 16
 55a:	2c c0       	rjmp	.+88     	; 0x5b4 <vfprintf+0xca>
 55c:	8d 32       	cpi	r24, 0x2D	; 45
 55e:	39 f0       	breq	.+14     	; 0x56e <vfprintf+0x84>
 560:	80 33       	cpi	r24, 0x30	; 48
 562:	39 f4       	brne	.+14     	; 0x572 <vfprintf+0x88>
 564:	21 60       	ori	r18, 0x01	; 1
 566:	26 c0       	rjmp	.+76     	; 0x5b4 <vfprintf+0xca>
 568:	22 60       	ori	r18, 0x02	; 2
 56a:	24 60       	ori	r18, 0x04	; 4
 56c:	23 c0       	rjmp	.+70     	; 0x5b4 <vfprintf+0xca>
 56e:	28 60       	ori	r18, 0x08	; 8
 570:	21 c0       	rjmp	.+66     	; 0x5b4 <vfprintf+0xca>
 572:	27 fd       	sbrc	r18, 7
 574:	27 c0       	rjmp	.+78     	; 0x5c4 <vfprintf+0xda>
 576:	30 ed       	ldi	r19, 0xD0	; 208
 578:	38 0f       	add	r19, r24
 57a:	3a 30       	cpi	r19, 0x0A	; 10
 57c:	78 f4       	brcc	.+30     	; 0x59c <vfprintf+0xb2>
 57e:	26 ff       	sbrs	r18, 6
 580:	06 c0       	rjmp	.+12     	; 0x58e <vfprintf+0xa4>
 582:	fa e0       	ldi	r31, 0x0A	; 10
 584:	5f 9e       	mul	r5, r31
 586:	30 0d       	add	r19, r0
 588:	11 24       	eor	r1, r1
 58a:	53 2e       	mov	r5, r19
 58c:	13 c0       	rjmp	.+38     	; 0x5b4 <vfprintf+0xca>
 58e:	8a e0       	ldi	r24, 0x0A	; 10
 590:	38 9e       	mul	r3, r24
 592:	30 0d       	add	r19, r0
 594:	11 24       	eor	r1, r1
 596:	33 2e       	mov	r3, r19
 598:	20 62       	ori	r18, 0x20	; 32
 59a:	0c c0       	rjmp	.+24     	; 0x5b4 <vfprintf+0xca>
 59c:	8e 32       	cpi	r24, 0x2E	; 46
 59e:	21 f4       	brne	.+8      	; 0x5a8 <vfprintf+0xbe>
 5a0:	26 fd       	sbrc	r18, 6
 5a2:	6b c1       	rjmp	.+726    	; 0x87a <__stack+0x1b>
 5a4:	20 64       	ori	r18, 0x40	; 64
 5a6:	06 c0       	rjmp	.+12     	; 0x5b4 <vfprintf+0xca>
 5a8:	8c 36       	cpi	r24, 0x6C	; 108
 5aa:	11 f4       	brne	.+4      	; 0x5b0 <vfprintf+0xc6>
 5ac:	20 68       	ori	r18, 0x80	; 128
 5ae:	02 c0       	rjmp	.+4      	; 0x5b4 <vfprintf+0xca>
 5b0:	88 36       	cpi	r24, 0x68	; 104
 5b2:	41 f4       	brne	.+16     	; 0x5c4 <vfprintf+0xda>
 5b4:	f6 01       	movw	r30, r12
 5b6:	93 fd       	sbrc	r25, 3
 5b8:	85 91       	lpm	r24, Z+
 5ba:	93 ff       	sbrs	r25, 3
 5bc:	81 91       	ld	r24, Z+
 5be:	6f 01       	movw	r12, r30
 5c0:	81 11       	cpse	r24, r1
 5c2:	c1 cf       	rjmp	.-126    	; 0x546 <vfprintf+0x5c>
 5c4:	98 2f       	mov	r25, r24
 5c6:	9f 7d       	andi	r25, 0xDF	; 223
 5c8:	95 54       	subi	r25, 0x45	; 69
 5ca:	93 30       	cpi	r25, 0x03	; 3
 5cc:	28 f4       	brcc	.+10     	; 0x5d8 <vfprintf+0xee>
 5ce:	0c 5f       	subi	r16, 0xFC	; 252
 5d0:	1f 4f       	sbci	r17, 0xFF	; 255
 5d2:	ff e3       	ldi	r31, 0x3F	; 63
 5d4:	f9 83       	std	Y+1, r31	; 0x01
 5d6:	0d c0       	rjmp	.+26     	; 0x5f2 <vfprintf+0x108>
 5d8:	83 36       	cpi	r24, 0x63	; 99
 5da:	31 f0       	breq	.+12     	; 0x5e8 <vfprintf+0xfe>
 5dc:	83 37       	cpi	r24, 0x73	; 115
 5de:	71 f0       	breq	.+28     	; 0x5fc <vfprintf+0x112>
 5e0:	83 35       	cpi	r24, 0x53	; 83
 5e2:	09 f0       	breq	.+2      	; 0x5e6 <vfprintf+0xfc>
 5e4:	5b c0       	rjmp	.+182    	; 0x69c <vfprintf+0x1b2>
 5e6:	22 c0       	rjmp	.+68     	; 0x62c <vfprintf+0x142>
 5e8:	f8 01       	movw	r30, r16
 5ea:	80 81       	ld	r24, Z
 5ec:	89 83       	std	Y+1, r24	; 0x01
 5ee:	0e 5f       	subi	r16, 0xFE	; 254
 5f0:	1f 4f       	sbci	r17, 0xFF	; 255
 5f2:	44 24       	eor	r4, r4
 5f4:	43 94       	inc	r4
 5f6:	51 2c       	mov	r5, r1
 5f8:	54 01       	movw	r10, r8
 5fa:	15 c0       	rjmp	.+42     	; 0x626 <vfprintf+0x13c>
 5fc:	38 01       	movw	r6, r16
 5fe:	f2 e0       	ldi	r31, 0x02	; 2
 600:	6f 0e       	add	r6, r31
 602:	71 1c       	adc	r7, r1
 604:	f8 01       	movw	r30, r16
 606:	a0 80       	ld	r10, Z
 608:	b1 80       	ldd	r11, Z+1	; 0x01
 60a:	26 ff       	sbrs	r18, 6
 60c:	03 c0       	rjmp	.+6      	; 0x614 <vfprintf+0x12a>
 60e:	65 2d       	mov	r22, r5
 610:	70 e0       	ldi	r23, 0x00	; 0
 612:	02 c0       	rjmp	.+4      	; 0x618 <vfprintf+0x12e>
 614:	6f ef       	ldi	r22, 0xFF	; 255
 616:	7f ef       	ldi	r23, 0xFF	; 255
 618:	c5 01       	movw	r24, r10
 61a:	2c 87       	std	Y+12, r18	; 0x0c
 61c:	0e 94 52 04 	call	0x8a4	; 0x8a4 <strnlen>
 620:	2c 01       	movw	r4, r24
 622:	83 01       	movw	r16, r6
 624:	2c 85       	ldd	r18, Y+12	; 0x0c
 626:	2f 77       	andi	r18, 0x7F	; 127
 628:	22 2e       	mov	r2, r18
 62a:	17 c0       	rjmp	.+46     	; 0x65a <vfprintf+0x170>
 62c:	38 01       	movw	r6, r16
 62e:	f2 e0       	ldi	r31, 0x02	; 2
 630:	6f 0e       	add	r6, r31
 632:	71 1c       	adc	r7, r1
 634:	f8 01       	movw	r30, r16
 636:	a0 80       	ld	r10, Z
 638:	b1 80       	ldd	r11, Z+1	; 0x01
 63a:	26 ff       	sbrs	r18, 6
 63c:	03 c0       	rjmp	.+6      	; 0x644 <vfprintf+0x15a>
 63e:	65 2d       	mov	r22, r5
 640:	70 e0       	ldi	r23, 0x00	; 0
 642:	02 c0       	rjmp	.+4      	; 0x648 <vfprintf+0x15e>
 644:	6f ef       	ldi	r22, 0xFF	; 255
 646:	7f ef       	ldi	r23, 0xFF	; 255
 648:	c5 01       	movw	r24, r10
 64a:	2c 87       	std	Y+12, r18	; 0x0c
 64c:	0e 94 47 04 	call	0x88e	; 0x88e <strnlen_P>
 650:	2c 01       	movw	r4, r24
 652:	2c 85       	ldd	r18, Y+12	; 0x0c
 654:	20 68       	ori	r18, 0x80	; 128
 656:	22 2e       	mov	r2, r18
 658:	83 01       	movw	r16, r6
 65a:	23 fc       	sbrc	r2, 3
 65c:	1b c0       	rjmp	.+54     	; 0x694 <vfprintf+0x1aa>
 65e:	83 2d       	mov	r24, r3
 660:	90 e0       	ldi	r25, 0x00	; 0
 662:	48 16       	cp	r4, r24
 664:	59 06       	cpc	r5, r25
 666:	b0 f4       	brcc	.+44     	; 0x694 <vfprintf+0x1aa>
 668:	b7 01       	movw	r22, r14
 66a:	80 e2       	ldi	r24, 0x20	; 32
 66c:	90 e0       	ldi	r25, 0x00	; 0
 66e:	0e 94 5d 04 	call	0x8ba	; 0x8ba <fputc>
 672:	3a 94       	dec	r3
 674:	f4 cf       	rjmp	.-24     	; 0x65e <vfprintf+0x174>
 676:	f5 01       	movw	r30, r10
 678:	27 fc       	sbrc	r2, 7
 67a:	85 91       	lpm	r24, Z+
 67c:	27 fe       	sbrs	r2, 7
 67e:	81 91       	ld	r24, Z+
 680:	5f 01       	movw	r10, r30
 682:	b7 01       	movw	r22, r14
 684:	90 e0       	ldi	r25, 0x00	; 0
 686:	0e 94 5d 04 	call	0x8ba	; 0x8ba <fputc>
 68a:	31 10       	cpse	r3, r1
 68c:	3a 94       	dec	r3
 68e:	f1 e0       	ldi	r31, 0x01	; 1
 690:	4f 1a       	sub	r4, r31
 692:	51 08       	sbc	r5, r1
 694:	41 14       	cp	r4, r1
 696:	51 04       	cpc	r5, r1
 698:	71 f7       	brne	.-36     	; 0x676 <vfprintf+0x18c>
 69a:	e5 c0       	rjmp	.+458    	; 0x866 <__stack+0x7>
 69c:	84 36       	cpi	r24, 0x64	; 100
 69e:	11 f0       	breq	.+4      	; 0x6a4 <vfprintf+0x1ba>
 6a0:	89 36       	cpi	r24, 0x69	; 105
 6a2:	39 f5       	brne	.+78     	; 0x6f2 <vfprintf+0x208>
 6a4:	f8 01       	movw	r30, r16
 6a6:	27 ff       	sbrs	r18, 7
 6a8:	07 c0       	rjmp	.+14     	; 0x6b8 <vfprintf+0x1ce>
 6aa:	60 81       	ld	r22, Z
 6ac:	71 81       	ldd	r23, Z+1	; 0x01
 6ae:	82 81       	ldd	r24, Z+2	; 0x02
 6b0:	93 81       	ldd	r25, Z+3	; 0x03
 6b2:	0c 5f       	subi	r16, 0xFC	; 252
 6b4:	1f 4f       	sbci	r17, 0xFF	; 255
 6b6:	08 c0       	rjmp	.+16     	; 0x6c8 <vfprintf+0x1de>
 6b8:	60 81       	ld	r22, Z
 6ba:	71 81       	ldd	r23, Z+1	; 0x01
 6bc:	07 2e       	mov	r0, r23
 6be:	00 0c       	add	r0, r0
 6c0:	88 0b       	sbc	r24, r24
 6c2:	99 0b       	sbc	r25, r25
 6c4:	0e 5f       	subi	r16, 0xFE	; 254
 6c6:	1f 4f       	sbci	r17, 0xFF	; 255
 6c8:	2f 76       	andi	r18, 0x6F	; 111
 6ca:	72 2e       	mov	r7, r18
 6cc:	97 ff       	sbrs	r25, 7
 6ce:	09 c0       	rjmp	.+18     	; 0x6e2 <vfprintf+0x1f8>
 6d0:	90 95       	com	r25
 6d2:	80 95       	com	r24
 6d4:	70 95       	com	r23
 6d6:	61 95       	neg	r22
 6d8:	7f 4f       	sbci	r23, 0xFF	; 255
 6da:	8f 4f       	sbci	r24, 0xFF	; 255
 6dc:	9f 4f       	sbci	r25, 0xFF	; 255
 6de:	20 68       	ori	r18, 0x80	; 128
 6e0:	72 2e       	mov	r7, r18
 6e2:	2a e0       	ldi	r18, 0x0A	; 10
 6e4:	30 e0       	ldi	r19, 0x00	; 0
 6e6:	a4 01       	movw	r20, r8
 6e8:	0e 94 95 04 	call	0x92a	; 0x92a <__ultoa_invert>
 6ec:	a8 2e       	mov	r10, r24
 6ee:	a8 18       	sub	r10, r8
 6f0:	44 c0       	rjmp	.+136    	; 0x77a <vfprintf+0x290>
 6f2:	85 37       	cpi	r24, 0x75	; 117
 6f4:	29 f4       	brne	.+10     	; 0x700 <vfprintf+0x216>
 6f6:	2f 7e       	andi	r18, 0xEF	; 239
 6f8:	b2 2e       	mov	r11, r18
 6fa:	2a e0       	ldi	r18, 0x0A	; 10
 6fc:	30 e0       	ldi	r19, 0x00	; 0
 6fe:	25 c0       	rjmp	.+74     	; 0x74a <vfprintf+0x260>
 700:	f2 2f       	mov	r31, r18
 702:	f9 7f       	andi	r31, 0xF9	; 249
 704:	bf 2e       	mov	r11, r31
 706:	8f 36       	cpi	r24, 0x6F	; 111
 708:	c1 f0       	breq	.+48     	; 0x73a <vfprintf+0x250>
 70a:	18 f4       	brcc	.+6      	; 0x712 <vfprintf+0x228>
 70c:	88 35       	cpi	r24, 0x58	; 88
 70e:	79 f0       	breq	.+30     	; 0x72e <vfprintf+0x244>
 710:	b4 c0       	rjmp	.+360    	; 0x87a <__stack+0x1b>
 712:	80 37       	cpi	r24, 0x70	; 112
 714:	19 f0       	breq	.+6      	; 0x71c <vfprintf+0x232>
 716:	88 37       	cpi	r24, 0x78	; 120
 718:	21 f0       	breq	.+8      	; 0x722 <vfprintf+0x238>
 71a:	af c0       	rjmp	.+350    	; 0x87a <__stack+0x1b>
 71c:	2f 2f       	mov	r18, r31
 71e:	20 61       	ori	r18, 0x10	; 16
 720:	b2 2e       	mov	r11, r18
 722:	b4 fe       	sbrs	r11, 4
 724:	0d c0       	rjmp	.+26     	; 0x740 <vfprintf+0x256>
 726:	8b 2d       	mov	r24, r11
 728:	84 60       	ori	r24, 0x04	; 4
 72a:	b8 2e       	mov	r11, r24
 72c:	09 c0       	rjmp	.+18     	; 0x740 <vfprintf+0x256>
 72e:	24 ff       	sbrs	r18, 4
 730:	0a c0       	rjmp	.+20     	; 0x746 <vfprintf+0x25c>
 732:	9f 2f       	mov	r25, r31
 734:	96 60       	ori	r25, 0x06	; 6
 736:	b9 2e       	mov	r11, r25
 738:	06 c0       	rjmp	.+12     	; 0x746 <vfprintf+0x25c>
 73a:	28 e0       	ldi	r18, 0x08	; 8
 73c:	30 e0       	ldi	r19, 0x00	; 0
 73e:	05 c0       	rjmp	.+10     	; 0x74a <vfprintf+0x260>
 740:	20 e1       	ldi	r18, 0x10	; 16
 742:	30 e0       	ldi	r19, 0x00	; 0
 744:	02 c0       	rjmp	.+4      	; 0x74a <vfprintf+0x260>
 746:	20 e1       	ldi	r18, 0x10	; 16
 748:	32 e0       	ldi	r19, 0x02	; 2
 74a:	f8 01       	movw	r30, r16
 74c:	b7 fe       	sbrs	r11, 7
 74e:	07 c0       	rjmp	.+14     	; 0x75e <vfprintf+0x274>
 750:	60 81       	ld	r22, Z
 752:	71 81       	ldd	r23, Z+1	; 0x01
 754:	82 81       	ldd	r24, Z+2	; 0x02
 756:	93 81       	ldd	r25, Z+3	; 0x03
 758:	0c 5f       	subi	r16, 0xFC	; 252
 75a:	1f 4f       	sbci	r17, 0xFF	; 255
 75c:	06 c0       	rjmp	.+12     	; 0x76a <vfprintf+0x280>
 75e:	60 81       	ld	r22, Z
 760:	71 81       	ldd	r23, Z+1	; 0x01
 762:	80 e0       	ldi	r24, 0x00	; 0
 764:	90 e0       	ldi	r25, 0x00	; 0
 766:	0e 5f       	subi	r16, 0xFE	; 254
 768:	1f 4f       	sbci	r17, 0xFF	; 255
 76a:	a4 01       	movw	r20, r8
 76c:	0e 94 95 04 	call	0x92a	; 0x92a <__ultoa_invert>
 770:	a8 2e       	mov	r10, r24
 772:	a8 18       	sub	r10, r8
 774:	fb 2d       	mov	r31, r11
 776:	ff 77       	andi	r31, 0x7F	; 127
 778:	7f 2e       	mov	r7, r31
 77a:	76 fe       	sbrs	r7, 6
 77c:	0b c0       	rjmp	.+22     	; 0x794 <vfprintf+0x2aa>
 77e:	37 2d       	mov	r19, r7
 780:	3e 7f       	andi	r19, 0xFE	; 254
 782:	a5 14       	cp	r10, r5
 784:	50 f4       	brcc	.+20     	; 0x79a <vfprintf+0x2b0>
 786:	74 fe       	sbrs	r7, 4
 788:	0a c0       	rjmp	.+20     	; 0x79e <vfprintf+0x2b4>
 78a:	72 fc       	sbrc	r7, 2
 78c:	08 c0       	rjmp	.+16     	; 0x79e <vfprintf+0x2b4>
 78e:	37 2d       	mov	r19, r7
 790:	3e 7e       	andi	r19, 0xEE	; 238
 792:	05 c0       	rjmp	.+10     	; 0x79e <vfprintf+0x2b4>
 794:	ba 2c       	mov	r11, r10
 796:	37 2d       	mov	r19, r7
 798:	03 c0       	rjmp	.+6      	; 0x7a0 <vfprintf+0x2b6>
 79a:	ba 2c       	mov	r11, r10
 79c:	01 c0       	rjmp	.+2      	; 0x7a0 <vfprintf+0x2b6>
 79e:	b5 2c       	mov	r11, r5
 7a0:	34 ff       	sbrs	r19, 4
 7a2:	0d c0       	rjmp	.+26     	; 0x7be <vfprintf+0x2d4>
 7a4:	fe 01       	movw	r30, r28
 7a6:	ea 0d       	add	r30, r10
 7a8:	f1 1d       	adc	r31, r1
 7aa:	80 81       	ld	r24, Z
 7ac:	80 33       	cpi	r24, 0x30	; 48
 7ae:	11 f4       	brne	.+4      	; 0x7b4 <vfprintf+0x2ca>
 7b0:	39 7e       	andi	r19, 0xE9	; 233
 7b2:	09 c0       	rjmp	.+18     	; 0x7c6 <vfprintf+0x2dc>
 7b4:	32 ff       	sbrs	r19, 2
 7b6:	06 c0       	rjmp	.+12     	; 0x7c4 <vfprintf+0x2da>
 7b8:	b3 94       	inc	r11
 7ba:	b3 94       	inc	r11
 7bc:	04 c0       	rjmp	.+8      	; 0x7c6 <vfprintf+0x2dc>
 7be:	83 2f       	mov	r24, r19
 7c0:	86 78       	andi	r24, 0x86	; 134
 7c2:	09 f0       	breq	.+2      	; 0x7c6 <vfprintf+0x2dc>
 7c4:	b3 94       	inc	r11
 7c6:	33 fd       	sbrc	r19, 3
 7c8:	13 c0       	rjmp	.+38     	; 0x7f0 <vfprintf+0x306>
 7ca:	30 ff       	sbrs	r19, 0
 7cc:	06 c0       	rjmp	.+12     	; 0x7da <vfprintf+0x2f0>
 7ce:	5a 2c       	mov	r5, r10
 7d0:	b3 14       	cp	r11, r3
 7d2:	18 f4       	brcc	.+6      	; 0x7da <vfprintf+0x2f0>
 7d4:	53 0c       	add	r5, r3
 7d6:	5b 18       	sub	r5, r11
 7d8:	b3 2c       	mov	r11, r3
 7da:	b3 14       	cp	r11, r3
 7dc:	68 f4       	brcc	.+26     	; 0x7f8 <vfprintf+0x30e>
 7de:	b7 01       	movw	r22, r14
 7e0:	80 e2       	ldi	r24, 0x20	; 32
 7e2:	90 e0       	ldi	r25, 0x00	; 0
 7e4:	3c 87       	std	Y+12, r19	; 0x0c
 7e6:	0e 94 5d 04 	call	0x8ba	; 0x8ba <fputc>
 7ea:	b3 94       	inc	r11
 7ec:	3c 85       	ldd	r19, Y+12	; 0x0c
 7ee:	f5 cf       	rjmp	.-22     	; 0x7da <vfprintf+0x2f0>
 7f0:	b3 14       	cp	r11, r3
 7f2:	10 f4       	brcc	.+4      	; 0x7f8 <vfprintf+0x30e>
 7f4:	3b 18       	sub	r3, r11
 7f6:	01 c0       	rjmp	.+2      	; 0x7fa <vfprintf+0x310>
 7f8:	31 2c       	mov	r3, r1
 7fa:	34 ff       	sbrs	r19, 4
 7fc:	12 c0       	rjmp	.+36     	; 0x822 <vfprintf+0x338>
 7fe:	b7 01       	movw	r22, r14
 800:	80 e3       	ldi	r24, 0x30	; 48
 802:	90 e0       	ldi	r25, 0x00	; 0
 804:	3c 87       	std	Y+12, r19	; 0x0c
 806:	0e 94 5d 04 	call	0x8ba	; 0x8ba <fputc>
 80a:	3c 85       	ldd	r19, Y+12	; 0x0c
 80c:	32 ff       	sbrs	r19, 2
 80e:	17 c0       	rjmp	.+46     	; 0x83e <vfprintf+0x354>
 810:	31 fd       	sbrc	r19, 1
 812:	03 c0       	rjmp	.+6      	; 0x81a <vfprintf+0x330>
 814:	88 e7       	ldi	r24, 0x78	; 120
 816:	90 e0       	ldi	r25, 0x00	; 0
 818:	02 c0       	rjmp	.+4      	; 0x81e <vfprintf+0x334>
 81a:	88 e5       	ldi	r24, 0x58	; 88
 81c:	90 e0       	ldi	r25, 0x00	; 0
 81e:	b7 01       	movw	r22, r14
 820:	0c c0       	rjmp	.+24     	; 0x83a <vfprintf+0x350>
 822:	83 2f       	mov	r24, r19
 824:	86 78       	andi	r24, 0x86	; 134
 826:	59 f0       	breq	.+22     	; 0x83e <vfprintf+0x354>
 828:	31 ff       	sbrs	r19, 1
 82a:	02 c0       	rjmp	.+4      	; 0x830 <vfprintf+0x346>
 82c:	8b e2       	ldi	r24, 0x2B	; 43
 82e:	01 c0       	rjmp	.+2      	; 0x832 <vfprintf+0x348>
 830:	80 e2       	ldi	r24, 0x20	; 32
 832:	37 fd       	sbrc	r19, 7
 834:	8d e2       	ldi	r24, 0x2D	; 45
 836:	b7 01       	movw	r22, r14
 838:	90 e0       	ldi	r25, 0x00	; 0
 83a:	0e 94 5d 04 	call	0x8ba	; 0x8ba <fputc>
 83e:	a5 14       	cp	r10, r5
 840:	38 f4       	brcc	.+14     	; 0x850 <vfprintf+0x366>
 842:	b7 01       	movw	r22, r14
 844:	80 e3       	ldi	r24, 0x30	; 48
 846:	90 e0       	ldi	r25, 0x00	; 0
 848:	0e 94 5d 04 	call	0x8ba	; 0x8ba <fputc>
 84c:	5a 94       	dec	r5
 84e:	f7 cf       	rjmp	.-18     	; 0x83e <vfprintf+0x354>
 850:	aa 94       	dec	r10
 852:	f4 01       	movw	r30, r8
 854:	ea 0d       	add	r30, r10
 856:	f1 1d       	adc	r31, r1
 858:	80 81       	ld	r24, Z
 85a:	b7 01       	movw	r22, r14
 85c:	90 e0       	ldi	r25, 0x00	; 0
 85e:	0e 94 5d 04 	call	0x8ba	; 0x8ba <fputc>
 862:	a1 10       	cpse	r10, r1
 864:	f5 cf       	rjmp	.-22     	; 0x850 <vfprintf+0x366>
 866:	33 20       	and	r3, r3
 868:	09 f4       	brne	.+2      	; 0x86c <__stack+0xd>
 86a:	51 ce       	rjmp	.-862    	; 0x50e <vfprintf+0x24>
 86c:	b7 01       	movw	r22, r14
 86e:	80 e2       	ldi	r24, 0x20	; 32
 870:	90 e0       	ldi	r25, 0x00	; 0
 872:	0e 94 5d 04 	call	0x8ba	; 0x8ba <fputc>
 876:	3a 94       	dec	r3
 878:	f6 cf       	rjmp	.-20     	; 0x866 <__stack+0x7>
 87a:	f7 01       	movw	r30, r14
 87c:	86 81       	ldd	r24, Z+6	; 0x06
 87e:	97 81       	ldd	r25, Z+7	; 0x07
 880:	02 c0       	rjmp	.+4      	; 0x886 <__stack+0x27>
 882:	8f ef       	ldi	r24, 0xFF	; 255
 884:	9f ef       	ldi	r25, 0xFF	; 255
 886:	2c 96       	adiw	r28, 0x0c	; 12
 888:	e2 e1       	ldi	r30, 0x12	; 18
 88a:	0c 94 0f 05 	jmp	0xa1e	; 0xa1e <__epilogue_restores__>

0000088e <strnlen_P>:
 88e:	fc 01       	movw	r30, r24
 890:	05 90       	lpm	r0, Z+
 892:	61 50       	subi	r22, 0x01	; 1
 894:	70 40       	sbci	r23, 0x00	; 0
 896:	01 10       	cpse	r0, r1
 898:	d8 f7       	brcc	.-10     	; 0x890 <strnlen_P+0x2>
 89a:	80 95       	com	r24
 89c:	90 95       	com	r25
 89e:	8e 0f       	add	r24, r30
 8a0:	9f 1f       	adc	r25, r31
 8a2:	08 95       	ret

000008a4 <strnlen>:
 8a4:	fc 01       	movw	r30, r24
 8a6:	61 50       	subi	r22, 0x01	; 1
 8a8:	70 40       	sbci	r23, 0x00	; 0
 8aa:	01 90       	ld	r0, Z+
 8ac:	01 10       	cpse	r0, r1
 8ae:	d8 f7       	brcc	.-10     	; 0x8a6 <strnlen+0x2>
 8b0:	80 95       	com	r24
 8b2:	90 95       	com	r25
 8b4:	8e 0f       	add	r24, r30
 8b6:	9f 1f       	adc	r25, r31
 8b8:	08 95       	ret

000008ba <fputc>:
 8ba:	0f 93       	push	r16
 8bc:	1f 93       	push	r17
 8be:	cf 93       	push	r28
 8c0:	df 93       	push	r29
 8c2:	fb 01       	movw	r30, r22
 8c4:	23 81       	ldd	r18, Z+3	; 0x03
 8c6:	21 fd       	sbrc	r18, 1
 8c8:	03 c0       	rjmp	.+6      	; 0x8d0 <fputc+0x16>
 8ca:	8f ef       	ldi	r24, 0xFF	; 255
 8cc:	9f ef       	ldi	r25, 0xFF	; 255
 8ce:	28 c0       	rjmp	.+80     	; 0x920 <fputc+0x66>
 8d0:	22 ff       	sbrs	r18, 2
 8d2:	16 c0       	rjmp	.+44     	; 0x900 <fputc+0x46>
 8d4:	46 81       	ldd	r20, Z+6	; 0x06
 8d6:	57 81       	ldd	r21, Z+7	; 0x07
 8d8:	24 81       	ldd	r18, Z+4	; 0x04
 8da:	35 81       	ldd	r19, Z+5	; 0x05
 8dc:	42 17       	cp	r20, r18
 8de:	53 07       	cpc	r21, r19
 8e0:	44 f4       	brge	.+16     	; 0x8f2 <fputc+0x38>
 8e2:	a0 81       	ld	r26, Z
 8e4:	b1 81       	ldd	r27, Z+1	; 0x01
 8e6:	9d 01       	movw	r18, r26
 8e8:	2f 5f       	subi	r18, 0xFF	; 255
 8ea:	3f 4f       	sbci	r19, 0xFF	; 255
 8ec:	31 83       	std	Z+1, r19	; 0x01
 8ee:	20 83       	st	Z, r18
 8f0:	8c 93       	st	X, r24
 8f2:	26 81       	ldd	r18, Z+6	; 0x06
 8f4:	37 81       	ldd	r19, Z+7	; 0x07
 8f6:	2f 5f       	subi	r18, 0xFF	; 255
 8f8:	3f 4f       	sbci	r19, 0xFF	; 255
 8fa:	37 83       	std	Z+7, r19	; 0x07
 8fc:	26 83       	std	Z+6, r18	; 0x06
 8fe:	10 c0       	rjmp	.+32     	; 0x920 <fputc+0x66>
 900:	eb 01       	movw	r28, r22
 902:	09 2f       	mov	r16, r25
 904:	18 2f       	mov	r17, r24
 906:	00 84       	ldd	r0, Z+8	; 0x08
 908:	f1 85       	ldd	r31, Z+9	; 0x09
 90a:	e0 2d       	mov	r30, r0
 90c:	09 95       	icall
 90e:	89 2b       	or	r24, r25
 910:	e1 f6       	brne	.-72     	; 0x8ca <fputc+0x10>
 912:	8e 81       	ldd	r24, Y+6	; 0x06
 914:	9f 81       	ldd	r25, Y+7	; 0x07
 916:	01 96       	adiw	r24, 0x01	; 1
 918:	9f 83       	std	Y+7, r25	; 0x07
 91a:	8e 83       	std	Y+6, r24	; 0x06
 91c:	81 2f       	mov	r24, r17
 91e:	90 2f       	mov	r25, r16
 920:	df 91       	pop	r29
 922:	cf 91       	pop	r28
 924:	1f 91       	pop	r17
 926:	0f 91       	pop	r16
 928:	08 95       	ret

0000092a <__ultoa_invert>:
 92a:	fa 01       	movw	r30, r20
 92c:	aa 27       	eor	r26, r26
 92e:	28 30       	cpi	r18, 0x08	; 8
 930:	51 f1       	breq	.+84     	; 0x986 <__ultoa_invert+0x5c>
 932:	20 31       	cpi	r18, 0x10	; 16
 934:	81 f1       	breq	.+96     	; 0x996 <__ultoa_invert+0x6c>
 936:	e8 94       	clt
 938:	6f 93       	push	r22
 93a:	6e 7f       	andi	r22, 0xFE	; 254
 93c:	6e 5f       	subi	r22, 0xFE	; 254
 93e:	7f 4f       	sbci	r23, 0xFF	; 255
 940:	8f 4f       	sbci	r24, 0xFF	; 255
 942:	9f 4f       	sbci	r25, 0xFF	; 255
 944:	af 4f       	sbci	r26, 0xFF	; 255
 946:	b1 e0       	ldi	r27, 0x01	; 1
 948:	3e d0       	rcall	.+124    	; 0x9c6 <__ultoa_invert+0x9c>
 94a:	b4 e0       	ldi	r27, 0x04	; 4
 94c:	3c d0       	rcall	.+120    	; 0x9c6 <__ultoa_invert+0x9c>
 94e:	67 0f       	add	r22, r23
 950:	78 1f       	adc	r23, r24
 952:	89 1f       	adc	r24, r25
 954:	9a 1f       	adc	r25, r26
 956:	a1 1d       	adc	r26, r1
 958:	68 0f       	add	r22, r24
 95a:	79 1f       	adc	r23, r25
 95c:	8a 1f       	adc	r24, r26
 95e:	91 1d       	adc	r25, r1
 960:	a1 1d       	adc	r26, r1
 962:	6a 0f       	add	r22, r26
 964:	71 1d       	adc	r23, r1
 966:	81 1d       	adc	r24, r1
 968:	91 1d       	adc	r25, r1
 96a:	a1 1d       	adc	r26, r1
 96c:	20 d0       	rcall	.+64     	; 0x9ae <__ultoa_invert+0x84>
 96e:	09 f4       	brne	.+2      	; 0x972 <__ultoa_invert+0x48>
 970:	68 94       	set
 972:	3f 91       	pop	r19
 974:	2a e0       	ldi	r18, 0x0A	; 10
 976:	26 9f       	mul	r18, r22
 978:	11 24       	eor	r1, r1
 97a:	30 19       	sub	r19, r0
 97c:	30 5d       	subi	r19, 0xD0	; 208
 97e:	31 93       	st	Z+, r19
 980:	de f6       	brtc	.-74     	; 0x938 <__ultoa_invert+0xe>
 982:	cf 01       	movw	r24, r30
 984:	08 95       	ret
 986:	46 2f       	mov	r20, r22
 988:	47 70       	andi	r20, 0x07	; 7
 98a:	40 5d       	subi	r20, 0xD0	; 208
 98c:	41 93       	st	Z+, r20
 98e:	b3 e0       	ldi	r27, 0x03	; 3
 990:	0f d0       	rcall	.+30     	; 0x9b0 <__ultoa_invert+0x86>
 992:	c9 f7       	brne	.-14     	; 0x986 <__ultoa_invert+0x5c>
 994:	f6 cf       	rjmp	.-20     	; 0x982 <__ultoa_invert+0x58>
 996:	46 2f       	mov	r20, r22
 998:	4f 70       	andi	r20, 0x0F	; 15
 99a:	40 5d       	subi	r20, 0xD0	; 208
 99c:	4a 33       	cpi	r20, 0x3A	; 58
 99e:	18 f0       	brcs	.+6      	; 0x9a6 <__ultoa_invert+0x7c>
 9a0:	49 5d       	subi	r20, 0xD9	; 217
 9a2:	31 fd       	sbrc	r19, 1
 9a4:	40 52       	subi	r20, 0x20	; 32
 9a6:	41 93       	st	Z+, r20
 9a8:	02 d0       	rcall	.+4      	; 0x9ae <__ultoa_invert+0x84>
 9aa:	a9 f7       	brne	.-22     	; 0x996 <__ultoa_invert+0x6c>
 9ac:	ea cf       	rjmp	.-44     	; 0x982 <__ultoa_invert+0x58>
 9ae:	b4 e0       	ldi	r27, 0x04	; 4
 9b0:	a6 95       	lsr	r26
 9b2:	97 95       	ror	r25
 9b4:	87 95       	ror	r24
 9b6:	77 95       	ror	r23
 9b8:	67 95       	ror	r22
 9ba:	ba 95       	dec	r27
 9bc:	c9 f7       	brne	.-14     	; 0x9b0 <__ultoa_invert+0x86>
 9be:	00 97       	sbiw	r24, 0x00	; 0
 9c0:	61 05       	cpc	r22, r1
 9c2:	71 05       	cpc	r23, r1
 9c4:	08 95       	ret
 9c6:	9b 01       	movw	r18, r22
 9c8:	ac 01       	movw	r20, r24
 9ca:	0a 2e       	mov	r0, r26
 9cc:	06 94       	lsr	r0
 9ce:	57 95       	ror	r21
 9d0:	47 95       	ror	r20
 9d2:	37 95       	ror	r19
 9d4:	27 95       	ror	r18
 9d6:	ba 95       	dec	r27
 9d8:	c9 f7       	brne	.-14     	; 0x9cc <__ultoa_invert+0xa2>
 9da:	62 0f       	add	r22, r18
 9dc:	73 1f       	adc	r23, r19
 9de:	84 1f       	adc	r24, r20
 9e0:	95 1f       	adc	r25, r21
 9e2:	a0 1d       	adc	r26, r0
 9e4:	08 95       	ret

000009e6 <__prologue_saves__>:
 9e6:	2f 92       	push	r2
 9e8:	3f 92       	push	r3
 9ea:	4f 92       	push	r4
 9ec:	5f 92       	push	r5
 9ee:	6f 92       	push	r6
 9f0:	7f 92       	push	r7
 9f2:	8f 92       	push	r8
 9f4:	9f 92       	push	r9
 9f6:	af 92       	push	r10
 9f8:	bf 92       	push	r11
 9fa:	cf 92       	push	r12
 9fc:	df 92       	push	r13
 9fe:	ef 92       	push	r14
 a00:	ff 92       	push	r15
 a02:	0f 93       	push	r16
 a04:	1f 93       	push	r17
 a06:	cf 93       	push	r28
 a08:	df 93       	push	r29
 a0a:	cd b7       	in	r28, 0x3d	; 61
 a0c:	de b7       	in	r29, 0x3e	; 62
 a0e:	ca 1b       	sub	r28, r26
 a10:	db 0b       	sbc	r29, r27
 a12:	0f b6       	in	r0, 0x3f	; 63
 a14:	f8 94       	cli
 a16:	de bf       	out	0x3e, r29	; 62
 a18:	0f be       	out	0x3f, r0	; 63
 a1a:	cd bf       	out	0x3d, r28	; 61
 a1c:	09 94       	ijmp

00000a1e <__epilogue_restores__>:
 a1e:	2a 88       	ldd	r2, Y+18	; 0x12
 a20:	39 88       	ldd	r3, Y+17	; 0x11
 a22:	48 88       	ldd	r4, Y+16	; 0x10
 a24:	5f 84       	ldd	r5, Y+15	; 0x0f
 a26:	6e 84       	ldd	r6, Y+14	; 0x0e
 a28:	7d 84       	ldd	r7, Y+13	; 0x0d
 a2a:	8c 84       	ldd	r8, Y+12	; 0x0c
 a2c:	9b 84       	ldd	r9, Y+11	; 0x0b
 a2e:	aa 84       	ldd	r10, Y+10	; 0x0a
 a30:	b9 84       	ldd	r11, Y+9	; 0x09
 a32:	c8 84       	ldd	r12, Y+8	; 0x08
 a34:	df 80       	ldd	r13, Y+7	; 0x07
 a36:	ee 80       	ldd	r14, Y+6	; 0x06
 a38:	fd 80       	ldd	r15, Y+5	; 0x05
 a3a:	0c 81       	ldd	r16, Y+4	; 0x04
 a3c:	1b 81       	ldd	r17, Y+3	; 0x03
 a3e:	aa 81       	ldd	r26, Y+2	; 0x02
 a40:	b9 81       	ldd	r27, Y+1	; 0x01
 a42:	ce 0f       	add	r28, r30
 a44:	d1 1d       	adc	r29, r1
 a46:	0f b6       	in	r0, 0x3f	; 63
 a48:	f8 94       	cli
 a4a:	de bf       	out	0x3e, r29	; 62
 a4c:	0f be       	out	0x3f, r0	; 63
 a4e:	cd bf       	out	0x3d, r28	; 61
 a50:	ed 01       	movw	r28, r26
 a52:	08 95       	ret

00000a54 <_exit>:
 a54:	f8 94       	cli

00000a56 <__stop_program>:
 a56:	ff cf       	rjmp	.-2      	; 0xa56 <__stop_program>
